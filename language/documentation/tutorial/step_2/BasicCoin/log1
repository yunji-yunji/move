INCLUDING DEPENDENCY MoveStdlib
BUILDING BasicCoin
IS this part executed?1 in module in translate.rs
IS this part executed?2 in module in translate.rs
IS this part executed?1 in compile_module function in compiler.rs
yj ModuleDefinition { loc: Loc { file_hash: "af8aca62b6eab1c72b14043c6f3463cbb4aedae3a6c8d162057a65aef66c4b12", start: 94, end: 103 }, identifier: ModuleIdent { name: ModuleName("unit_test"), address: 00000000000000000000000000000001 }, friends: [], imports: [], explicit_dependency_declarations: [], structs: [], constants: [], functions: [(FunctionName("create_signers_for_testing"), Function_ { visibility: Public, is_entry: false, signature: FunctionSignature { formals: [(Var_("num_signers"), U64)], return_type: [Vector(Signer)], type_formals: [] }, acquires: [], specifications: [], body: Native }), (FunctionName("unit_test_poison"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [], code: [(BlockLabel_("0"), [LdU64(0), Call(ModuleName("Self"), FunctionName("create_signers_for_testing"), []), Pop, Ret])] } })], synthetics: [] }
IS this part executed?3 in module in translate.rs []
IS this part executed?1 in module in translate.rs
IS this part executed?2 in module in translate.rs
IS this part executed?1 in compile_module function in compiler.rs
yj ModuleDefinition { loc: Loc { file_hash: "c0464c3212a21a8409f217b56fae5bcaa90243fb2b8d0220d8691fb10c91c260", start: 668, end: 674 }, identifier: ModuleIdent { name: ModuleName("vector"), address: 00000000000000000000000000000001 }, friends: [], imports: [ImportDefinition { ident: ModuleIdent { name: ModuleName("unit_test"), address: 00000000000000000000000000000001 }, alias: ModuleName("1::unit_test") }], explicit_dependency_declarations: [ModuleDependency { name: ModuleName("1::unit_test"), structs: [], functions: [FunctionDependency { name: FunctionName("create_signers_for_testing"), signature: FunctionSignature { formals: [(Var_("num_signers"), U64)], return_type: [Vector(Signer)], type_formals: [] } }] }], structs: [], constants: [Constant { name: ConstantName("EINDEX_OUT_OF_BOUNDS"), signature: U64, value: U64(131072) }], functions: [(FunctionName("append"), Function_ { visibility: Public, is_entry: false, signature: FunctionSignature { formals: [(Var_("lhs"), Reference(true, Vector(TypeParameter(TypeVar_("Element"))))), (Var_("other"), Vector(TypeParameter(TypeVar_("Element"))))], return_type: [], type_formals: [(TypeVar_("Element"), {})] }, acquires: [], specifications: [], body: Bytecode { locals: [], code: [(BlockLabel_("0"), [MutBorrowLoc(Var_("other")), Call(ModuleName("Self"), FunctionName("reverse"), [TypeParameter(TypeVar_("Element"))])]), (BlockLabel_("1"), [ImmBorrowLoc(Var_("other")), Call(ModuleName("Self"), FunctionName("is_empty"), [TypeParameter(TypeVar_("Element"))]), Not, BrFalse(BlockLabel_("3")), Branch(BlockLabel_("2"))]), (BlockLabel_("2"), [CopyLoc(Var_("lhs")), MutBorrowLoc(Var_("other")), VecPopBack(TypeParameter(TypeVar_("Element"))), VecPushBack(TypeParameter(TypeVar_("Element"))), Branch(BlockLabel_("1"))]), (BlockLabel_("3"), [MoveLoc(Var_("lhs")), Pop, MoveLoc(Var_("other")), VecUnpack(TypeParameter(TypeVar_("Element")), 0), Ret])] } }), (FunctionName("borrow"), Function_ { visibility: Public, is_entry: false, signature: FunctionSignature { formals: [(Var_("v"), Reference(false, Vector(TypeParameter(TypeVar_("Element"))))), (Var_("i"), U64)], return_type: [Reference(false, TypeParameter(TypeVar_("Element")))], type_formals: [(TypeVar_("Element"), {})] }, acquires: [], specifications: [], body: Native }), (FunctionName("borrow_mut"), Function_ { visibility: Public, is_entry: false, signature: FunctionSignature { formals: [(Var_("v"), Reference(true, Vector(TypeParameter(TypeVar_("Element"))))), (Var_("i"), U64)], return_type: [Reference(true, TypeParameter(TypeVar_("Element")))], type_formals: [(TypeVar_("Element"), {})] }, acquires: [], specifications: [], body: Native }), (FunctionName("contains"), Function_ { visibility: Public, is_entry: false, signature: FunctionSignature { formals: [(Var_("v"), Reference(false, Vector(TypeParameter(TypeVar_("Element"))))), (Var_("e"), Reference(false, TypeParameter(TypeVar_("Element"))))], return_type: [Bool], type_formals: [(TypeVar_("Element"), {})] }, acquires: [], specifications: [], body: Bytecode { locals: [(Var_("i"), U64), (Var_("len"), U64)], code: [(BlockLabel_("0"), [LdU64(0), StLoc(Var_("i")), CopyLoc(Var_("v")), VecLen(TypeParameter(TypeVar_("Element"))), StLoc(Var_("len"))]), (BlockLabel_("1"), [CopyLoc(Var_("i")), CopyLoc(Var_("len")), Lt, BrFalse(BlockLabel_("6")), Branch(BlockLabel_("2"))]), (BlockLabel_("2"), [CopyLoc(Var_("v")), CopyLoc(Var_("i")), VecImmBorrow(TypeParameter(TypeVar_("Element"))), CopyLoc(Var_("e")), Eq, BrFalse(BlockLabel_("5"))]), (BlockLabel_("3"), [MoveLoc(Var_("v")), Pop, MoveLoc(Var_("e")), Pop, LdTrue, Ret]), (BlockLabel_("5"), [MoveLoc(Var_("i")), LdU64(1), Add, StLoc(Var_("i")), Branch(BlockLabel_("1"))]), (BlockLabel_("6"), [MoveLoc(Var_("v")), Pop, MoveLoc(Var_("e")), Pop, LdFalse, Ret])] } }), (FunctionName("destroy_empty"), Function_ { visibility: Public, is_entry: false, signature: FunctionSignature { formals: [(Var_("v"), Vector(TypeParameter(TypeVar_("Element"))))], return_type: [], type_formals: [(TypeVar_("Element"), {})] }, acquires: [], specifications: [], body: Native }), (FunctionName("empty"), Function_ { visibility: Public, is_entry: false, signature: FunctionSignature { formals: [], return_type: [Vector(TypeParameter(TypeVar_("Element")))], type_formals: [(TypeVar_("Element"), {})] }, acquires: [], specifications: [], body: Native }), (FunctionName("index_of"), Function_ { visibility: Public, is_entry: false, signature: FunctionSignature { formals: [(Var_("v"), Reference(false, Vector(TypeParameter(TypeVar_("Element"))))), (Var_("e"), Reference(false, TypeParameter(TypeVar_("Element"))))], return_type: [Bool, U64], type_formals: [(TypeVar_("Element"), {})] }, acquires: [], specifications: [], body: Bytecode { locals: [(Var_("i"), U64), (Var_("len"), U64)], code: [(BlockLabel_("0"), [LdU64(0), StLoc(Var_("i")), CopyLoc(Var_("v")), VecLen(TypeParameter(TypeVar_("Element"))), StLoc(Var_("len"))]), (BlockLabel_("1"), [CopyLoc(Var_("i")), CopyLoc(Var_("len")), Lt, BrFalse(BlockLabel_("6")), Branch(BlockLabel_("2"))]), (BlockLabel_("2"), [CopyLoc(Var_("v")), CopyLoc(Var_("i")), VecImmBorrow(TypeParameter(TypeVar_("Element"))), CopyLoc(Var_("e")), Eq, BrFalse(BlockLabel_("5"))]), (BlockLabel_("3"), [MoveLoc(Var_("v")), Pop, MoveLoc(Var_("e")), Pop, LdTrue, MoveLoc(Var_("i")), Ret]), (BlockLabel_("5"), [MoveLoc(Var_("i")), LdU64(1), Add, StLoc(Var_("i")), Branch(BlockLabel_("1"))]), (BlockLabel_("6"), [MoveLoc(Var_("v")), Pop, MoveLoc(Var_("e")), Pop, LdFalse, LdU64(0), Ret])] } }), (FunctionName("insert"), Function_ { visibility: Public, is_entry: false, signature: FunctionSignature { formals: [(Var_("v"), Reference(true, Vector(TypeParameter(TypeVar_("Element"))))), (Var_("e"), TypeParameter(TypeVar_("Element"))), (Var_("i"), U64)], return_type: [], type_formals: [(TypeVar_("Element"), {})] }, acquires: [], specifications: [], body: Bytecode { locals: [(Var_("len"), U64)], code: [(BlockLabel_("0"), [CopyLoc(Var_("v")), FreezeRef, VecLen(TypeParameter(TypeVar_("Element"))), StLoc(Var_("len")), CopyLoc(Var_("i")), CopyLoc(Var_("len")), Gt, BrFalse(BlockLabel_("3"))]), (BlockLabel_("1"), [MoveLoc(Var_("v")), Pop, LdNamedConst(ConstantName("EINDEX_OUT_OF_BOUNDS")), Abort]), (BlockLabel_("3"), [CopyLoc(Var_("v")), MoveLoc(Var_("e")), VecPushBack(TypeParameter(TypeVar_("Element")))]), (BlockLabel_("4"), [CopyLoc(Var_("i")), CopyLoc(Var_("len")), Lt, BrFalse(BlockLabel_("6")), Branch(BlockLabel_("5"))]), (BlockLabel_("5"), [CopyLoc(Var_("v")), CopyLoc(Var_("i")), CopyLoc(Var_("len")), VecSwap(TypeParameter(TypeVar_("Element"))), MoveLoc(Var_("i")), LdU64(1), Add, StLoc(Var_("i")), Branch(BlockLabel_("4"))]), (BlockLabel_("6"), [MoveLoc(Var_("v")), Pop, Ret])] } }), (FunctionName("is_empty"), Function_ { visibility: Public, is_entry: false, signature: FunctionSignature { formals: [(Var_("v"), Reference(false, Vector(TypeParameter(TypeVar_("Element")))))], return_type: [Bool], type_formals: [(TypeVar_("Element"), {})] }, acquires: [], specifications: [], body: Bytecode { locals: [], code: [(BlockLabel_("0"), [MoveLoc(Var_("v")), VecLen(TypeParameter(TypeVar_("Element"))), LdU64(0), Eq, Ret])] } }), (FunctionName("length"), Function_ { visibility: Public, is_entry: false, signature: FunctionSignature { formals: [(Var_("v"), Reference(false, Vector(TypeParameter(TypeVar_("Element")))))], return_type: [U64], type_formals: [(TypeVar_("Element"), {})] }, acquires: [], specifications: [], body: Native }), (FunctionName("pop_back"), Function_ { visibility: Public, is_entry: false, signature: FunctionSignature { formals: [(Var_("v"), Reference(true, Vector(TypeParameter(TypeVar_("Element")))))], return_type: [TypeParameter(TypeVar_("Element"))], type_formals: [(TypeVar_("Element"), {})] }, acquires: [], specifications: [], body: Native }), (FunctionName("push_back"), Function_ { visibility: Public, is_entry: false, signature: FunctionSignature { formals: [(Var_("v"), Reference(true, Vector(TypeParameter(TypeVar_("Element"))))), (Var_("e"), TypeParameter(TypeVar_("Element")))], return_type: [], type_formals: [(TypeVar_("Element"), {})] }, acquires: [], specifications: [], body: Native }), (FunctionName("remove"), Function_ { visibility: Public, is_entry: false, signature: FunctionSignature { formals: [(Var_("v"), Reference(true, Vector(TypeParameter(TypeVar_("Element"))))), (Var_("i"), U64)], return_type: [TypeParameter(TypeVar_("Element"))], type_formals: [(TypeVar_("Element"), {})] }, acquires: [], specifications: [], body: Bytecode { locals: [(Var_("%#1"), U64), (Var_("%#2"), Reference(true, Vector(TypeParameter(TypeVar_("Element"))))), (Var_("len"), U64)], code: [(BlockLabel_("0"), [CopyLoc(Var_("v")), FreezeRef, VecLen(TypeParameter(TypeVar_("Element"))), StLoc(Var_("len")), CopyLoc(Var_("i")), CopyLoc(Var_("len")), Ge, BrFalse(BlockLabel_("3"))]), (BlockLabel_("1"), [MoveLoc(Var_("v")), Pop, LdNamedConst(ConstantName("EINDEX_OUT_OF_BOUNDS")), Abort]), (BlockLabel_("3"), [MoveLoc(Var_("len")), LdU64(1), Sub, StLoc(Var_("len"))]), (BlockLabel_("4"), [CopyLoc(Var_("i")), CopyLoc(Var_("len")), Lt, BrFalse(BlockLabel_("6")), Branch(BlockLabel_("5"))]), (BlockLabel_("5"), [CopyLoc(Var_("v")), StLoc(Var_("%#2")), CopyLoc(Var_("i")), StLoc(Var_("%#1")), MoveLoc(Var_("i")), LdU64(1), Add, StLoc(Var_("i")), MoveLoc(Var_("%#2")), MoveLoc(Var_("%#1")), CopyLoc(Var_("i")), VecSwap(TypeParameter(TypeVar_("Element"))), Branch(BlockLabel_("4"))]), (BlockLabel_("6"), [MoveLoc(Var_("v")), VecPopBack(TypeParameter(TypeVar_("Element"))), Ret])] } }), (FunctionName("reverse"), Function_ { visibility: Public, is_entry: false, signature: FunctionSignature { formals: [(Var_("v"), Reference(true, Vector(TypeParameter(TypeVar_("Element")))))], return_type: [], type_formals: [(TypeVar_("Element"), {})] }, acquires: [], specifications: [], body: Bytecode { locals: [(Var_("back_index"), U64), (Var_("front_index"), U64), (Var_("len"), U64)], code: [(BlockLabel_("0"), [CopyLoc(Var_("v")), FreezeRef, VecLen(TypeParameter(TypeVar_("Element"))), StLoc(Var_("len")), CopyLoc(Var_("len")), LdU64(0), Eq, BrFalse(BlockLabel_("3"))]), (BlockLabel_("1"), [MoveLoc(Var_("v")), Pop, Ret]), (BlockLabel_("3"), [LdU64(0), StLoc(Var_("front_index")), MoveLoc(Var_("len")), LdU64(1), Sub, StLoc(Var_("back_index"))]), (BlockLabel_("4"), [CopyLoc(Var_("front_index")), CopyLoc(Var_("back_index")), Lt, BrFalse(BlockLabel_("6")), Branch(BlockLabel_("5"))]), (BlockLabel_("5"), [CopyLoc(Var_("v")), CopyLoc(Var_("front_index")), CopyLoc(Var_("back_index")), VecSwap(TypeParameter(TypeVar_("Element"))), MoveLoc(Var_("front_index")), LdU64(1), Add, StLoc(Var_("front_index")), MoveLoc(Var_("back_index")), LdU64(1), Sub, StLoc(Var_("back_index")), Branch(BlockLabel_("4"))]), (BlockLabel_("6"), [MoveLoc(Var_("v")), Pop, Ret])] } }), (FunctionName("singleton"), Function_ { visibility: Public, is_entry: false, signature: FunctionSignature { formals: [(Var_("e"), TypeParameter(TypeVar_("Element")))], return_type: [Vector(TypeParameter(TypeVar_("Element")))], type_formals: [(TypeVar_("Element"), {})] }, acquires: [], specifications: [], body: Bytecode { locals: [(Var_("v"), Vector(TypeParameter(TypeVar_("Element"))))], code: [(BlockLabel_("0"), [VecPack(TypeParameter(TypeVar_("Element")), 0), StLoc(Var_("v")), MutBorrowLoc(Var_("v")), MoveLoc(Var_("e")), VecPushBack(TypeParameter(TypeVar_("Element"))), MoveLoc(Var_("v")), Ret])] } }), (FunctionName("swap"), Function_ { visibility: Public, is_entry: false, signature: FunctionSignature { formals: [(Var_("v"), Reference(true, Vector(TypeParameter(TypeVar_("Element"))))), (Var_("i"), U64), (Var_("j"), U64)], return_type: [], type_formals: [(TypeVar_("Element"), {})] }, acquires: [], specifications: [], body: Native }), (FunctionName("swap_remove"), Function_ { visibility: Public, is_entry: false, signature: FunctionSignature { formals: [(Var_("v"), Reference(true, Vector(TypeParameter(TypeVar_("Element"))))), (Var_("i"), U64)], return_type: [TypeParameter(TypeVar_("Element"))], type_formals: [(TypeVar_("Element"), {})] }, acquires: [], specifications: [], body: Bytecode { locals: [(Var_("last_idx"), U64)], code: [(BlockLabel_("0"), [CopyLoc(Var_("v")), FreezeRef, Call(ModuleName("Self"), FunctionName("is_empty"), [TypeParameter(TypeVar_("Element"))]), Not, BrFalse(BlockLabel_("2")), Branch(BlockLabel_("3"))]), (BlockLabel_("2"), [MoveLoc(Var_("v")), Pop, LdNamedConst(ConstantName("EINDEX_OUT_OF_BOUNDS")), Abort]), (BlockLabel_("3"), [CopyLoc(Var_("v")), FreezeRef, VecLen(TypeParameter(TypeVar_("Element"))), LdU64(1), Sub, StLoc(Var_("last_idx")), CopyLoc(Var_("v")), MoveLoc(Var_("i")), MoveLoc(Var_("last_idx")), VecSwap(TypeParameter(TypeVar_("Element"))), MoveLoc(Var_("v")), VecPopBack(TypeParameter(TypeVar_("Element"))), Ret])] } }), (FunctionName("unit_test_poison"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [], code: [(BlockLabel_("0"), [LdU64(0), Call(ModuleName("1::unit_test"), FunctionName("create_signers_for_testing"), []), Pop, Ret])] } })], synthetics: [] }
IS this part executed?3 in module in translate.rs []
IS this part executed?1 in module in translate.rs
IS this part executed?2 in module in translate.rs
IS this part executed?1 in compile_module function in compiler.rs
yj ModuleDefinition { loc: Loc { file_hash: "1f68ccdd45f1f31d4c0bccaee279a143d2be6c98aa2061185b56b2459f66507d", start: 111, end: 117 }, identifier: ModuleIdent { name: ModuleName("option"), address: 00000000000000000000000000000001 }, friends: [], imports: [ImportDefinition { ident: ModuleIdent { name: ModuleName("unit_test"), address: 00000000000000000000000000000001 }, alias: ModuleName("1::unit_test") }, ImportDefinition { ident: ModuleIdent { name: ModuleName("vector"), address: 00000000000000000000000000000001 }, alias: ModuleName("1::vector") }], explicit_dependency_declarations: [ModuleDependency { name: ModuleName("1::unit_test"), structs: [], functions: [FunctionDependency { name: FunctionName("create_signers_for_testing"), signature: FunctionSignature { formals: [(Var_("num_signers"), U64)], return_type: [Vector(Signer)], type_formals: [] } }] }, ModuleDependency { name: ModuleName("1::vector"), structs: [], functions: [FunctionDependency { name: FunctionName("contains"), signature: FunctionSignature { formals: [(Var_("v"), Reference(false, Vector(TypeParameter(TypeVar_("Element"))))), (Var_("e"), Reference(false, TypeParameter(TypeVar_("Element"))))], return_type: [Bool], type_formals: [(TypeVar_("Element"), {})] } }, FunctionDependency { name: FunctionName("is_empty"), signature: FunctionSignature { formals: [(Var_("v"), Reference(false, Vector(TypeParameter(TypeVar_("Element")))))], return_type: [Bool], type_formals: [(TypeVar_("Element"), {})] } }, FunctionDependency { name: FunctionName("singleton"), signature: FunctionSignature { formals: [(Var_("e"), TypeParameter(TypeVar_("Element")))], return_type: [Vector(TypeParameter(TypeVar_("Element")))], type_formals: [(TypeVar_("Element"), {})] } }] }], structs: [StructDefinition_ { abilities: {Copy, Drop, Store}, name: StructName("Option"), type_formals: [(false, TypeVar_("Element"), {})], fields: Move { fields: [(Field_("vec"), Vector(TypeParameter(TypeVar_("Element"))))] }, invariants: [] }], constants: [Constant { name: ConstantName("EOPTION_IS_SET"), signature: U64, value: U64(262144) }, Constant { name: ConstantName("EOPTION_NOT_SET"), signature: U64, value: U64(262145) }], functions: [(FunctionName("borrow"), Function_ { visibility: Public, is_entry: false, signature: FunctionSignature { formals: [(Var_("t"), Reference(false, Struct(QualifiedStructIdent { module: ModuleName("Self"), name: StructName("Option") }, [TypeParameter(TypeVar_("Element"))])))], return_type: [Reference(false, TypeParameter(TypeVar_("Element")))], type_formals: [(TypeVar_("Element"), {})] }, acquires: [], specifications: [], body: Bytecode { locals: [], code: [(BlockLabel_("0"), [CopyLoc(Var_("t")), Call(ModuleName("Self"), FunctionName("is_some"), [TypeParameter(TypeVar_("Element"))]), BrFalse(BlockLabel_("2")), Branch(BlockLabel_("3"))]), (BlockLabel_("2"), [MoveLoc(Var_("t")), Pop, LdNamedConst(ConstantName("EOPTION_NOT_SET")), Abort]), (BlockLabel_("3"), [MoveLoc(Var_("t")), ImmBorrowField(StructName("Option"), [TypeParameter(TypeVar_("Element"))], Field_("vec")), LdU64(0), VecImmBorrow(TypeParameter(TypeVar_("Element"))), Ret])] } }), (FunctionName("borrow_mut"), Function_ { visibility: Public, is_entry: false, signature: FunctionSignature { formals: [(Var_("t"), Reference(true, Struct(QualifiedStructIdent { module: ModuleName("Self"), name: StructName("Option") }, [TypeParameter(TypeVar_("Element"))])))], return_type: [Reference(true, TypeParameter(TypeVar_("Element")))], type_formals: [(TypeVar_("Element"), {})] }, acquires: [], specifications: [], body: Bytecode { locals: [], code: [(BlockLabel_("0"), [CopyLoc(Var_("t")), FreezeRef, Call(ModuleName("Self"), FunctionName("is_some"), [TypeParameter(TypeVar_("Element"))]), BrFalse(BlockLabel_("2")), Branch(BlockLabel_("3"))]), (BlockLabel_("2"), [MoveLoc(Var_("t")), Pop, LdNamedConst(ConstantName("EOPTION_NOT_SET")), Abort]), (BlockLabel_("3"), [MoveLoc(Var_("t")), MutBorrowField(StructName("Option"), [TypeParameter(TypeVar_("Element"))], Field_("vec")), LdU64(0), VecMutBorrow(TypeParameter(TypeVar_("Element"))), Ret])] } }), (FunctionName("borrow_with_default"), Function_ { visibility: Public, is_entry: false, signature: FunctionSignature { formals: [(Var_("t"), Reference(false, Struct(QualifiedStructIdent { module: ModuleName("Self"), name: StructName("Option") }, [TypeParameter(TypeVar_("Element"))]))), (Var_("default_ref"), Reference(false, TypeParameter(TypeVar_("Element"))))], return_type: [Reference(false, TypeParameter(TypeVar_("Element")))], type_formals: [(TypeVar_("Element"), {})] }, acquires: [], specifications: [], body: Bytecode { locals: [(Var_("%#1"), Reference(false, TypeParameter(TypeVar_("Element")))), (Var_("vec_ref"), Reference(false, Vector(TypeParameter(TypeVar_("Element")))))], code: [(BlockLabel_("0"), [MoveLoc(Var_("t")), ImmBorrowField(StructName("Option"), [TypeParameter(TypeVar_("Element"))], Field_("vec")), StLoc(Var_("vec_ref")), CopyLoc(Var_("vec_ref")), Call(ModuleName("1::vector"), FunctionName("is_empty"), [TypeParameter(TypeVar_("Element"))]), BrFalse(BlockLabel_("2"))]), (BlockLabel_("1"), [MoveLoc(Var_("vec_ref")), Pop, MoveLoc(Var_("default_ref")), StLoc(Var_("%#1")), Branch(BlockLabel_("3"))]), (BlockLabel_("2"), [MoveLoc(Var_("default_ref")), Pop, MoveLoc(Var_("vec_ref")), LdU64(0), VecImmBorrow(TypeParameter(TypeVar_("Element"))), StLoc(Var_("%#1"))]), (BlockLabel_("3"), [MoveLoc(Var_("%#1")), Ret])] } }), (FunctionName("contains"), Function_ { visibility: Public, is_entry: false, signature: FunctionSignature { formals: [(Var_("t"), Reference(false, Struct(QualifiedStructIdent { module: ModuleName("Self"), name: StructName("Option") }, [TypeParameter(TypeVar_("Element"))]))), (Var_("e_ref"), Reference(false, TypeParameter(TypeVar_("Element"))))], return_type: [Bool], type_formals: [(TypeVar_("Element"), {})] }, acquires: [], specifications: [], body: Bytecode { locals: [], code: [(BlockLabel_("0"), [MoveLoc(Var_("t")), ImmBorrowField(StructName("Option"), [TypeParameter(TypeVar_("Element"))], Field_("vec")), MoveLoc(Var_("e_ref")), Call(ModuleName("1::vector"), FunctionName("contains"), [TypeParameter(TypeVar_("Element"))]), Ret])] } }), (FunctionName("destroy_none"), Function_ { visibility: Public, is_entry: false, signature: FunctionSignature { formals: [(Var_("t"), Struct(QualifiedStructIdent { module: ModuleName("Self"), name: StructName("Option") }, [TypeParameter(TypeVar_("Element"))]))], return_type: [], type_formals: [(TypeVar_("Element"), {})] }, acquires: [], specifications: [], body: Bytecode { locals: [], code: [(BlockLabel_("0"), [ImmBorrowLoc(Var_("t")), Call(ModuleName("Self"), FunctionName("is_none"), [TypeParameter(TypeVar_("Element"))]), BrFalse(BlockLabel_("2")), Branch(BlockLabel_("3"))]), (BlockLabel_("2"), [LdNamedConst(ConstantName("EOPTION_IS_SET")), Abort]), (BlockLabel_("3"), [MoveLoc(Var_("t")), Unpack(StructName("Option"), [TypeParameter(TypeVar_("Element"))]), VecUnpack(TypeParameter(TypeVar_("Element")), 0), Ret])] } }), (FunctionName("destroy_some"), Function_ { visibility: Public, is_entry: false, signature: FunctionSignature { formals: [(Var_("t"), Struct(QualifiedStructIdent { module: ModuleName("Self"), name: StructName("Option") }, [TypeParameter(TypeVar_("Element"))]))], return_type: [TypeParameter(TypeVar_("Element"))], type_formals: [(TypeVar_("Element"), {})] }, acquires: [], specifications: [], body: Bytecode { locals: [(Var_("elem"), TypeParameter(TypeVar_("Element"))), (Var_("vec"), Vector(TypeParameter(TypeVar_("Element"))))], code: [(BlockLabel_("0"), [ImmBorrowLoc(Var_("t")), Call(ModuleName("Self"), FunctionName("is_some"), [TypeParameter(TypeVar_("Element"))]), BrFalse(BlockLabel_("2")), Branch(BlockLabel_("3"))]), (BlockLabel_("2"), [LdNamedConst(ConstantName("EOPTION_NOT_SET")), Abort]), (BlockLabel_("3"), [MoveLoc(Var_("t")), Unpack(StructName("Option"), [TypeParameter(TypeVar_("Element"))]), StLoc(Var_("vec")), MutBorrowLoc(Var_("vec")), VecPopBack(TypeParameter(TypeVar_("Element"))), StLoc(Var_("elem")), MoveLoc(Var_("vec")), VecUnpack(TypeParameter(TypeVar_("Element")), 0), MoveLoc(Var_("elem")), Ret])] } }), (FunctionName("destroy_with_default"), Function_ { visibility: Public, is_entry: false, signature: FunctionSignature { formals: [(Var_("t"), Struct(QualifiedStructIdent { module: ModuleName("Self"), name: StructName("Option") }, [TypeParameter(TypeVar_("Element"))])), (Var_("default"), TypeParameter(TypeVar_("Element")))], return_type: [TypeParameter(TypeVar_("Element"))], type_formals: [(TypeVar_("Element"), {Drop})] }, acquires: [], specifications: [], body: Bytecode { locals: [(Var_("%#1"), TypeParameter(TypeVar_("Element"))), (Var_("vec"), Vector(TypeParameter(TypeVar_("Element"))))], code: [(BlockLabel_("0"), [MoveLoc(Var_("t")), Unpack(StructName("Option"), [TypeParameter(TypeVar_("Element"))]), StLoc(Var_("vec")), MutBorrowLoc(Var_("vec")), FreezeRef, Call(ModuleName("1::vector"), FunctionName("is_empty"), [TypeParameter(TypeVar_("Element"))]), BrFalse(BlockLabel_("2"))]), (BlockLabel_("1"), [MoveLoc(Var_("default")), StLoc(Var_("%#1")), Branch(BlockLabel_("3"))]), (BlockLabel_("2"), [MutBorrowLoc(Var_("vec")), VecPopBack(TypeParameter(TypeVar_("Element"))), StLoc(Var_("%#1"))]), (BlockLabel_("3"), [MoveLoc(Var_("%#1")), Ret])] } }), (FunctionName("extract"), Function_ { visibility: Public, is_entry: false, signature: FunctionSignature { formals: [(Var_("t"), Reference(true, Struct(QualifiedStructIdent { module: ModuleName("Self"), name: StructName("Option") }, [TypeParameter(TypeVar_("Element"))])))], return_type: [TypeParameter(TypeVar_("Element"))], type_formals: [(TypeVar_("Element"), {})] }, acquires: [], specifications: [], body: Bytecode { locals: [], code: [(BlockLabel_("0"), [CopyLoc(Var_("t")), FreezeRef, Call(ModuleName("Self"), FunctionName("is_some"), [TypeParameter(TypeVar_("Element"))]), BrFalse(BlockLabel_("2")), Branch(BlockLabel_("3"))]), (BlockLabel_("2"), [MoveLoc(Var_("t")), Pop, LdNamedConst(ConstantName("EOPTION_NOT_SET")), Abort]), (BlockLabel_("3"), [MoveLoc(Var_("t")), MutBorrowField(StructName("Option"), [TypeParameter(TypeVar_("Element"))], Field_("vec")), VecPopBack(TypeParameter(TypeVar_("Element"))), Ret])] } }), (FunctionName("fill"), Function_ { visibility: Public, is_entry: false, signature: FunctionSignature { formals: [(Var_("t"), Reference(true, Struct(QualifiedStructIdent { module: ModuleName("Self"), name: StructName("Option") }, [TypeParameter(TypeVar_("Element"))]))), (Var_("e"), TypeParameter(TypeVar_("Element")))], return_type: [], type_formals: [(TypeVar_("Element"), {})] }, acquires: [], specifications: [], body: Bytecode { locals: [(Var_("vec_ref"), Reference(true, Vector(TypeParameter(TypeVar_("Element")))))], code: [(BlockLabel_("0"), [MoveLoc(Var_("t")), MutBorrowField(StructName("Option"), [TypeParameter(TypeVar_("Element"))], Field_("vec")), StLoc(Var_("vec_ref")), CopyLoc(Var_("vec_ref")), FreezeRef, Call(ModuleName("1::vector"), FunctionName("is_empty"), [TypeParameter(TypeVar_("Element"))]), BrFalse(BlockLabel_("2")), Branch(BlockLabel_("3"))]), (BlockLabel_("2"), [MoveLoc(Var_("vec_ref")), Pop, LdNamedConst(ConstantName("EOPTION_IS_SET")), Abort]), (BlockLabel_("3"), [MoveLoc(Var_("vec_ref")), MoveLoc(Var_("e")), VecPushBack(TypeParameter(TypeVar_("Element"))), Ret])] } }), (FunctionName("get_with_default"), Function_ { visibility: Public, is_entry: false, signature: FunctionSignature { formals: [(Var_("t"), Reference(false, Struct(QualifiedStructIdent { module: ModuleName("Self"), name: StructName("Option") }, [TypeParameter(TypeVar_("Element"))]))), (Var_("default"), TypeParameter(TypeVar_("Element")))], return_type: [TypeParameter(TypeVar_("Element"))], type_formals: [(TypeVar_("Element"), {Copy, Drop})] }, acquires: [], specifications: [], body: Bytecode { locals: [(Var_("%#1"), TypeParameter(TypeVar_("Element"))), (Var_("vec_ref"), Reference(false, Vector(TypeParameter(TypeVar_("Element")))))], code: [(BlockLabel_("0"), [MoveLoc(Var_("t")), ImmBorrowField(StructName("Option"), [TypeParameter(TypeVar_("Element"))], Field_("vec")), StLoc(Var_("vec_ref")), CopyLoc(Var_("vec_ref")), Call(ModuleName("1::vector"), FunctionName("is_empty"), [TypeParameter(TypeVar_("Element"))]), BrFalse(BlockLabel_("2"))]), (BlockLabel_("1"), [MoveLoc(Var_("vec_ref")), Pop, MoveLoc(Var_("default")), StLoc(Var_("%#1")), Branch(BlockLabel_("3"))]), (BlockLabel_("2"), [MoveLoc(Var_("vec_ref")), LdU64(0), VecImmBorrow(TypeParameter(TypeVar_("Element"))), ReadRef, StLoc(Var_("%#1"))]), (BlockLabel_("3"), [MoveLoc(Var_("%#1")), Ret])] } }), (FunctionName("is_none"), Function_ { visibility: Public, is_entry: false, signature: FunctionSignature { formals: [(Var_("t"), Reference(false, Struct(QualifiedStructIdent { module: ModuleName("Self"), name: StructName("Option") }, [TypeParameter(TypeVar_("Element"))])))], return_type: [Bool], type_formals: [(TypeVar_("Element"), {})] }, acquires: [], specifications: [], body: Bytecode { locals: [], code: [(BlockLabel_("0"), [MoveLoc(Var_("t")), ImmBorrowField(StructName("Option"), [TypeParameter(TypeVar_("Element"))], Field_("vec")), Call(ModuleName("1::vector"), FunctionName("is_empty"), [TypeParameter(TypeVar_("Element"))]), Ret])] } }), (FunctionName("is_some"), Function_ { visibility: Public, is_entry: false, signature: FunctionSignature { formals: [(Var_("t"), Reference(false, Struct(QualifiedStructIdent { module: ModuleName("Self"), name: StructName("Option") }, [TypeParameter(TypeVar_("Element"))])))], return_type: [Bool], type_formals: [(TypeVar_("Element"), {})] }, acquires: [], specifications: [], body: Bytecode { locals: [], code: [(BlockLabel_("0"), [MoveLoc(Var_("t")), ImmBorrowField(StructName("Option"), [TypeParameter(TypeVar_("Element"))], Field_("vec")), Call(ModuleName("1::vector"), FunctionName("is_empty"), [TypeParameter(TypeVar_("Element"))]), Not, Ret])] } }), (FunctionName("none"), Function_ { visibility: Public, is_entry: false, signature: FunctionSignature { formals: [], return_type: [Struct(QualifiedStructIdent { module: ModuleName("Self"), name: StructName("Option") }, [TypeParameter(TypeVar_("Element"))])], type_formals: [(TypeVar_("Element"), {})] }, acquires: [], specifications: [], body: Bytecode { locals: [], code: [(BlockLabel_("0"), [VecPack(TypeParameter(TypeVar_("Element")), 0), Pack(StructName("Option"), [TypeParameter(TypeVar_("Element"))]), Ret])] } }), (FunctionName("some"), Function_ { visibility: Public, is_entry: false, signature: FunctionSignature { formals: [(Var_("e"), TypeParameter(TypeVar_("Element")))], return_type: [Struct(QualifiedStructIdent { module: ModuleName("Self"), name: StructName("Option") }, [TypeParameter(TypeVar_("Element"))])], type_formals: [(TypeVar_("Element"), {})] }, acquires: [], specifications: [], body: Bytecode { locals: [], code: [(BlockLabel_("0"), [MoveLoc(Var_("e")), Call(ModuleName("1::vector"), FunctionName("singleton"), [TypeParameter(TypeVar_("Element"))]), Pack(StructName("Option"), [TypeParameter(TypeVar_("Element"))]), Ret])] } }), (FunctionName("swap"), Function_ { visibility: Public, is_entry: false, signature: FunctionSignature { formals: [(Var_("t"), Reference(true, Struct(QualifiedStructIdent { module: ModuleName("Self"), name: StructName("Option") }, [TypeParameter(TypeVar_("Element"))]))), (Var_("e"), TypeParameter(TypeVar_("Element")))], return_type: [TypeParameter(TypeVar_("Element"))], type_formals: [(TypeVar_("Element"), {})] }, acquires: [], specifications: [], body: Bytecode { locals: [(Var_("old_value"), TypeParameter(TypeVar_("Element"))), (Var_("vec_ref"), Reference(true, Vector(TypeParameter(TypeVar_("Element")))))], code: [(BlockLabel_("0"), [CopyLoc(Var_("t")), FreezeRef, Call(ModuleName("Self"), FunctionName("is_some"), [TypeParameter(TypeVar_("Element"))]), BrFalse(BlockLabel_("2")), Branch(BlockLabel_("3"))]), (BlockLabel_("2"), [MoveLoc(Var_("t")), Pop, LdNamedConst(ConstantName("EOPTION_NOT_SET")), Abort]), (BlockLabel_("3"), [MoveLoc(Var_("t")), MutBorrowField(StructName("Option"), [TypeParameter(TypeVar_("Element"))], Field_("vec")), StLoc(Var_("vec_ref")), CopyLoc(Var_("vec_ref")), VecPopBack(TypeParameter(TypeVar_("Element"))), StLoc(Var_("old_value")), MoveLoc(Var_("vec_ref")), MoveLoc(Var_("e")), VecPushBack(TypeParameter(TypeVar_("Element"))), MoveLoc(Var_("old_value")), Ret])] } }), (FunctionName("swap_or_fill"), Function_ { visibility: Public, is_entry: false, signature: FunctionSignature { formals: [(Var_("t"), Reference(true, Struct(QualifiedStructIdent { module: ModuleName("Self"), name: StructName("Option") }, [TypeParameter(TypeVar_("Element"))]))), (Var_("e"), TypeParameter(TypeVar_("Element")))], return_type: [Struct(QualifiedStructIdent { module: ModuleName("Self"), name: StructName("Option") }, [TypeParameter(TypeVar_("Element"))])], type_formals: [(TypeVar_("Element"), {})] }, acquires: [], specifications: [], body: Bytecode { locals: [(Var_("%#1"), Struct(QualifiedStructIdent { module: ModuleName("Self"), name: StructName("Option") }, [TypeParameter(TypeVar_("Element"))])), (Var_("old_value"), Struct(QualifiedStructIdent { module: ModuleName("Self"), name: StructName("Option") }, [TypeParameter(TypeVar_("Element"))])), (Var_("vec_ref"), Reference(true, Vector(TypeParameter(TypeVar_("Element")))))], code: [(BlockLabel_("0"), [MoveLoc(Var_("t")), MutBorrowField(StructName("Option"), [TypeParameter(TypeVar_("Element"))], Field_("vec")), StLoc(Var_("vec_ref")), CopyLoc(Var_("vec_ref")), FreezeRef, Call(ModuleName("1::vector"), FunctionName("is_empty"), [TypeParameter(TypeVar_("Element"))]), BrFalse(BlockLabel_("2"))]), (BlockLabel_("1"), [Call(ModuleName("Self"), FunctionName("none"), [TypeParameter(TypeVar_("Element"))]), StLoc(Var_("%#1")), Branch(BlockLabel_("3"))]), (BlockLabel_("2"), [CopyLoc(Var_("vec_ref")), VecPopBack(TypeParameter(TypeVar_("Element"))), Call(ModuleName("Self"), FunctionName("some"), [TypeParameter(TypeVar_("Element"))]), StLoc(Var_("%#1"))]), (BlockLabel_("3"), [MoveLoc(Var_("%#1")), StLoc(Var_("old_value")), MoveLoc(Var_("vec_ref")), MoveLoc(Var_("e")), VecPushBack(TypeParameter(TypeVar_("Element"))), MoveLoc(Var_("old_value")), Ret])] } }), (FunctionName("to_vec"), Function_ { visibility: Public, is_entry: false, signature: FunctionSignature { formals: [(Var_("t"), Struct(QualifiedStructIdent { module: ModuleName("Self"), name: StructName("Option") }, [TypeParameter(TypeVar_("Element"))]))], return_type: [Vector(TypeParameter(TypeVar_("Element")))], type_formals: [(TypeVar_("Element"), {})] }, acquires: [], specifications: [], body: Bytecode { locals: [], code: [(BlockLabel_("0"), [MoveLoc(Var_("t")), Unpack(StructName("Option"), [TypeParameter(TypeVar_("Element"))]), Ret])] } }), (FunctionName("unit_test_poison"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [], code: [(BlockLabel_("0"), [LdU64(0), Call(ModuleName("1::unit_test"), FunctionName("create_signers_for_testing"), []), Pop, Ret])] } })], synthetics: [] }
IS this part executed?3 in module in translate.rs []
IS this part executed?1 in module in translate.rs
IS this part executed?2 in module in translate.rs
IS this part executed?1 in compile_module function in compiler.rs
yj ModuleDefinition { loc: Loc { file_hash: "be6ffac3c28b2fa296605621cb5cc43e701ecf8768b8f5cff8df5c86a1bd26db", start: 188, end: 193 }, identifier: ModuleIdent { name: ModuleName("ascii"), address: 00000000000000000000000000000001 }, friends: [], imports: [ImportDefinition { ident: ModuleIdent { name: ModuleName("option"), address: 00000000000000000000000000000001 }, alias: ModuleName("1::option") }, ImportDefinition { ident: ModuleIdent { name: ModuleName("unit_test"), address: 00000000000000000000000000000001 }, alias: ModuleName("1::unit_test") }], explicit_dependency_declarations: [ModuleDependency { name: ModuleName("1::unit_test"), structs: [], functions: [FunctionDependency { name: FunctionName("create_signers_for_testing"), signature: FunctionSignature { formals: [(Var_("num_signers"), U64)], return_type: [Vector(Signer)], type_formals: [] } }] }, ModuleDependency { name: ModuleName("1::option"), structs: [StructDependency { abilities: {Copy, Drop, Store}, name: StructName("Option"), type_formals: [(false, TypeVar_("Element"), {})] }], functions: [FunctionDependency { name: FunctionName("destroy_some"), signature: FunctionSignature { formals: [(Var_("t"), Struct(QualifiedStructIdent { module: ModuleName("1::option"), name: StructName("Option") }, [TypeParameter(TypeVar_("Element"))]))], return_type: [TypeParameter(TypeVar_("Element"))], type_formals: [(TypeVar_("Element"), {})] } }, FunctionDependency { name: FunctionName("is_some"), signature: FunctionSignature { formals: [(Var_("t"), Reference(false, Struct(QualifiedStructIdent { module: ModuleName("1::option"), name: StructName("Option") }, [TypeParameter(TypeVar_("Element"))])))], return_type: [Bool], type_formals: [(TypeVar_("Element"), {})] } }, FunctionDependency { name: FunctionName("none"), signature: FunctionSignature { formals: [], return_type: [Struct(QualifiedStructIdent { module: ModuleName("1::option"), name: StructName("Option") }, [TypeParameter(TypeVar_("Element"))])], type_formals: [(TypeVar_("Element"), {})] } }, FunctionDependency { name: FunctionName("some"), signature: FunctionSignature { formals: [(Var_("e"), TypeParameter(TypeVar_("Element")))], return_type: [Struct(QualifiedStructIdent { module: ModuleName("1::option"), name: StructName("Option") }, [TypeParameter(TypeVar_("Element"))])], type_formals: [(TypeVar_("Element"), {})] } }] }], structs: [StructDefinition_ { abilities: {Copy, Drop, Store}, name: StructName("Char"), type_formals: [], fields: Move { fields: [(Field_("byte"), U8)] }, invariants: [] }, StructDefinition_ { abilities: {Copy, Drop, Store}, name: StructName("String"), type_formals: [], fields: Move { fields: [(Field_("bytes"), Vector(U8))] }, invariants: [] }], constants: [Constant { name: ConstantName("EINVALID_ASCII_CHARACTER"), signature: U64, value: U64(65536) }], functions: [(FunctionName("all_characters_printable"), Function_ { visibility: Public, is_entry: false, signature: FunctionSignature { formals: [(Var_("string"), Reference(false, Struct(QualifiedStructIdent { module: ModuleName("Self"), name: StructName("String") }, [])))], return_type: [Bool], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [(Var_("i"), U64), (Var_("len"), U64)], code: [(BlockLabel_("0"), [CopyLoc(Var_("string")), ImmBorrowField(StructName("String"), [], Field_("bytes")), VecLen(U8), StLoc(Var_("len")), LdU64(0), StLoc(Var_("i"))]), (BlockLabel_("1"), [Nop(Some(NopLabel("0"))), CopyLoc(Var_("i")), CopyLoc(Var_("len")), Lt, BrFalse(BlockLabel_("6")), Branch(BlockLabel_("2"))]), (BlockLabel_("2"), [CopyLoc(Var_("string")), ImmBorrowField(StructName("String"), [], Field_("bytes")), CopyLoc(Var_("i")), VecImmBorrow(U8), ReadRef, Call(ModuleName("Self"), FunctionName("is_printable_char"), []), Not, BrFalse(BlockLabel_("5"))]), (BlockLabel_("3"), [MoveLoc(Var_("string")), Pop, LdFalse, Ret]), (BlockLabel_("5"), [MoveLoc(Var_("i")), LdU64(1), Add, StLoc(Var_("i")), Branch(BlockLabel_("1"))]), (BlockLabel_("6"), [Nop(Some(NopLabel("1"))), LdTrue, Ret])] } }), (FunctionName("as_bytes"), Function_ { visibility: Public, is_entry: false, signature: FunctionSignature { formals: [(Var_("string"), Reference(false, Struct(QualifiedStructIdent { module: ModuleName("Self"), name: StructName("String") }, [])))], return_type: [Reference(false, Vector(U8))], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [], code: [(BlockLabel_("0"), [MoveLoc(Var_("string")), ImmBorrowField(StructName("String"), [], Field_("bytes")), Ret])] } }), (FunctionName("byte"), Function_ { visibility: Public, is_entry: false, signature: FunctionSignature { formals: [(Var_("char"), Struct(QualifiedStructIdent { module: ModuleName("Self"), name: StructName("Char") }, []))], return_type: [U8], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [], code: [(BlockLabel_("0"), [MoveLoc(Var_("char")), Unpack(StructName("Char"), []), Ret])] } }), (FunctionName("char"), Function_ { visibility: Public, is_entry: false, signature: FunctionSignature { formals: [(Var_("byte"), U8)], return_type: [Struct(QualifiedStructIdent { module: ModuleName("Self"), name: StructName("Char") }, [])], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [], code: [(BlockLabel_("0"), [CopyLoc(Var_("byte")), Call(ModuleName("Self"), FunctionName("is_valid_char"), []), BrFalse(BlockLabel_("2")), Branch(BlockLabel_("3"))]), (BlockLabel_("2"), [LdNamedConst(ConstantName("EINVALID_ASCII_CHARACTER")), Abort]), (BlockLabel_("3"), [MoveLoc(Var_("byte")), Pack(StructName("Char"), []), Ret])] } }), (FunctionName("into_bytes"), Function_ { visibility: Public, is_entry: false, signature: FunctionSignature { formals: [(Var_("string"), Struct(QualifiedStructIdent { module: ModuleName("Self"), name: StructName("String") }, []))], return_type: [Vector(U8)], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [], code: [(BlockLabel_("0"), [MoveLoc(Var_("string")), Unpack(StructName("String"), []), Ret])] } }), (FunctionName("is_printable_char"), Function_ { visibility: Public, is_entry: false, signature: FunctionSignature { formals: [(Var_("byte"), U8)], return_type: [Bool], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [(Var_("%#1"), Bool)], code: [(BlockLabel_("0"), [CopyLoc(Var_("byte")), LdU8(32), Ge, BrFalse(BlockLabel_("2"))]), (BlockLabel_("1"), [MoveLoc(Var_("byte")), LdU8(126), Le, StLoc(Var_("%#1")), Branch(BlockLabel_("3"))]), (BlockLabel_("2"), [LdFalse, StLoc(Var_("%#1"))]), (BlockLabel_("3"), [MoveLoc(Var_("%#1")), Ret])] } }), (FunctionName("is_valid_char"), Function_ { visibility: Public, is_entry: false, signature: FunctionSignature { formals: [(Var_("b"), U8)], return_type: [Bool], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [], code: [(BlockLabel_("0"), [MoveLoc(Var_("b")), LdU8(127), Le, Ret])] } }), (FunctionName("length"), Function_ { visibility: Public, is_entry: false, signature: FunctionSignature { formals: [(Var_("string"), Reference(false, Struct(QualifiedStructIdent { module: ModuleName("Self"), name: StructName("String") }, [])))], return_type: [U64], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [], code: [(BlockLabel_("0"), [MoveLoc(Var_("string")), Call(ModuleName("Self"), FunctionName("as_bytes"), []), VecLen(U8), Ret])] } }), (FunctionName("pop_char"), Function_ { visibility: Public, is_entry: false, signature: FunctionSignature { formals: [(Var_("string"), Reference(true, Struct(QualifiedStructIdent { module: ModuleName("Self"), name: StructName("String") }, [])))], return_type: [Struct(QualifiedStructIdent { module: ModuleName("Self"), name: StructName("Char") }, [])], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [], code: [(BlockLabel_("0"), [MoveLoc(Var_("string")), MutBorrowField(StructName("String"), [], Field_("bytes")), VecPopBack(U8), Pack(StructName("Char"), []), Ret])] } }), (FunctionName("push_char"), Function_ { visibility: Public, is_entry: false, signature: FunctionSignature { formals: [(Var_("string"), Reference(true, Struct(QualifiedStructIdent { module: ModuleName("Self"), name: StructName("String") }, []))), (Var_("char"), Struct(QualifiedStructIdent { module: ModuleName("Self"), name: StructName("Char") }, []))], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [], code: [(BlockLabel_("0"), [MoveLoc(Var_("string")), MutBorrowField(StructName("String"), [], Field_("bytes")), ImmBorrowLoc(Var_("char")), ImmBorrowField(StructName("Char"), [], Field_("byte")), ReadRef, VecPushBack(U8), Ret])] } }), (FunctionName("string"), Function_ { visibility: Public, is_entry: false, signature: FunctionSignature { formals: [(Var_("bytes"), Vector(U8))], return_type: [Struct(QualifiedStructIdent { module: ModuleName("Self"), name: StructName("String") }, [])], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [(Var_("x"), Struct(QualifiedStructIdent { module: ModuleName("1::option"), name: StructName("Option") }, [Struct(QualifiedStructIdent { module: ModuleName("Self"), name: StructName("String") }, [])]))], code: [(BlockLabel_("0"), [MoveLoc(Var_("bytes")), Call(ModuleName("Self"), FunctionName("try_string"), []), StLoc(Var_("x")), ImmBorrowLoc(Var_("x")), Call(ModuleName("1::option"), FunctionName("is_some"), [Struct(QualifiedStructIdent { module: ModuleName("Self"), name: StructName("String") }, [])]), BrFalse(BlockLabel_("2")), Branch(BlockLabel_("3"))]), (BlockLabel_("2"), [LdNamedConst(ConstantName("EINVALID_ASCII_CHARACTER")), Abort]), (BlockLabel_("3"), [MoveLoc(Var_("x")), Call(ModuleName("1::option"), FunctionName("destroy_some"), [Struct(QualifiedStructIdent { module: ModuleName("Self"), name: StructName("String") }, [])]), Ret])] } }), (FunctionName("try_string"), Function_ { visibility: Public, is_entry: false, signature: FunctionSignature { formals: [(Var_("bytes"), Vector(U8))], return_type: [Struct(QualifiedStructIdent { module: ModuleName("1::option"), name: StructName("Option") }, [Struct(QualifiedStructIdent { module: ModuleName("Self"), name: StructName("String") }, [])])], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [(Var_("i"), U64), (Var_("len"), U64)], code: [(BlockLabel_("0"), [ImmBorrowLoc(Var_("bytes")), VecLen(U8), StLoc(Var_("len")), LdU64(0), StLoc(Var_("i"))]), (BlockLabel_("1"), [Nop(Some(NopLabel("0"))), CopyLoc(Var_("i")), CopyLoc(Var_("len")), Lt, BrFalse(BlockLabel_("6")), Branch(BlockLabel_("2"))]), (BlockLabel_("2"), [ImmBorrowLoc(Var_("bytes")), CopyLoc(Var_("i")), VecImmBorrow(U8), ReadRef, Call(ModuleName("Self"), FunctionName("is_valid_char"), []), Not, BrFalse(BlockLabel_("5"))]), (BlockLabel_("3"), [Call(ModuleName("1::option"), FunctionName("none"), [Struct(QualifiedStructIdent { module: ModuleName("Self"), name: StructName("String") }, [])]), Ret]), (BlockLabel_("5"), [MoveLoc(Var_("i")), LdU64(1), Add, StLoc(Var_("i")), Branch(BlockLabel_("1"))]), (BlockLabel_("6"), [Nop(Some(NopLabel("1"))), MoveLoc(Var_("bytes")), Pack(StructName("String"), []), Call(ModuleName("1::option"), FunctionName("some"), [Struct(QualifiedStructIdent { module: ModuleName("Self"), name: StructName("String") }, [])]), Ret])] } }), (FunctionName("unit_test_poison"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [], code: [(BlockLabel_("0"), [LdU64(0), Call(ModuleName("1::unit_test"), FunctionName("create_signers_for_testing"), []), Pop, Ret])] } })], synthetics: [] }
IS this part executed?3 in module in translate.rs []
IS this part executed?1 in module in translate.rs
IS this part executed?2 in module in translate.rs
IS this part executed?1 in compile_module function in compiler.rs
yj ModuleDefinition { loc: Loc { file_hash: "ba4dbe744712048d63391b1883b90675b5ed82239b2c692495fee6d983fc28cd", start: 25, end: 36 }, identifier: ModuleIdent { name: ModuleName("ascii_tests"), address: 00000000000000000000000000000001 }, friends: [], imports: [ImportDefinition { ident: ModuleIdent { name: ModuleName("ascii"), address: 00000000000000000000000000000001 }, alias: ModuleName("1::ascii") }, ImportDefinition { ident: ModuleIdent { name: ModuleName("option"), address: 00000000000000000000000000000001 }, alias: ModuleName("1::option") }, ImportDefinition { ident: ModuleIdent { name: ModuleName("unit_test"), address: 00000000000000000000000000000001 }, alias: ModuleName("1::unit_test") }, ImportDefinition { ident: ModuleIdent { name: ModuleName("vector"), address: 00000000000000000000000000000001 }, alias: ModuleName("1::vector") }], explicit_dependency_declarations: [ModuleDependency { name: ModuleName("1::unit_test"), structs: [], functions: [FunctionDependency { name: FunctionName("create_signers_for_testing"), signature: FunctionSignature { formals: [(Var_("num_signers"), U64)], return_type: [Vector(Signer)], type_formals: [] } }] }, ModuleDependency { name: ModuleName("1::vector"), structs: [], functions: [FunctionDependency { name: FunctionName("singleton"), signature: FunctionSignature { formals: [(Var_("e"), TypeParameter(TypeVar_("Element")))], return_type: [Vector(TypeParameter(TypeVar_("Element")))], type_formals: [(TypeVar_("Element"), {})] } }] }, ModuleDependency { name: ModuleName("1::option"), structs: [StructDependency { abilities: {Copy, Drop, Store}, name: StructName("Option"), type_formals: [(false, TypeVar_("Element"), {})] }], functions: [FunctionDependency { name: FunctionName("is_none"), signature: FunctionSignature { formals: [(Var_("t"), Reference(false, Struct(QualifiedStructIdent { module: ModuleName("1::option"), name: StructName("Option") }, [TypeParameter(TypeVar_("Element"))])))], return_type: [Bool], type_formals: [(TypeVar_("Element"), {})] } }] }, ModuleDependency { name: ModuleName("1::ascii"), structs: [StructDependency { abilities: {Copy, Drop, Store}, name: StructName("Char"), type_formals: [] }, StructDependency { abilities: {Copy, Drop, Store}, name: StructName("String"), type_formals: [] }], functions: [FunctionDependency { name: FunctionName("all_characters_printable"), signature: FunctionSignature { formals: [(Var_("string"), Reference(false, Struct(QualifiedStructIdent { module: ModuleName("1::ascii"), name: StructName("String") }, [])))], return_type: [Bool], type_formals: [] } }, FunctionDependency { name: FunctionName("as_bytes"), signature: FunctionSignature { formals: [(Var_("string"), Reference(false, Struct(QualifiedStructIdent { module: ModuleName("1::ascii"), name: StructName("String") }, [])))], return_type: [Reference(false, Vector(U8))], type_formals: [] } }, FunctionDependency { name: FunctionName("byte"), signature: FunctionSignature { formals: [(Var_("char"), Struct(QualifiedStructIdent { module: ModuleName("1::ascii"), name: StructName("Char") }, []))], return_type: [U8], type_formals: [] } }, FunctionDependency { name: FunctionName("char"), signature: FunctionSignature { formals: [(Var_("byte"), U8)], return_type: [Struct(QualifiedStructIdent { module: ModuleName("1::ascii"), name: StructName("Char") }, [])], type_formals: [] } }, FunctionDependency { name: FunctionName("into_bytes"), signature: FunctionSignature { formals: [(Var_("string"), Struct(QualifiedStructIdent { module: ModuleName("1::ascii"), name: StructName("String") }, []))], return_type: [Vector(U8)], type_formals: [] } }, FunctionDependency { name: FunctionName("is_printable_char"), signature: FunctionSignature { formals: [(Var_("byte"), U8)], return_type: [Bool], type_formals: [] } }, FunctionDependency { name: FunctionName("is_valid_char"), signature: FunctionSignature { formals: [(Var_("b"), U8)], return_type: [Bool], type_formals: [] } }, FunctionDependency { name: FunctionName("length"), signature: FunctionSignature { formals: [(Var_("string"), Reference(false, Struct(QualifiedStructIdent { module: ModuleName("1::ascii"), name: StructName("String") }, [])))], return_type: [U64], type_formals: [] } }, FunctionDependency { name: FunctionName("pop_char"), signature: FunctionSignature { formals: [(Var_("string"), Reference(true, Struct(QualifiedStructIdent { module: ModuleName("1::ascii"), name: StructName("String") }, [])))], return_type: [Struct(QualifiedStructIdent { module: ModuleName("1::ascii"), name: StructName("Char") }, [])], type_formals: [] } }, FunctionDependency { name: FunctionName("push_char"), signature: FunctionSignature { formals: [(Var_("string"), Reference(true, Struct(QualifiedStructIdent { module: ModuleName("1::ascii"), name: StructName("String") }, []))), (Var_("char"), Struct(QualifiedStructIdent { module: ModuleName("1::ascii"), name: StructName("Char") }, []))], return_type: [], type_formals: [] } }, FunctionDependency { name: FunctionName("string"), signature: FunctionSignature { formals: [(Var_("bytes"), Vector(U8))], return_type: [Struct(QualifiedStructIdent { module: ModuleName("1::ascii"), name: StructName("String") }, [])], type_formals: [] } }, FunctionDependency { name: FunctionName("try_string"), signature: FunctionSignature { formals: [(Var_("bytes"), Vector(U8))], return_type: [Struct(QualifiedStructIdent { module: ModuleName("1::option"), name: StructName("Option") }, [Struct(QualifiedStructIdent { module: ModuleName("1::ascii"), name: StructName("String") }, [])])], type_formals: [] } }] }], structs: [], constants: [], functions: [(FunctionName("printable_chars_dont_allow_newline"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [(Var_("str"), Struct(QualifiedStructIdent { module: ModuleName("1::ascii"), name: StructName("String") }, []))], code: [(BlockLabel_("0"), [LdU8(10), Call(ModuleName("1::vector"), FunctionName("singleton"), [U8]), Call(ModuleName("1::ascii"), FunctionName("string"), []), StLoc(Var_("str")), ImmBorrowLoc(Var_("str")), Call(ModuleName("1::ascii"), FunctionName("all_characters_printable"), []), Not, BrFalse(BlockLabel_("2")), Branch(BlockLabel_("3"))]), (BlockLabel_("2"), [LdU64(0), Abort]), (BlockLabel_("3"), [Ret])] } }), (FunctionName("printable_chars_dont_allow_tab"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [(Var_("str"), Struct(QualifiedStructIdent { module: ModuleName("1::ascii"), name: StructName("String") }, []))], code: [(BlockLabel_("0"), [LdU8(9), Call(ModuleName("1::vector"), FunctionName("singleton"), [U8]), Call(ModuleName("1::ascii"), FunctionName("string"), []), StLoc(Var_("str")), ImmBorrowLoc(Var_("str")), Call(ModuleName("1::ascii"), FunctionName("all_characters_printable"), []), Not, BrFalse(BlockLabel_("2")), Branch(BlockLabel_("3"))]), (BlockLabel_("2"), [LdU64(0), Abort]), (BlockLabel_("3"), [Ret])] } }), (FunctionName("test_ascii_chars"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [(Var_("%#1"), Vector(U8)), (Var_("i"), U8), (Var_("str"), Struct(QualifiedStructIdent { module: ModuleName("1::ascii"), name: StructName("String") }, [])), (Var_("vec"), Vector(U8))], code: [(BlockLabel_("0"), [LdU8(0), StLoc(Var_("i")), VecPack(U8, 0), StLoc(Var_("vec"))]), (BlockLabel_("1"), [CopyLoc(Var_("i")), LdU8(128), Lt, BrFalse(BlockLabel_("6")), Branch(BlockLabel_("2"))]), (BlockLabel_("2"), [CopyLoc(Var_("i")), Call(ModuleName("1::ascii"), FunctionName("is_valid_char"), []), BrFalse(BlockLabel_("4")), Branch(BlockLabel_("5"))]), (BlockLabel_("4"), [LdU64(0), Abort]), (BlockLabel_("5"), [MutBorrowLoc(Var_("vec")), CopyLoc(Var_("i")), VecPushBack(U8), MoveLoc(Var_("i")), LdU8(1), Add, StLoc(Var_("i")), Branch(BlockLabel_("1"))]), (BlockLabel_("6"), [MoveLoc(Var_("vec")), Call(ModuleName("1::ascii"), FunctionName("string"), []), StLoc(Var_("str")), ImmBorrowLoc(Var_("str")), Call(ModuleName("1::ascii"), FunctionName("as_bytes"), []), VecLen(U8), LdU64(128), Eq, BrFalse(BlockLabel_("8")), Branch(BlockLabel_("9"))]), (BlockLabel_("8"), [LdU64(0), Abort]), (BlockLabel_("9"), [ImmBorrowLoc(Var_("str")), Call(ModuleName("1::ascii"), FunctionName("all_characters_printable"), []), Not, BrFalse(BlockLabel_("11")), Branch(BlockLabel_("12"))]), (BlockLabel_("11"), [LdU64(1), Abort]), (BlockLabel_("12"), [MoveLoc(Var_("str")), Call(ModuleName("1::ascii"), FunctionName("into_bytes"), []), StLoc(Var_("%#1")), ImmBorrowLoc(Var_("%#1")), VecLen(U8), LdU64(128), Eq, BrFalse(BlockLabel_("14")), Branch(BlockLabel_("15"))]), (BlockLabel_("14"), [LdU64(2), Abort]), (BlockLabel_("15"), [Ret])] } }), (FunctionName("test_ascii_push_char_pop_char"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [(Var_("i"), U8), (Var_("str"), Struct(QualifiedStructIdent { module: ModuleName("1::ascii"), name: StructName("String") }, []))], code: [(BlockLabel_("0"), [LdU8(0), StLoc(Var_("i")), VecPack(U8, 0), Call(ModuleName("1::ascii"), FunctionName("string"), []), StLoc(Var_("str"))]), (BlockLabel_("1"), [CopyLoc(Var_("i")), LdU8(128), Lt, BrFalse(BlockLabel_("4")), Branch(BlockLabel_("2"))]), (BlockLabel_("2"), [MutBorrowLoc(Var_("str")), CopyLoc(Var_("i")), Call(ModuleName("1::ascii"), FunctionName("char"), []), Call(ModuleName("1::ascii"), FunctionName("push_char"), []), MoveLoc(Var_("i")), LdU8(1), Add, StLoc(Var_("i")), Branch(BlockLabel_("1"))]), (BlockLabel_("4"), [CopyLoc(Var_("i")), LdU8(0), Gt, BrFalse(BlockLabel_("9")), Branch(BlockLabel_("5"))]), (BlockLabel_("5"), [MutBorrowLoc(Var_("str")), Call(ModuleName("1::ascii"), FunctionName("pop_char"), []), Call(ModuleName("1::ascii"), FunctionName("byte"), []), CopyLoc(Var_("i")), LdU8(1), Sub, Eq, BrFalse(BlockLabel_("7")), Branch(BlockLabel_("8"))]), (BlockLabel_("7"), [LdU64(0), Abort]), (BlockLabel_("8"), [MoveLoc(Var_("i")), LdU8(1), Sub, StLoc(Var_("i")), Branch(BlockLabel_("4"))]), (BlockLabel_("9"), [ImmBorrowLoc(Var_("str")), Call(ModuleName("1::ascii"), FunctionName("as_bytes"), []), VecLen(U8), LdU64(0), Eq, BrFalse(BlockLabel_("11")), Branch(BlockLabel_("12"))]), (BlockLabel_("11"), [LdU64(0), Abort]), (BlockLabel_("12"), [ImmBorrowLoc(Var_("str")), Call(ModuleName("1::ascii"), FunctionName("length"), []), LdU64(0), Eq, BrFalse(BlockLabel_("14")), Branch(BlockLabel_("15"))]), (BlockLabel_("14"), [LdU64(0), Abort]), (BlockLabel_("15"), [ImmBorrowLoc(Var_("str")), Call(ModuleName("1::ascii"), FunctionName("all_characters_printable"), []), BrFalse(BlockLabel_("17")), Branch(BlockLabel_("18"))]), (BlockLabel_("17"), [LdU64(1), Abort]), (BlockLabel_("18"), [Ret])] } }), (FunctionName("test_ascii_push_chars"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [(Var_("i"), U8), (Var_("str"), Struct(QualifiedStructIdent { module: ModuleName("1::ascii"), name: StructName("String") }, []))], code: [(BlockLabel_("0"), [LdU8(0), StLoc(Var_("i")), VecPack(U8, 0), Call(ModuleName("1::ascii"), FunctionName("string"), []), StLoc(Var_("str"))]), (BlockLabel_("1"), [CopyLoc(Var_("i")), LdU8(128), Lt, BrFalse(BlockLabel_("3")), Branch(BlockLabel_("2"))]), (BlockLabel_("2"), [MutBorrowLoc(Var_("str")), CopyLoc(Var_("i")), Call(ModuleName("1::ascii"), FunctionName("char"), []), Call(ModuleName("1::ascii"), FunctionName("push_char"), []), MoveLoc(Var_("i")), LdU8(1), Add, StLoc(Var_("i")), Branch(BlockLabel_("1"))]), (BlockLabel_("3"), [ImmBorrowLoc(Var_("str")), Call(ModuleName("1::ascii"), FunctionName("as_bytes"), []), VecLen(U8), LdU64(128), Eq, BrFalse(BlockLabel_("5")), Branch(BlockLabel_("6"))]), (BlockLabel_("5"), [LdU64(0), Abort]), (BlockLabel_("6"), [ImmBorrowLoc(Var_("str")), Call(ModuleName("1::ascii"), FunctionName("length"), []), LdU64(128), Eq, BrFalse(BlockLabel_("8")), Branch(BlockLabel_("9"))]), (BlockLabel_("8"), [LdU64(0), Abort]), (BlockLabel_("9"), [ImmBorrowLoc(Var_("str")), Call(ModuleName("1::ascii"), FunctionName("all_characters_printable"), []), Not, BrFalse(BlockLabel_("11")), Branch(BlockLabel_("12"))]), (BlockLabel_("11"), [LdU64(1), Abort]), (BlockLabel_("12"), [Ret])] } }), (FunctionName("test_invalid_ascii_characters"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [(Var_("i"), U8), (Var_("try_str"), Struct(QualifiedStructIdent { module: ModuleName("1::option"), name: StructName("Option") }, [Struct(QualifiedStructIdent { module: ModuleName("1::ascii"), name: StructName("String") }, [])]))], code: [(BlockLabel_("0"), [LdU8(128), StLoc(Var_("i"))]), (BlockLabel_("1"), [CopyLoc(Var_("i")), LdU8(255), Lt, BrFalse(BlockLabel_("6")), Branch(BlockLabel_("2"))]), (BlockLabel_("2"), [CopyLoc(Var_("i")), Call(ModuleName("1::vector"), FunctionName("singleton"), [U8]), Call(ModuleName("1::ascii"), FunctionName("try_string"), []), StLoc(Var_("try_str")), ImmBorrowLoc(Var_("try_str")), Call(ModuleName("1::option"), FunctionName("is_none"), [Struct(QualifiedStructIdent { module: ModuleName("1::ascii"), name: StructName("String") }, [])]), BrFalse(BlockLabel_("4")), Branch(BlockLabel_("5"))]), (BlockLabel_("4"), [LdU64(0), Abort]), (BlockLabel_("5"), [MoveLoc(Var_("i")), LdU8(1), Add, StLoc(Var_("i")), Branch(BlockLabel_("1"))]), (BlockLabel_("6"), [Ret])] } }), (FunctionName("test_nonvisible_chars"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [(Var_("i"), U8), (Var_("i#1"), U8), (Var_("str"), Struct(QualifiedStructIdent { module: ModuleName("1::ascii"), name: StructName("String") }, [])), (Var_("str#3"), Struct(QualifiedStructIdent { module: ModuleName("1::ascii"), name: StructName("String") }, []))], code: [(BlockLabel_("0"), [LdU8(0), StLoc(Var_("i"))]), (BlockLabel_("1"), [CopyLoc(Var_("i")), LdU8(9), Lt, BrFalse(BlockLabel_("6")), Branch(BlockLabel_("2"))]), (BlockLabel_("2"), [CopyLoc(Var_("i")), Call(ModuleName("1::vector"), FunctionName("singleton"), [U8]), Call(ModuleName("1::ascii"), FunctionName("string"), []), StLoc(Var_("str")), ImmBorrowLoc(Var_("str")), Call(ModuleName("1::ascii"), FunctionName("all_characters_printable"), []), Not, BrFalse(BlockLabel_("4")), Branch(BlockLabel_("5"))]), (BlockLabel_("4"), [LdU64(0), Abort]), (BlockLabel_("5"), [MoveLoc(Var_("i")), LdU8(1), Add, StLoc(Var_("i")), Branch(BlockLabel_("1"))]), (BlockLabel_("6"), [LdU8(11), StLoc(Var_("i#1"))]), (BlockLabel_("7"), [CopyLoc(Var_("i#1")), LdU8(15), Le, BrFalse(BlockLabel_("12")), Branch(BlockLabel_("8"))]), (BlockLabel_("8"), [CopyLoc(Var_("i#1")), Call(ModuleName("1::vector"), FunctionName("singleton"), [U8]), Call(ModuleName("1::ascii"), FunctionName("string"), []), StLoc(Var_("str#3")), ImmBorrowLoc(Var_("str#3")), Call(ModuleName("1::ascii"), FunctionName("all_characters_printable"), []), Not, BrFalse(BlockLabel_("10")), Branch(BlockLabel_("11"))]), (BlockLabel_("10"), [LdU64(0), Abort]), (BlockLabel_("11"), [MoveLoc(Var_("i#1")), LdU8(1), Add, StLoc(Var_("i#1")), Branch(BlockLabel_("7"))]), (BlockLabel_("12"), [Ret])] } }), (FunctionName("test_printable_chars"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [(Var_("i"), U8), (Var_("str"), Struct(QualifiedStructIdent { module: ModuleName("1::ascii"), name: StructName("String") }, [])), (Var_("vec"), Vector(U8))], code: [(BlockLabel_("0"), [LdU8(32), StLoc(Var_("i")), VecPack(U8, 0), StLoc(Var_("vec"))]), (BlockLabel_("1"), [CopyLoc(Var_("i")), LdU8(126), Le, BrFalse(BlockLabel_("6")), Branch(BlockLabel_("2"))]), (BlockLabel_("2"), [CopyLoc(Var_("i")), Call(ModuleName("1::ascii"), FunctionName("is_printable_char"), []), BrFalse(BlockLabel_("4")), Branch(BlockLabel_("5"))]), (BlockLabel_("4"), [LdU64(0), Abort]), (BlockLabel_("5"), [MutBorrowLoc(Var_("vec")), CopyLoc(Var_("i")), VecPushBack(U8), MoveLoc(Var_("i")), LdU8(1), Add, StLoc(Var_("i")), Branch(BlockLabel_("1"))]), (BlockLabel_("6"), [MoveLoc(Var_("vec")), Call(ModuleName("1::ascii"), FunctionName("string"), []), StLoc(Var_("str")), ImmBorrowLoc(Var_("str")), Call(ModuleName("1::ascii"), FunctionName("all_characters_printable"), []), BrFalse(BlockLabel_("8")), Branch(BlockLabel_("9"))]), (BlockLabel_("8"), [LdU64(0), Abort]), (BlockLabel_("9"), [Ret])] } }), (FunctionName("unit_test_poison"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [], code: [(BlockLabel_("0"), [LdU64(0), Call(ModuleName("1::unit_test"), FunctionName("create_signers_for_testing"), []), Pop, Ret])] } })], synthetics: [] }
IS this part executed?3 in module in translate.rs []
IS this part executed?1 in module in translate.rs
IS this part executed?2 in module in translate.rs
IS this part executed?1 in compile_module function in compiler.rs
yj ModuleDefinition { loc: Loc { file_hash: "618b0ed9630a520dfe4a4a009878709022b4c98ad70a2d1a04c18c8689ea0e76", start: 320, end: 323 }, identifier: ModuleIdent { name: ModuleName("bcs"), address: 00000000000000000000000000000001 }, friends: [], imports: [ImportDefinition { ident: ModuleIdent { name: ModuleName("unit_test"), address: 00000000000000000000000000000001 }, alias: ModuleName("1::unit_test") }], explicit_dependency_declarations: [ModuleDependency { name: ModuleName("1::unit_test"), structs: [], functions: [FunctionDependency { name: FunctionName("create_signers_for_testing"), signature: FunctionSignature { formals: [(Var_("num_signers"), U64)], return_type: [Vector(Signer)], type_formals: [] } }] }], structs: [], constants: [], functions: [(FunctionName("to_bytes"), Function_ { visibility: Public, is_entry: false, signature: FunctionSignature { formals: [(Var_("v"), Reference(false, TypeParameter(TypeVar_("MoveValue"))))], return_type: [Vector(U8)], type_formals: [(TypeVar_("MoveValue"), {})] }, acquires: [], specifications: [], body: Native }), (FunctionName("unit_test_poison"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [], code: [(BlockLabel_("0"), [LdU64(0), Call(ModuleName("1::unit_test"), FunctionName("create_signers_for_testing"), []), Pop, Ret])] } })], synthetics: [] }
IS this part executed?3 in module in translate.rs []
IS this part executed?1 in module in translate.rs
IS this part executed?2 in module in translate.rs
IS this part executed?1 in compile_module function in compiler.rs
yj ModuleDefinition { loc: Loc { file_hash: "7432ed4c928c01093ba3d7a68d4c8e2b22c91941211a67be87414f00937f26ce", start: 25, end: 34 }, identifier: ModuleIdent { name: ModuleName("bcs_tests"), address: 00000000000000000000000000000001 }, friends: [], imports: [ImportDefinition { ident: ModuleIdent { name: ModuleName("bcs"), address: 00000000000000000000000000000001 }, alias: ModuleName("1::bcs") }, ImportDefinition { ident: ModuleIdent { name: ModuleName("unit_test"), address: 00000000000000000000000000000001 }, alias: ModuleName("1::unit_test") }], explicit_dependency_declarations: [ModuleDependency { name: ModuleName("1::unit_test"), structs: [], functions: [FunctionDependency { name: FunctionName("create_signers_for_testing"), signature: FunctionSignature { formals: [(Var_("num_signers"), U64)], return_type: [Vector(Signer)], type_formals: [] } }] }, ModuleDependency { name: ModuleName("1::bcs"), structs: [], functions: [FunctionDependency { name: FunctionName("to_bytes"), signature: FunctionSignature { formals: [(Var_("v"), Reference(false, TypeParameter(TypeVar_("MoveValue"))))], return_type: [Vector(U8)], type_formals: [(TypeVar_("MoveValue"), {})] } }] }], structs: [StructDefinition_ { abilities: {Copy, Drop, Store}, name: StructName("Box"), type_formals: [(false, TypeVar_("T"), {})], fields: Move { fields: [(Field_("x"), TypeParameter(TypeVar_("T")))] }, invariants: [] }, StructDefinition_ { abilities: {Copy, Drop, Store}, name: StructName("Box127"), type_formals: [(false, TypeVar_("T"), {})], fields: Move { fields: [(Field_("x"), Struct(QualifiedStructIdent { module: ModuleName("Self"), name: StructName("Box63") }, [Struct(QualifiedStructIdent { module: ModuleName("Self"), name: StructName("Box63") }, [TypeParameter(TypeVar_("T"))])]))] }, invariants: [] }, StructDefinition_ { abilities: {Copy, Drop, Store}, name: StructName("Box15"), type_formals: [(false, TypeVar_("T"), {})], fields: Move { fields: [(Field_("x"), Struct(QualifiedStructIdent { module: ModuleName("Self"), name: StructName("Box7") }, [Struct(QualifiedStructIdent { module: ModuleName("Self"), name: StructName("Box7") }, [TypeParameter(TypeVar_("T"))])]))] }, invariants: [] }, StructDefinition_ { abilities: {Copy, Drop, Store}, name: StructName("Box3"), type_formals: [(false, TypeVar_("T"), {})], fields: Move { fields: [(Field_("x"), Struct(QualifiedStructIdent { module: ModuleName("Self"), name: StructName("Box") }, [Struct(QualifiedStructIdent { module: ModuleName("Self"), name: StructName("Box") }, [TypeParameter(TypeVar_("T"))])]))] }, invariants: [] }, StructDefinition_ { abilities: {Copy, Drop, Store}, name: StructName("Box31"), type_formals: [(false, TypeVar_("T"), {})], fields: Move { fields: [(Field_("x"), Struct(QualifiedStructIdent { module: ModuleName("Self"), name: StructName("Box15") }, [Struct(QualifiedStructIdent { module: ModuleName("Self"), name: StructName("Box15") }, [TypeParameter(TypeVar_("T"))])]))] }, invariants: [] }, StructDefinition_ { abilities: {Copy, Drop, Store}, name: StructName("Box63"), type_formals: [(false, TypeVar_("T"), {})], fields: Move { fields: [(Field_("x"), Struct(QualifiedStructIdent { module: ModuleName("Self"), name: StructName("Box31") }, [Struct(QualifiedStructIdent { module: ModuleName("Self"), name: StructName("Box31") }, [TypeParameter(TypeVar_("T"))])]))] }, invariants: [] }, StructDefinition_ { abilities: {Copy, Drop, Store}, name: StructName("Box7"), type_formals: [(false, TypeVar_("T"), {})], fields: Move { fields: [(Field_("x"), Struct(QualifiedStructIdent { module: ModuleName("Self"), name: StructName("Box3") }, [Struct(QualifiedStructIdent { module: ModuleName("Self"), name: StructName("Box3") }, [TypeParameter(TypeVar_("T"))])]))] }, invariants: [] }], constants: [], functions: [(FunctionName("bcs_address"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [(Var_("addr"), Address)], code: [(BlockLabel_("0"), [LdConst(Address, Address(89b9f9d1fadc027cf9532d6f99041522)), StLoc(Var_("addr")), ImmBorrowLoc(Var_("addr")), Call(ModuleName("1::bcs"), FunctionName("to_bytes"), [Address]), LdConst(Vector(U8), Vector([U8(137), U8(185), U8(249), U8(209), U8(250), U8(220), U8(2), U8(124), U8(249), U8(83), U8(45), U8(111), U8(153), U8(4), U8(21), U8(34)])), Eq, BrFalse(BlockLabel_("2")), Branch(BlockLabel_("3"))]), (BlockLabel_("2"), [LdU64(0), Abort]), (BlockLabel_("3"), [Ret])] } }), (FunctionName("bcs_bool"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [(Var_("%#1"), Bool)], code: [(BlockLabel_("0"), [LdTrue, StLoc(Var_("%#1")), ImmBorrowLoc(Var_("%#1")), Call(ModuleName("1::bcs"), FunctionName("to_bytes"), [Bool]), LdConst(Vector(U8), Vector([U8(1)])), Eq, BrFalse(BlockLabel_("2")), Branch(BlockLabel_("3"))]), (BlockLabel_("2"), [LdU64(0), Abort]), (BlockLabel_("3"), [Ret])] } }), (FunctionName("bcs_u128"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [(Var_("%#1"), U128)], code: [(BlockLabel_("0"), [LdU128(1), StLoc(Var_("%#1")), ImmBorrowLoc(Var_("%#1")), Call(ModuleName("1::bcs"), FunctionName("to_bytes"), [U128]), LdConst(Vector(U8), Vector([U8(1), U8(0), U8(0), U8(0), U8(0), U8(0), U8(0), U8(0), U8(0), U8(0), U8(0), U8(0), U8(0), U8(0), U8(0), U8(0)])), Eq, BrFalse(BlockLabel_("2")), Branch(BlockLabel_("3"))]), (BlockLabel_("2"), [LdU64(0), Abort]), (BlockLabel_("3"), [Ret])] } }), (FunctionName("bcs_u16"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [(Var_("%#1"), U16)], code: [(BlockLabel_("0"), [LdU16(1), StLoc(Var_("%#1")), ImmBorrowLoc(Var_("%#1")), Call(ModuleName("1::bcs"), FunctionName("to_bytes"), [U16]), LdConst(Vector(U8), Vector([U8(1), U8(0)])), Eq, BrFalse(BlockLabel_("2")), Branch(BlockLabel_("3"))]), (BlockLabel_("2"), [LdU64(0), Abort]), (BlockLabel_("3"), [Ret])] } }), (FunctionName("bcs_u256"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [(Var_("%#1"), U256)], code: [(BlockLabel_("0"), [LdU256(U256(1)), StLoc(Var_("%#1")), ImmBorrowLoc(Var_("%#1")), Call(ModuleName("1::bcs"), FunctionName("to_bytes"), [U256]), LdConst(Vector(U8), Vector([U8(1), U8(0), U8(0), U8(0), U8(0), U8(0), U8(0), U8(0), U8(0), U8(0), U8(0), U8(0), U8(0), U8(0), U8(0), U8(0), U8(0), U8(0), U8(0), U8(0), U8(0), U8(0), U8(0), U8(0), U8(0), U8(0), U8(0), U8(0), U8(0), U8(0), U8(0), U8(0)])), Eq, BrFalse(BlockLabel_("2")), Branch(BlockLabel_("3"))]), (BlockLabel_("2"), [LdU64(0), Abort]), (BlockLabel_("3"), [Ret])] } }), (FunctionName("bcs_u32"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [(Var_("%#1"), U32)], code: [(BlockLabel_("0"), [LdU32(1), StLoc(Var_("%#1")), ImmBorrowLoc(Var_("%#1")), Call(ModuleName("1::bcs"), FunctionName("to_bytes"), [U32]), LdConst(Vector(U8), Vector([U8(1), U8(0), U8(0), U8(0)])), Eq, BrFalse(BlockLabel_("2")), Branch(BlockLabel_("3"))]), (BlockLabel_("2"), [LdU64(0), Abort]), (BlockLabel_("3"), [Ret])] } }), (FunctionName("bcs_u64"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [(Var_("%#1"), U64)], code: [(BlockLabel_("0"), [LdU64(1), StLoc(Var_("%#1")), ImmBorrowLoc(Var_("%#1")), Call(ModuleName("1::bcs"), FunctionName("to_bytes"), [U64]), LdConst(Vector(U8), Vector([U8(1), U8(0), U8(0), U8(0), U8(0), U8(0), U8(0), U8(0)])), Eq, BrFalse(BlockLabel_("2")), Branch(BlockLabel_("3"))]), (BlockLabel_("2"), [LdU64(0), Abort]), (BlockLabel_("3"), [Ret])] } }), (FunctionName("bcs_u8"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [(Var_("%#1"), U8)], code: [(BlockLabel_("0"), [LdU8(1), StLoc(Var_("%#1")), ImmBorrowLoc(Var_("%#1")), Call(ModuleName("1::bcs"), FunctionName("to_bytes"), [U8]), LdConst(Vector(U8), Vector([U8(1)])), Eq, BrFalse(BlockLabel_("2")), Branch(BlockLabel_("3"))]), (BlockLabel_("2"), [LdU64(0), Abort]), (BlockLabel_("3"), [Ret])] } }), (FunctionName("bcs_vec_u8"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [(Var_("v"), Vector(U8))], code: [(BlockLabel_("0"), [LdConst(Vector(U8), Vector([U8(15)])), StLoc(Var_("v")), ImmBorrowLoc(Var_("v")), Call(ModuleName("1::bcs"), FunctionName("to_bytes"), [Vector(U8)]), LdConst(Vector(U8), Vector([U8(1), U8(15)])), Eq, BrFalse(BlockLabel_("2")), Branch(BlockLabel_("3"))]), (BlockLabel_("2"), [LdU64(0), Abort]), (BlockLabel_("3"), [Ret])] } }), (FunctionName("box127"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [(Var_("x"), TypeParameter(TypeVar_("T")))], return_type: [Struct(QualifiedStructIdent { module: ModuleName("Self"), name: StructName("Box127") }, [TypeParameter(TypeVar_("T"))])], type_formals: [(TypeVar_("T"), {})] }, acquires: [], specifications: [], body: Bytecode { locals: [], code: [(BlockLabel_("0"), [MoveLoc(Var_("x")), Call(ModuleName("Self"), FunctionName("box63"), [TypeParameter(TypeVar_("T"))]), Call(ModuleName("Self"), FunctionName("box63"), [Struct(QualifiedStructIdent { module: ModuleName("Self"), name: StructName("Box63") }, [TypeParameter(TypeVar_("T"))])]), Pack(StructName("Box127"), [TypeParameter(TypeVar_("T"))]), Ret])] } }), (FunctionName("box15"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [(Var_("x"), TypeParameter(TypeVar_("T")))], return_type: [Struct(QualifiedStructIdent { module: ModuleName("Self"), name: StructName("Box15") }, [TypeParameter(TypeVar_("T"))])], type_formals: [(TypeVar_("T"), {})] }, acquires: [], specifications: [], body: Bytecode { locals: [], code: [(BlockLabel_("0"), [MoveLoc(Var_("x")), Call(ModuleName("Self"), FunctionName("box7"), [TypeParameter(TypeVar_("T"))]), Call(ModuleName("Self"), FunctionName("box7"), [Struct(QualifiedStructIdent { module: ModuleName("Self"), name: StructName("Box7") }, [TypeParameter(TypeVar_("T"))])]), Pack(StructName("Box15"), [TypeParameter(TypeVar_("T"))]), Ret])] } }), (FunctionName("box3"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [(Var_("x"), TypeParameter(TypeVar_("T")))], return_type: [Struct(QualifiedStructIdent { module: ModuleName("Self"), name: StructName("Box3") }, [TypeParameter(TypeVar_("T"))])], type_formals: [(TypeVar_("T"), {})] }, acquires: [], specifications: [], body: Bytecode { locals: [], code: [(BlockLabel_("0"), [MoveLoc(Var_("x")), Pack(StructName("Box"), [TypeParameter(TypeVar_("T"))]), Pack(StructName("Box"), [Struct(QualifiedStructIdent { module: ModuleName("Self"), name: StructName("Box") }, [TypeParameter(TypeVar_("T"))])]), Pack(StructName("Box3"), [TypeParameter(TypeVar_("T"))]), Ret])] } }), (FunctionName("box31"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [(Var_("x"), TypeParameter(TypeVar_("T")))], return_type: [Struct(QualifiedStructIdent { module: ModuleName("Self"), name: StructName("Box31") }, [TypeParameter(TypeVar_("T"))])], type_formals: [(TypeVar_("T"), {})] }, acquires: [], specifications: [], body: Bytecode { locals: [], code: [(BlockLabel_("0"), [MoveLoc(Var_("x")), Call(ModuleName("Self"), FunctionName("box15"), [TypeParameter(TypeVar_("T"))]), Call(ModuleName("Self"), FunctionName("box15"), [Struct(QualifiedStructIdent { module: ModuleName("Self"), name: StructName("Box15") }, [TypeParameter(TypeVar_("T"))])]), Pack(StructName("Box31"), [TypeParameter(TypeVar_("T"))]), Ret])] } }), (FunctionName("box63"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [(Var_("x"), TypeParameter(TypeVar_("T")))], return_type: [Struct(QualifiedStructIdent { module: ModuleName("Self"), name: StructName("Box63") }, [TypeParameter(TypeVar_("T"))])], type_formals: [(TypeVar_("T"), {})] }, acquires: [], specifications: [], body: Bytecode { locals: [], code: [(BlockLabel_("0"), [MoveLoc(Var_("x")), Call(ModuleName("Self"), FunctionName("box31"), [TypeParameter(TypeVar_("T"))]), Call(ModuleName("Self"), FunctionName("box31"), [Struct(QualifiedStructIdent { module: ModuleName("Self"), name: StructName("Box31") }, [TypeParameter(TypeVar_("T"))])]), Pack(StructName("Box63"), [TypeParameter(TypeVar_("T"))]), Ret])] } }), (FunctionName("box7"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [(Var_("x"), TypeParameter(TypeVar_("T")))], return_type: [Struct(QualifiedStructIdent { module: ModuleName("Self"), name: StructName("Box7") }, [TypeParameter(TypeVar_("T"))])], type_formals: [(TypeVar_("T"), {})] }, acquires: [], specifications: [], body: Bytecode { locals: [], code: [(BlockLabel_("0"), [MoveLoc(Var_("x")), Call(ModuleName("Self"), FunctionName("box3"), [TypeParameter(TypeVar_("T"))]), Call(ModuleName("Self"), FunctionName("box3"), [Struct(QualifiedStructIdent { module: ModuleName("Self"), name: StructName("Box3") }, [TypeParameter(TypeVar_("T"))])]), Pack(StructName("Box7"), [TypeParameter(TypeVar_("T"))]), Ret])] } }), (FunctionName("encode_128"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [(Var_("%#1"), Struct(QualifiedStructIdent { module: ModuleName("Self"), name: StructName("Box127") }, [Bool]))], code: [(BlockLabel_("0"), [LdTrue, Call(ModuleName("Self"), FunctionName("box127"), [Bool]), StLoc(Var_("%#1")), ImmBorrowLoc(Var_("%#1")), Call(ModuleName("1::bcs"), FunctionName("to_bytes"), [Struct(QualifiedStructIdent { module: ModuleName("Self"), name: StructName("Box127") }, [Bool])]), Pop, Ret])] } }), (FunctionName("encode_129"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [(Var_("%#1"), Struct(QualifiedStructIdent { module: ModuleName("Self"), name: StructName("Box") }, [Struct(QualifiedStructIdent { module: ModuleName("Self"), name: StructName("Box127") }, [Bool])]))], code: [(BlockLabel_("0"), [LdTrue, Call(ModuleName("Self"), FunctionName("box127"), [Bool]), Pack(StructName("Box"), [Struct(QualifiedStructIdent { module: ModuleName("Self"), name: StructName("Box127") }, [Bool])]), StLoc(Var_("%#1")), ImmBorrowLoc(Var_("%#1")), Call(ModuleName("1::bcs"), FunctionName("to_bytes"), [Struct(QualifiedStructIdent { module: ModuleName("Self"), name: StructName("Box") }, [Struct(QualifiedStructIdent { module: ModuleName("Self"), name: StructName("Box127") }, [Bool])])]), Pop, Ret])] } }), (FunctionName("unit_test_poison"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [], code: [(BlockLabel_("0"), [LdU64(0), Call(ModuleName("1::unit_test"), FunctionName("create_signers_for_testing"), []), Pop, Ret])] } })], synthetics: [] }
IS this part executed?3 in module in translate.rs []
IS this part executed?1 in module in translate.rs
IS this part executed?2 in module in translate.rs
IS this part executed?1 in compile_module function in compiler.rs
yj ModuleDefinition { loc: Loc { file_hash: "8bd3c79dbe76cfa58d689f96c91ccb7263747da63fee9e9b4d9fd417a3fe9e46", start: 12, end: 22 }, identifier: ModuleIdent { name: ModuleName("bit_vector"), address: 00000000000000000000000000000001 }, friends: [], imports: [ImportDefinition { ident: ModuleIdent { name: ModuleName("unit_test"), address: 00000000000000000000000000000001 }, alias: ModuleName("1::unit_test") }], explicit_dependency_declarations: [ModuleDependency { name: ModuleName("1::unit_test"), structs: [], functions: [FunctionDependency { name: FunctionName("create_signers_for_testing"), signature: FunctionSignature { formals: [(Var_("num_signers"), U64)], return_type: [Vector(Signer)], type_formals: [] } }] }], structs: [StructDefinition_ { abilities: {Copy, Drop, Store}, name: StructName("BitVector"), type_formals: [], fields: Move { fields: [(Field_("length"), U64), (Field_("bit_field"), Vector(Bool))] }, invariants: [] }], constants: [Constant { name: ConstantName("EINDEX"), signature: U64, value: U64(131072) }, Constant { name: ConstantName("ELENGTH"), signature: U64, value: U64(131073) }, Constant { name: ConstantName("MAX_SIZE"), signature: U64, value: U64(1024) }, Constant { name: ConstantName("WORD_SIZE"), signature: U64, value: U64(1) }], functions: [(FunctionName("is_index_set"), Function_ { visibility: Public, is_entry: false, signature: FunctionSignature { formals: [(Var_("bitvector"), Reference(false, Struct(QualifiedStructIdent { module: ModuleName("Self"), name: StructName("BitVector") }, []))), (Var_("bit_index"), U64)], return_type: [Bool], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [], code: [(BlockLabel_("0"), [CopyLoc(Var_("bit_index")), CopyLoc(Var_("bitvector")), ImmBorrowField(StructName("BitVector"), [], Field_("bit_field")), VecLen(Bool), Lt, BrFalse(BlockLabel_("2")), Branch(BlockLabel_("3"))]), (BlockLabel_("2"), [MoveLoc(Var_("bitvector")), Pop, LdNamedConst(ConstantName("EINDEX")), Abort]), (BlockLabel_("3"), [MoveLoc(Var_("bitvector")), ImmBorrowField(StructName("BitVector"), [], Field_("bit_field")), MoveLoc(Var_("bit_index")), VecImmBorrow(Bool), ReadRef, Ret])] } }), (FunctionName("length"), Function_ { visibility: Public, is_entry: false, signature: FunctionSignature { formals: [(Var_("bitvector"), Reference(false, Struct(QualifiedStructIdent { module: ModuleName("Self"), name: StructName("BitVector") }, [])))], return_type: [U64], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [], code: [(BlockLabel_("0"), [MoveLoc(Var_("bitvector")), ImmBorrowField(StructName("BitVector"), [], Field_("bit_field")), VecLen(Bool), Ret])] } }), (FunctionName("longest_set_sequence_starting_at"), Function_ { visibility: Public, is_entry: false, signature: FunctionSignature { formals: [(Var_("bitvector"), Reference(false, Struct(QualifiedStructIdent { module: ModuleName("Self"), name: StructName("BitVector") }, []))), (Var_("start_index"), U64)], return_type: [U64], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [(Var_("index"), U64)], code: [(BlockLabel_("0"), [CopyLoc(Var_("start_index")), CopyLoc(Var_("bitvector")), ImmBorrowField(StructName("BitVector"), [], Field_("length")), ReadRef, Lt, BrFalse(BlockLabel_("2")), Branch(BlockLabel_("3"))]), (BlockLabel_("2"), [MoveLoc(Var_("bitvector")), Pop, LdNamedConst(ConstantName("EINDEX")), Abort]), (BlockLabel_("3"), [CopyLoc(Var_("start_index")), StLoc(Var_("index"))]), (BlockLabel_("4"), [CopyLoc(Var_("index")), CopyLoc(Var_("bitvector")), ImmBorrowField(StructName("BitVector"), [], Field_("length")), ReadRef, Lt, BrFalse(BlockLabel_("9")), Branch(BlockLabel_("5"))]), (BlockLabel_("5"), [CopyLoc(Var_("bitvector")), CopyLoc(Var_("index")), Call(ModuleName("Self"), FunctionName("is_index_set"), []), Not, BrFalse(BlockLabel_("8"))]), (BlockLabel_("6"), [MoveLoc(Var_("bitvector")), Pop, Branch(BlockLabel_("9"))]), (BlockLabel_("8"), [MoveLoc(Var_("index")), LdU64(1), Add, StLoc(Var_("index")), Branch(BlockLabel_("4"))]), (BlockLabel_("9"), [MoveLoc(Var_("index")), MoveLoc(Var_("start_index")), Sub, Ret])] } }), (FunctionName("new"), Function_ { visibility: Public, is_entry: false, signature: FunctionSignature { formals: [(Var_("length"), U64)], return_type: [Struct(QualifiedStructIdent { module: ModuleName("Self"), name: StructName("BitVector") }, [])], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [(Var_("bit_field"), Vector(Bool)), (Var_("counter"), U64)], code: [(BlockLabel_("0"), [CopyLoc(Var_("length")), LdU64(0), Gt, BrFalse(BlockLabel_("2")), Branch(BlockLabel_("3"))]), (BlockLabel_("2"), [LdNamedConst(ConstantName("ELENGTH")), Abort]), (BlockLabel_("3"), [CopyLoc(Var_("length")), LdNamedConst(ConstantName("MAX_SIZE")), Lt, BrFalse(BlockLabel_("5")), Branch(BlockLabel_("6"))]), (BlockLabel_("5"), [LdNamedConst(ConstantName("ELENGTH")), Abort]), (BlockLabel_("6"), [LdU64(0), StLoc(Var_("counter")), VecPack(Bool, 0), StLoc(Var_("bit_field"))]), (BlockLabel_("7"), [Nop(Some(NopLabel("0"))), CopyLoc(Var_("counter")), CopyLoc(Var_("length")), Lt, BrFalse(BlockLabel_("9")), Branch(BlockLabel_("8"))]), (BlockLabel_("8"), [MutBorrowLoc(Var_("bit_field")), LdFalse, VecPushBack(Bool), MoveLoc(Var_("counter")), LdU64(1), Add, StLoc(Var_("counter")), Branch(BlockLabel_("7"))]), (BlockLabel_("9"), [Nop(Some(NopLabel("1"))), MoveLoc(Var_("length")), MoveLoc(Var_("bit_field")), Pack(StructName("BitVector"), []), Ret])] } }), (FunctionName("set"), Function_ { visibility: Public, is_entry: false, signature: FunctionSignature { formals: [(Var_("bitvector"), Reference(true, Struct(QualifiedStructIdent { module: ModuleName("Self"), name: StructName("BitVector") }, []))), (Var_("bit_index"), U64)], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [(Var_("x"), Reference(true, Bool))], code: [(BlockLabel_("0"), [CopyLoc(Var_("bit_index")), CopyLoc(Var_("bitvector")), ImmBorrowField(StructName("BitVector"), [], Field_("bit_field")), VecLen(Bool), Lt, BrFalse(BlockLabel_("2")), Branch(BlockLabel_("3"))]), (BlockLabel_("2"), [MoveLoc(Var_("bitvector")), Pop, LdNamedConst(ConstantName("EINDEX")), Abort]), (BlockLabel_("3"), [MoveLoc(Var_("bitvector")), MutBorrowField(StructName("BitVector"), [], Field_("bit_field")), MoveLoc(Var_("bit_index")), VecMutBorrow(Bool), StLoc(Var_("x")), LdTrue, MoveLoc(Var_("x")), WriteRef, Ret])] } }), (FunctionName("shift_left"), Function_ { visibility: Public, is_entry: false, signature: FunctionSignature { formals: [(Var_("bitvector"), Reference(true, Struct(QualifiedStructIdent { module: ModuleName("Self"), name: StructName("BitVector") }, []))), (Var_("amount"), U64)], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [(Var_("%#3"), U64), (Var_("elem"), Reference(true, Bool)), (Var_("i"), U64), (Var_("i#1"), U64), (Var_("len"), U64)], code: [(BlockLabel_("0"), [CopyLoc(Var_("amount")), CopyLoc(Var_("bitvector")), ImmBorrowField(StructName("BitVector"), [], Field_("length")), ReadRef, Ge, BrFalse(BlockLabel_("5"))]), (BlockLabel_("1"), [CopyLoc(Var_("bitvector")), ImmBorrowField(StructName("BitVector"), [], Field_("bit_field")), VecLen(Bool), StLoc(Var_("len")), LdU64(0), StLoc(Var_("i"))]), (BlockLabel_("2"), [CopyLoc(Var_("i")), CopyLoc(Var_("len")), Lt, BrFalse(BlockLabel_("4")), Branch(BlockLabel_("3"))]), (BlockLabel_("3"), [CopyLoc(Var_("bitvector")), MutBorrowField(StructName("BitVector"), [], Field_("bit_field")), CopyLoc(Var_("i")), VecMutBorrow(Bool), StLoc(Var_("elem")), LdFalse, MoveLoc(Var_("elem")), WriteRef, MoveLoc(Var_("i")), LdU64(1), Add, StLoc(Var_("i")), Branch(BlockLabel_("2"))]), (BlockLabel_("4"), [MoveLoc(Var_("bitvector")), Pop, Branch(BlockLabel_("15"))]), (BlockLabel_("5"), [CopyLoc(Var_("amount")), StLoc(Var_("i#1"))]), (BlockLabel_("6"), [CopyLoc(Var_("i#1")), CopyLoc(Var_("bitvector")), ImmBorrowField(StructName("BitVector"), [], Field_("length")), ReadRef, Lt, BrFalse(BlockLabel_("11")), Branch(BlockLabel_("7"))]), (BlockLabel_("7"), [CopyLoc(Var_("bitvector")), CopyLoc(Var_("i#1")), StLoc(Var_("%#3")), FreezeRef, MoveLoc(Var_("%#3")), Call(ModuleName("Self"), FunctionName("is_index_set"), []), BrFalse(BlockLabel_("9"))]), (BlockLabel_("8"), [CopyLoc(Var_("bitvector")), CopyLoc(Var_("i#1")), CopyLoc(Var_("amount")), Sub, Call(ModuleName("Self"), FunctionName("set"), []), Branch(BlockLabel_("10"))]), (BlockLabel_("9"), [CopyLoc(Var_("bitvector")), CopyLoc(Var_("i#1")), CopyLoc(Var_("amount")), Sub, Call(ModuleName("Self"), FunctionName("unset"), [])]), (BlockLabel_("10"), [MoveLoc(Var_("i#1")), LdU64(1), Add, StLoc(Var_("i#1")), Branch(BlockLabel_("6"))]), (BlockLabel_("11"), [CopyLoc(Var_("bitvector")), ImmBorrowField(StructName("BitVector"), [], Field_("length")), ReadRef, MoveLoc(Var_("amount")), Sub, StLoc(Var_("i#1"))]), (BlockLabel_("12"), [CopyLoc(Var_("i#1")), CopyLoc(Var_("bitvector")), ImmBorrowField(StructName("BitVector"), [], Field_("length")), ReadRef, Lt, BrFalse(BlockLabel_("14")), Branch(BlockLabel_("13"))]), (BlockLabel_("13"), [CopyLoc(Var_("bitvector")), CopyLoc(Var_("i#1")), Call(ModuleName("Self"), FunctionName("unset"), []), MoveLoc(Var_("i#1")), LdU64(1), Add, StLoc(Var_("i#1")), Branch(BlockLabel_("12"))]), (BlockLabel_("14"), [MoveLoc(Var_("bitvector")), Pop]), (BlockLabel_("15"), [Ret])] } }), (FunctionName("unit_test_poison"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [], code: [(BlockLabel_("0"), [LdU64(0), Call(ModuleName("1::unit_test"), FunctionName("create_signers_for_testing"), []), Pop, Ret])] } }), (FunctionName("unset"), Function_ { visibility: Public, is_entry: false, signature: FunctionSignature { formals: [(Var_("bitvector"), Reference(true, Struct(QualifiedStructIdent { module: ModuleName("Self"), name: StructName("BitVector") }, []))), (Var_("bit_index"), U64)], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [(Var_("x"), Reference(true, Bool))], code: [(BlockLabel_("0"), [CopyLoc(Var_("bit_index")), CopyLoc(Var_("bitvector")), ImmBorrowField(StructName("BitVector"), [], Field_("bit_field")), VecLen(Bool), Lt, BrFalse(BlockLabel_("2")), Branch(BlockLabel_("3"))]), (BlockLabel_("2"), [MoveLoc(Var_("bitvector")), Pop, LdNamedConst(ConstantName("EINDEX")), Abort]), (BlockLabel_("3"), [MoveLoc(Var_("bitvector")), MutBorrowField(StructName("BitVector"), [], Field_("bit_field")), MoveLoc(Var_("bit_index")), VecMutBorrow(Bool), StLoc(Var_("x")), LdFalse, MoveLoc(Var_("x")), WriteRef, Ret])] } }), (FunctionName("word_size"), Function_ { visibility: Public, is_entry: false, signature: FunctionSignature { formals: [], return_type: [U64], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [], code: [(BlockLabel_("0"), [LdNamedConst(ConstantName("WORD_SIZE")), Ret])] } })], synthetics: [] }
IS this part executed?3 in module in translate.rs []
IS this part executed?1 in module in translate.rs
IS this part executed?2 in module in translate.rs
IS this part executed?1 in compile_module function in compiler.rs
yj ModuleDefinition { loc: Loc { file_hash: "fd3d98b350409a7443668ca990892a5f58319091ab09efab76f6eafe9761acbf", start: 25, end: 41 }, identifier: ModuleIdent { name: ModuleName("bit_vector_tests"), address: 00000000000000000000000000000001 }, friends: [], imports: [ImportDefinition { ident: ModuleIdent { name: ModuleName("bit_vector"), address: 00000000000000000000000000000001 }, alias: ModuleName("1::bit_vector") }, ImportDefinition { ident: ModuleIdent { name: ModuleName("unit_test"), address: 00000000000000000000000000000001 }, alias: ModuleName("1::unit_test") }], explicit_dependency_declarations: [ModuleDependency { name: ModuleName("1::unit_test"), structs: [], functions: [FunctionDependency { name: FunctionName("create_signers_for_testing"), signature: FunctionSignature { formals: [(Var_("num_signers"), U64)], return_type: [Vector(Signer)], type_formals: [] } }] }, ModuleDependency { name: ModuleName("1::bit_vector"), structs: [StructDependency { abilities: {Copy, Drop, Store}, name: StructName("BitVector"), type_formals: [] }], functions: [FunctionDependency { name: FunctionName("is_index_set"), signature: FunctionSignature { formals: [(Var_("bitvector"), Reference(false, Struct(QualifiedStructIdent { module: ModuleName("1::bit_vector"), name: StructName("BitVector") }, []))), (Var_("bit_index"), U64)], return_type: [Bool], type_formals: [] } }, FunctionDependency { name: FunctionName("length"), signature: FunctionSignature { formals: [(Var_("bitvector"), Reference(false, Struct(QualifiedStructIdent { module: ModuleName("1::bit_vector"), name: StructName("BitVector") }, [])))], return_type: [U64], type_formals: [] } }, FunctionDependency { name: FunctionName("longest_set_sequence_starting_at"), signature: FunctionSignature { formals: [(Var_("bitvector"), Reference(false, Struct(QualifiedStructIdent { module: ModuleName("1::bit_vector"), name: StructName("BitVector") }, []))), (Var_("start_index"), U64)], return_type: [U64], type_formals: [] } }, FunctionDependency { name: FunctionName("new"), signature: FunctionSignature { formals: [(Var_("length"), U64)], return_type: [Struct(QualifiedStructIdent { module: ModuleName("1::bit_vector"), name: StructName("BitVector") }, [])], type_formals: [] } }, FunctionDependency { name: FunctionName("set"), signature: FunctionSignature { formals: [(Var_("bitvector"), Reference(true, Struct(QualifiedStructIdent { module: ModuleName("1::bit_vector"), name: StructName("BitVector") }, []))), (Var_("bit_index"), U64)], return_type: [], type_formals: [] } }, FunctionDependency { name: FunctionName("shift_left"), signature: FunctionSignature { formals: [(Var_("bitvector"), Reference(true, Struct(QualifiedStructIdent { module: ModuleName("1::bit_vector"), name: StructName("BitVector") }, []))), (Var_("amount"), U64)], return_type: [], type_formals: [] } }, FunctionDependency { name: FunctionName("unset"), signature: FunctionSignature { formals: [(Var_("bitvector"), Reference(true, Struct(QualifiedStructIdent { module: ModuleName("1::bit_vector"), name: StructName("BitVector") }, []))), (Var_("bit_index"), U64)], return_type: [], type_formals: [] } }, FunctionDependency { name: FunctionName("word_size"), signature: FunctionSignature { formals: [], return_type: [U64], type_formals: [] } }] }], structs: [], constants: [], functions: [(FunctionName("empty_bitvector"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [], code: [(BlockLabel_("0"), [LdU64(0), Call(ModuleName("1::bit_vector"), FunctionName("new"), []), Pop, Ret])] } }), (FunctionName("index_bit_out_of_bounds"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [(Var_("%#2"), U64), (Var_("bitvector"), Struct(QualifiedStructIdent { module: ModuleName("1::bit_vector"), name: StructName("BitVector") }, []))], code: [(BlockLabel_("0"), [Call(ModuleName("1::bit_vector"), FunctionName("word_size"), []), Call(ModuleName("1::bit_vector"), FunctionName("new"), []), StLoc(Var_("bitvector")), MutBorrowLoc(Var_("bitvector")), Call(ModuleName("1::bit_vector"), FunctionName("word_size"), []), StLoc(Var_("%#2")), FreezeRef, MoveLoc(Var_("%#2")), Call(ModuleName("1::bit_vector"), FunctionName("is_index_set"), []), Pop, Ret])] } }), (FunctionName("longest_sequence_no_set_nonzero_index"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [(Var_("bitvector"), Struct(QualifiedStructIdent { module: ModuleName("1::bit_vector"), name: StructName("BitVector") }, []))], code: [(BlockLabel_("0"), [LdU64(100), Call(ModuleName("1::bit_vector"), FunctionName("new"), []), StLoc(Var_("bitvector")), ImmBorrowLoc(Var_("bitvector")), LdU64(51), Call(ModuleName("1::bit_vector"), FunctionName("longest_set_sequence_starting_at"), []), LdU64(0), Eq, BrFalse(BlockLabel_("2")), Branch(BlockLabel_("3"))]), (BlockLabel_("2"), [LdU64(0), Abort]), (BlockLabel_("3"), [Ret])] } }), (FunctionName("longest_sequence_no_set_zero_index"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [(Var_("bitvector"), Struct(QualifiedStructIdent { module: ModuleName("1::bit_vector"), name: StructName("BitVector") }, []))], code: [(BlockLabel_("0"), [LdU64(100), Call(ModuleName("1::bit_vector"), FunctionName("new"), []), StLoc(Var_("bitvector")), ImmBorrowLoc(Var_("bitvector")), LdU64(0), Call(ModuleName("1::bit_vector"), FunctionName("longest_set_sequence_starting_at"), []), LdU64(0), Eq, BrFalse(BlockLabel_("2")), Branch(BlockLabel_("3"))]), (BlockLabel_("2"), [LdU64(0), Abort]), (BlockLabel_("3"), [Ret])] } }), (FunctionName("longest_sequence_one_set_zero_index"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [(Var_("bitvector"), Struct(QualifiedStructIdent { module: ModuleName("1::bit_vector"), name: StructName("BitVector") }, []))], code: [(BlockLabel_("0"), [LdU64(100), Call(ModuleName("1::bit_vector"), FunctionName("new"), []), StLoc(Var_("bitvector")), MutBorrowLoc(Var_("bitvector")), LdU64(1), Call(ModuleName("1::bit_vector"), FunctionName("set"), []), ImmBorrowLoc(Var_("bitvector")), LdU64(0), Call(ModuleName("1::bit_vector"), FunctionName("longest_set_sequence_starting_at"), []), LdU64(0), Eq, BrFalse(BlockLabel_("2")), Branch(BlockLabel_("3"))]), (BlockLabel_("2"), [LdU64(0), Abort]), (BlockLabel_("3"), [Ret])] } }), (FunctionName("longest_sequence_two_set_nonzero_index"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [(Var_("bitvector"), Struct(QualifiedStructIdent { module: ModuleName("1::bit_vector"), name: StructName("BitVector") }, []))], code: [(BlockLabel_("0"), [LdU64(100), Call(ModuleName("1::bit_vector"), FunctionName("new"), []), StLoc(Var_("bitvector")), MutBorrowLoc(Var_("bitvector")), LdU64(50), Call(ModuleName("1::bit_vector"), FunctionName("set"), []), MutBorrowLoc(Var_("bitvector")), LdU64(52), Call(ModuleName("1::bit_vector"), FunctionName("set"), []), ImmBorrowLoc(Var_("bitvector")), LdU64(51), Call(ModuleName("1::bit_vector"), FunctionName("longest_set_sequence_starting_at"), []), LdU64(0), Eq, BrFalse(BlockLabel_("2")), Branch(BlockLabel_("3"))]), (BlockLabel_("2"), [LdU64(0), Abort]), (BlockLabel_("3"), [Ret])] } }), (FunctionName("longest_sequence_with_break"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [(Var_("bitvector"), Struct(QualifiedStructIdent { module: ModuleName("1::bit_vector"), name: StructName("BitVector") }, [])), (Var_("i"), U64)], code: [(BlockLabel_("0"), [LdU64(100), Call(ModuleName("1::bit_vector"), FunctionName("new"), []), StLoc(Var_("bitvector")), LdU64(0), StLoc(Var_("i"))]), (BlockLabel_("1"), [CopyLoc(Var_("i")), LdU64(20), Lt, BrFalse(BlockLabel_("3")), Branch(BlockLabel_("2"))]), (BlockLabel_("2"), [MutBorrowLoc(Var_("bitvector")), CopyLoc(Var_("i")), Call(ModuleName("1::bit_vector"), FunctionName("set"), []), MoveLoc(Var_("i")), LdU64(1), Add, StLoc(Var_("i")), Branch(BlockLabel_("1"))]), (BlockLabel_("3"), [MoveLoc(Var_("i")), LdU64(1), Add, StLoc(Var_("i"))]), (BlockLabel_("4"), [CopyLoc(Var_("i")), LdU64(100), Lt, BrFalse(BlockLabel_("6")), Branch(BlockLabel_("5"))]), (BlockLabel_("5"), [MutBorrowLoc(Var_("bitvector")), CopyLoc(Var_("i")), Call(ModuleName("1::bit_vector"), FunctionName("set"), []), MoveLoc(Var_("i")), LdU64(1), Add, StLoc(Var_("i")), Branch(BlockLabel_("4"))]), (BlockLabel_("6"), [ImmBorrowLoc(Var_("bitvector")), LdU64(0), Call(ModuleName("1::bit_vector"), FunctionName("longest_set_sequence_starting_at"), []), LdU64(20), Eq, BrFalse(BlockLabel_("8")), Branch(BlockLabel_("9"))]), (BlockLabel_("8"), [LdU64(0), Abort]), (BlockLabel_("9"), [ImmBorrowLoc(Var_("bitvector")), LdU64(20), Call(ModuleName("1::bit_vector"), FunctionName("longest_set_sequence_starting_at"), []), LdU64(0), Eq, BrFalse(BlockLabel_("11")), Branch(BlockLabel_("12"))]), (BlockLabel_("11"), [LdU64(0), Abort]), (BlockLabel_("12"), [ImmBorrowLoc(Var_("bitvector")), LdU64(21), Call(ModuleName("1::bit_vector"), FunctionName("longest_set_sequence_starting_at"), []), LdU64(79), Eq, BrFalse(BlockLabel_("14")), Branch(BlockLabel_("15"))]), (BlockLabel_("14"), [LdU64(0), Abort]), (BlockLabel_("15"), [Ret])] } }), (FunctionName("set_bit_out_of_bounds"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [(Var_("bitvector"), Struct(QualifiedStructIdent { module: ModuleName("1::bit_vector"), name: StructName("BitVector") }, []))], code: [(BlockLabel_("0"), [Call(ModuleName("1::bit_vector"), FunctionName("word_size"), []), Call(ModuleName("1::bit_vector"), FunctionName("new"), []), StLoc(Var_("bitvector")), MutBorrowLoc(Var_("bitvector")), Call(ModuleName("1::bit_vector"), FunctionName("word_size"), []), Call(ModuleName("1::bit_vector"), FunctionName("set"), []), Ret])] } }), (FunctionName("shift_left_at_size"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [(Var_("bitlen"), U64), (Var_("bitvector"), Struct(QualifiedStructIdent { module: ModuleName("1::bit_vector"), name: StructName("BitVector") }, [])), (Var_("i"), U64)], code: [(BlockLabel_("0"), [LdU64(133), StLoc(Var_("bitlen")), CopyLoc(Var_("bitlen")), Call(ModuleName("1::bit_vector"), FunctionName("new"), []), StLoc(Var_("bitvector")), LdU64(0), StLoc(Var_("i"))]), (BlockLabel_("1"), [CopyLoc(Var_("i")), CopyLoc(Var_("bitlen")), Lt, BrFalse(BlockLabel_("3")), Branch(BlockLabel_("2"))]), (BlockLabel_("2"), [MutBorrowLoc(Var_("bitvector")), CopyLoc(Var_("i")), Call(ModuleName("1::bit_vector"), FunctionName("set"), []), MoveLoc(Var_("i")), LdU64(1), Add, StLoc(Var_("i")), Branch(BlockLabel_("1"))]), (BlockLabel_("3"), [MutBorrowLoc(Var_("bitvector")), CopyLoc(Var_("bitlen")), LdU64(1), Sub, Call(ModuleName("1::bit_vector"), FunctionName("shift_left"), []), MoveLoc(Var_("bitlen")), LdU64(1), Sub, StLoc(Var_("i"))]), (BlockLabel_("4"), [CopyLoc(Var_("i")), LdU64(0), Gt, BrFalse(BlockLabel_("9")), Branch(BlockLabel_("5"))]), (BlockLabel_("5"), [ImmBorrowLoc(Var_("bitvector")), CopyLoc(Var_("i")), Call(ModuleName("1::bit_vector"), FunctionName("is_index_set"), []), Not, BrFalse(BlockLabel_("7")), Branch(BlockLabel_("8"))]), (BlockLabel_("7"), [LdU64(1), Abort]), (BlockLabel_("8"), [MoveLoc(Var_("i")), LdU64(1), Sub, StLoc(Var_("i")), Branch(BlockLabel_("4"))]), (BlockLabel_("9"), [Ret])] } }), (FunctionName("shift_left_more_than_size"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [(Var_("bitlen"), U64), (Var_("bitvector"), Struct(QualifiedStructIdent { module: ModuleName("1::bit_vector"), name: StructName("BitVector") }, []))], code: [(BlockLabel_("0"), [LdU64(133), StLoc(Var_("bitlen")), CopyLoc(Var_("bitlen")), Call(ModuleName("1::bit_vector"), FunctionName("new"), []), StLoc(Var_("bitvector")), MutBorrowLoc(Var_("bitvector")), MoveLoc(Var_("bitlen")), Call(ModuleName("1::bit_vector"), FunctionName("shift_left"), []), Ret])] } }), (FunctionName("single_bit_bitvector"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [(Var_("bitvector"), Struct(QualifiedStructIdent { module: ModuleName("1::bit_vector"), name: StructName("BitVector") }, []))], code: [(BlockLabel_("0"), [LdU64(1), Call(ModuleName("1::bit_vector"), FunctionName("new"), []), StLoc(Var_("bitvector")), ImmBorrowLoc(Var_("bitvector")), Call(ModuleName("1::bit_vector"), FunctionName("length"), []), LdU64(1), Eq, BrFalse(BlockLabel_("2")), Branch(BlockLabel_("3"))]), (BlockLabel_("2"), [LdU64(0), Abort]), (BlockLabel_("3"), [Ret])] } }), (FunctionName("test_bitvector_set_unset_of_size"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [(Var_("k"), U64)], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [(Var_("bitvector"), Struct(QualifiedStructIdent { module: ModuleName("1::bit_vector"), name: StructName("BitVector") }, [])), (Var_("index"), U64), (Var_("index_to_right"), U64), (Var_("index_to_right#1"), U64)], code: [(BlockLabel_("0"), [CopyLoc(Var_("k")), Call(ModuleName("1::bit_vector"), FunctionName("new"), []), StLoc(Var_("bitvector")), LdU64(0), StLoc(Var_("index"))]), (BlockLabel_("1"), [CopyLoc(Var_("index")), CopyLoc(Var_("k")), Lt, BrFalse(BlockLabel_("12")), Branch(BlockLabel_("2"))]), (BlockLabel_("2"), [MutBorrowLoc(Var_("bitvector")), CopyLoc(Var_("index")), Call(ModuleName("1::bit_vector"), FunctionName("set"), []), ImmBorrowLoc(Var_("bitvector")), CopyLoc(Var_("index")), Call(ModuleName("1::bit_vector"), FunctionName("is_index_set"), []), BrFalse(BlockLabel_("4")), Branch(BlockLabel_("5"))]), (BlockLabel_("4"), [LdU64(0), Abort]), (BlockLabel_("5"), [MoveLoc(Var_("index")), LdU64(1), Add, StLoc(Var_("index")), CopyLoc(Var_("index")), StLoc(Var_("index_to_right"))]), (BlockLabel_("6"), [CopyLoc(Var_("index_to_right")), CopyLoc(Var_("k")), Lt, BrFalse(BlockLabel_("11")), Branch(BlockLabel_("7"))]), (BlockLabel_("7"), [ImmBorrowLoc(Var_("bitvector")), CopyLoc(Var_("index_to_right")), Call(ModuleName("1::bit_vector"), FunctionName("is_index_set"), []), Not, BrFalse(BlockLabel_("9")), Branch(BlockLabel_("10"))]), (BlockLabel_("9"), [LdU64(1), Abort]), (BlockLabel_("10"), [MoveLoc(Var_("index_to_right")), LdU64(1), Add, StLoc(Var_("index_to_right")), Branch(BlockLabel_("6"))]), (BlockLabel_("11"), [Branch(BlockLabel_("1"))]), (BlockLabel_("12"), [LdU64(0), StLoc(Var_("index"))]), (BlockLabel_("13"), [CopyLoc(Var_("index")), CopyLoc(Var_("k")), Lt, BrFalse(BlockLabel_("24")), Branch(BlockLabel_("14"))]), (BlockLabel_("14"), [MutBorrowLoc(Var_("bitvector")), CopyLoc(Var_("index")), Call(ModuleName("1::bit_vector"), FunctionName("unset"), []), ImmBorrowLoc(Var_("bitvector")), CopyLoc(Var_("index")), Call(ModuleName("1::bit_vector"), FunctionName("is_index_set"), []), Not, BrFalse(BlockLabel_("16")), Branch(BlockLabel_("17"))]), (BlockLabel_("16"), [LdU64(0), Abort]), (BlockLabel_("17"), [MoveLoc(Var_("index")), LdU64(1), Add, StLoc(Var_("index")), CopyLoc(Var_("index")), StLoc(Var_("index_to_right#1"))]), (BlockLabel_("18"), [CopyLoc(Var_("index_to_right#1")), CopyLoc(Var_("k")), Lt, BrFalse(BlockLabel_("23")), Branch(BlockLabel_("19"))]), (BlockLabel_("19"), [ImmBorrowLoc(Var_("bitvector")), CopyLoc(Var_("index_to_right#1")), Call(ModuleName("1::bit_vector"), FunctionName("is_index_set"), []), BrFalse(BlockLabel_("21")), Branch(BlockLabel_("22"))]), (BlockLabel_("21"), [LdU64(1), Abort]), (BlockLabel_("22"), [MoveLoc(Var_("index_to_right#1")), LdU64(1), Add, StLoc(Var_("index_to_right#1")), Branch(BlockLabel_("18"))]), (BlockLabel_("23"), [Branch(BlockLabel_("13"))]), (BlockLabel_("24"), [Ret])] } }), (FunctionName("test_set_bit_and_index_basic"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [], code: [(BlockLabel_("0"), [LdU64(8), Call(ModuleName("Self"), FunctionName("test_bitvector_set_unset_of_size"), []), Ret])] } }), (FunctionName("test_set_bit_and_index_odd_size"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [], code: [(BlockLabel_("0"), [LdU64(300), Call(ModuleName("Self"), FunctionName("test_bitvector_set_unset_of_size"), []), Ret])] } }), (FunctionName("test_shift_left"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [(Var_("bitlen"), U64), (Var_("bitvector"), Struct(QualifiedStructIdent { module: ModuleName("1::bit_vector"), name: StructName("BitVector") }, [])), (Var_("i"), U64)], code: [(BlockLabel_("0"), [LdU64(133), StLoc(Var_("bitlen")), CopyLoc(Var_("bitlen")), Call(ModuleName("1::bit_vector"), FunctionName("new"), []), StLoc(Var_("bitvector")), LdU64(0), StLoc(Var_("i"))]), (BlockLabel_("1"), [CopyLoc(Var_("i")), CopyLoc(Var_("bitlen")), Lt, BrFalse(BlockLabel_("3")), Branch(BlockLabel_("2"))]), (BlockLabel_("2"), [MutBorrowLoc(Var_("bitvector")), CopyLoc(Var_("i")), Call(ModuleName("1::bit_vector"), FunctionName("set"), []), MoveLoc(Var_("i")), LdU64(1), Add, StLoc(Var_("i")), Branch(BlockLabel_("1"))]), (BlockLabel_("3"), [MoveLoc(Var_("bitlen")), LdU64(1), Sub, StLoc(Var_("i"))]), (BlockLabel_("4"), [CopyLoc(Var_("i")), LdU64(0), Gt, BrFalse(BlockLabel_("12")), Branch(BlockLabel_("5"))]), (BlockLabel_("5"), [ImmBorrowLoc(Var_("bitvector")), CopyLoc(Var_("i")), Call(ModuleName("1::bit_vector"), FunctionName("is_index_set"), []), BrFalse(BlockLabel_("7")), Branch(BlockLabel_("8"))]), (BlockLabel_("7"), [LdU64(0), Abort]), (BlockLabel_("8"), [MutBorrowLoc(Var_("bitvector")), LdU64(1), Call(ModuleName("1::bit_vector"), FunctionName("shift_left"), []), ImmBorrowLoc(Var_("bitvector")), CopyLoc(Var_("i")), Call(ModuleName("1::bit_vector"), FunctionName("is_index_set"), []), Not, BrFalse(BlockLabel_("10")), Branch(BlockLabel_("11"))]), (BlockLabel_("10"), [LdU64(1), Abort]), (BlockLabel_("11"), [MoveLoc(Var_("i")), LdU64(1), Sub, StLoc(Var_("i")), Branch(BlockLabel_("4"))]), (BlockLabel_("12"), [Ret])] } }), (FunctionName("test_shift_left_specific_amount"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [(Var_("bitlen"), U64), (Var_("bitvector"), Struct(QualifiedStructIdent { module: ModuleName("1::bit_vector"), name: StructName("BitVector") }, [])), (Var_("i"), U64), (Var_("shift_amount"), U64)], code: [(BlockLabel_("0"), [LdU64(300), StLoc(Var_("bitlen")), LdU64(133), StLoc(Var_("shift_amount")), CopyLoc(Var_("bitlen")), Call(ModuleName("1::bit_vector"), FunctionName("new"), []), StLoc(Var_("bitvector")), MutBorrowLoc(Var_("bitvector")), LdU64(201), Call(ModuleName("1::bit_vector"), FunctionName("set"), []), ImmBorrowLoc(Var_("bitvector")), LdU64(201), Call(ModuleName("1::bit_vector"), FunctionName("is_index_set"), []), BrFalse(BlockLabel_("2")), Branch(BlockLabel_("3"))]), (BlockLabel_("2"), [LdU64(0), Abort]), (BlockLabel_("3"), [MutBorrowLoc(Var_("bitvector")), CopyLoc(Var_("shift_amount")), Call(ModuleName("1::bit_vector"), FunctionName("shift_left"), []), ImmBorrowLoc(Var_("bitvector")), LdU64(201), MoveLoc(Var_("shift_amount")), Sub, Call(ModuleName("1::bit_vector"), FunctionName("is_index_set"), []), BrFalse(BlockLabel_("5")), Branch(BlockLabel_("6"))]), (BlockLabel_("5"), [LdU64(1), Abort]), (BlockLabel_("6"), [ImmBorrowLoc(Var_("bitvector")), LdU64(201), Call(ModuleName("1::bit_vector"), FunctionName("is_index_set"), []), Not, BrFalse(BlockLabel_("8")), Branch(BlockLabel_("9"))]), (BlockLabel_("8"), [LdU64(2), Abort]), (BlockLabel_("9"), [MutBorrowLoc(Var_("bitvector")), CopyLoc(Var_("bitlen")), LdU64(1), Sub, Call(ModuleName("1::bit_vector"), FunctionName("shift_left"), []), LdU64(0), StLoc(Var_("i"))]), (BlockLabel_("10"), [CopyLoc(Var_("i")), CopyLoc(Var_("bitlen")), Lt, BrFalse(BlockLabel_("15")), Branch(BlockLabel_("11"))]), (BlockLabel_("11"), [ImmBorrowLoc(Var_("bitvector")), CopyLoc(Var_("i")), Call(ModuleName("1::bit_vector"), FunctionName("is_index_set"), []), Not, BrFalse(BlockLabel_("13")), Branch(BlockLabel_("14"))]), (BlockLabel_("13"), [LdU64(3), Abort]), (BlockLabel_("14"), [MoveLoc(Var_("i")), LdU64(1), Add, StLoc(Var_("i")), Branch(BlockLabel_("10"))]), (BlockLabel_("15"), [Ret])] } }), (FunctionName("test_shift_left_specific_amount_to_unset_bit"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [(Var_("%#1"), Bool), (Var_("bitlen"), U64), (Var_("bitvector"), Struct(QualifiedStructIdent { module: ModuleName("1::bit_vector"), name: StructName("BitVector") }, [])), (Var_("chosen_index"), U64), (Var_("i"), U64), (Var_("shift_amount"), U64)], code: [(BlockLabel_("0"), [LdU64(50), StLoc(Var_("bitlen")), LdU64(24), StLoc(Var_("chosen_index")), LdU64(3), StLoc(Var_("shift_amount")), CopyLoc(Var_("bitlen")), Call(ModuleName("1::bit_vector"), FunctionName("new"), []), StLoc(Var_("bitvector")), LdU64(0), StLoc(Var_("i"))]), (BlockLabel_("1"), [CopyLoc(Var_("i")), CopyLoc(Var_("bitlen")), Lt, BrFalse(BlockLabel_("3")), Branch(BlockLabel_("2"))]), (BlockLabel_("2"), [MutBorrowLoc(Var_("bitvector")), CopyLoc(Var_("i")), Call(ModuleName("1::bit_vector"), FunctionName("set"), []), MoveLoc(Var_("i")), LdU64(1), Add, StLoc(Var_("i")), Branch(BlockLabel_("1"))]), (BlockLabel_("3"), [MutBorrowLoc(Var_("bitvector")), CopyLoc(Var_("chosen_index")), Call(ModuleName("1::bit_vector"), FunctionName("unset"), []), ImmBorrowLoc(Var_("bitvector")), CopyLoc(Var_("chosen_index")), Call(ModuleName("1::bit_vector"), FunctionName("is_index_set"), []), Not, BrFalse(BlockLabel_("5")), Branch(BlockLabel_("6"))]), (BlockLabel_("5"), [LdU64(0), Abort]), (BlockLabel_("6"), [MutBorrowLoc(Var_("bitvector")), CopyLoc(Var_("shift_amount")), Call(ModuleName("1::bit_vector"), FunctionName("shift_left"), []), LdU64(0), StLoc(Var_("i"))]), (BlockLabel_("7"), [CopyLoc(Var_("i")), CopyLoc(Var_("bitlen")), Lt, BrFalse(BlockLabel_("21")), Branch(BlockLabel_("8"))]), (BlockLabel_("8"), [CopyLoc(Var_("i")), CopyLoc(Var_("chosen_index")), CopyLoc(Var_("shift_amount")), Sub, Eq, BrFalse(BlockLabel_("10"))]), (BlockLabel_("9"), [LdTrue, StLoc(Var_("%#1")), Branch(BlockLabel_("11"))]), (BlockLabel_("10"), [CopyLoc(Var_("i")), CopyLoc(Var_("bitlen")), CopyLoc(Var_("shift_amount")), Sub, Ge, StLoc(Var_("%#1"))]), (BlockLabel_("11"), [MoveLoc(Var_("%#1")), BrFalse(BlockLabel_("16"))]), (BlockLabel_("12"), [ImmBorrowLoc(Var_("bitvector")), CopyLoc(Var_("i")), Call(ModuleName("1::bit_vector"), FunctionName("is_index_set"), []), Not, BrFalse(BlockLabel_("14")), Branch(BlockLabel_("15"))]), (BlockLabel_("14"), [LdU64(1), Abort]), (BlockLabel_("15"), [Branch(BlockLabel_("20"))]), (BlockLabel_("16"), [ImmBorrowLoc(Var_("bitvector")), CopyLoc(Var_("i")), Call(ModuleName("1::bit_vector"), FunctionName("is_index_set"), []), BrFalse(BlockLabel_("18")), Branch(BlockLabel_("20"))]), (BlockLabel_("18"), [LdU64(2), Abort]), (BlockLabel_("20"), [MoveLoc(Var_("i")), LdU64(1), Add, StLoc(Var_("i")), Branch(BlockLabel_("7"))]), (BlockLabel_("21"), [Ret])] } }), (FunctionName("unit_test_poison"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [], code: [(BlockLabel_("0"), [LdU64(0), Call(ModuleName("1::unit_test"), FunctionName("create_signers_for_testing"), []), Pop, Ret])] } }), (FunctionName("unset_bit_out_of_bounds"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [(Var_("bitvector"), Struct(QualifiedStructIdent { module: ModuleName("1::bit_vector"), name: StructName("BitVector") }, []))], code: [(BlockLabel_("0"), [Call(ModuleName("1::bit_vector"), FunctionName("word_size"), []), Call(ModuleName("1::bit_vector"), FunctionName("new"), []), StLoc(Var_("bitvector")), MutBorrowLoc(Var_("bitvector")), Call(ModuleName("1::bit_vector"), FunctionName("word_size"), []), Call(ModuleName("1::bit_vector"), FunctionName("unset"), []), Ret])] } })], synthetics: [] }
IS this part executed?3 in module in translate.rs []
IS this part executed?1 in module in translate.rs
IS this part executed?2 in module in translate.rs
IS this part executed?1 in compile_module function in compiler.rs
yj ModuleDefinition { loc: Loc { file_hash: "83b7d7329f460ecbcdcf9756cc2af17d1a80c4a2e965b42140f4e56421f13d01", start: 1332, end: 1337 }, identifier: ModuleIdent { name: ModuleName("error"), address: 00000000000000000000000000000001 }, friends: [], imports: [ImportDefinition { ident: ModuleIdent { name: ModuleName("unit_test"), address: 00000000000000000000000000000001 }, alias: ModuleName("1::unit_test") }], explicit_dependency_declarations: [ModuleDependency { name: ModuleName("1::unit_test"), structs: [], functions: [FunctionDependency { name: FunctionName("create_signers_for_testing"), signature: FunctionSignature { formals: [(Var_("num_signers"), U64)], return_type: [Vector(Signer)], type_formals: [] } }] }], structs: [], constants: [Constant { name: ConstantName("ABORTED"), signature: U64, value: U64(7) }, Constant { name: ConstantName("ALREADY_EXISTS"), signature: U64, value: U64(8) }, Constant { name: ConstantName("CANCELLED"), signature: U64, value: U64(10) }, Constant { name: ConstantName("INTERNAL"), signature: U64, value: U64(11) }, Constant { name: ConstantName("INVALID_ARGUMENT"), signature: U64, value: U64(1) }, Constant { name: ConstantName("INVALID_STATE"), signature: U64, value: U64(3) }, Constant { name: ConstantName("NOT_FOUND"), signature: U64, value: U64(6) }, Constant { name: ConstantName("NOT_IMPLEMENTED"), signature: U64, value: U64(12) }, Constant { name: ConstantName("OUT_OF_RANGE"), signature: U64, value: U64(2) }, Constant { name: ConstantName("PERMISSION_DENIED"), signature: U64, value: U64(5) }, Constant { name: ConstantName("RESOURCE_EXHAUSTED"), signature: U64, value: U64(9) }, Constant { name: ConstantName("UNAUTHENTICATED"), signature: U64, value: U64(4) }, Constant { name: ConstantName("UNAVAILABLE"), signature: U64, value: U64(13) }], functions: [(FunctionName("aborted"), Function_ { visibility: Public, is_entry: false, signature: FunctionSignature { formals: [(Var_("r"), U64)], return_type: [U64], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [], code: [(BlockLabel_("0"), [LdNamedConst(ConstantName("ABORTED")), MoveLoc(Var_("r")), Call(ModuleName("Self"), FunctionName("canonical"), []), Ret])] } }), (FunctionName("already_exists"), Function_ { visibility: Public, is_entry: false, signature: FunctionSignature { formals: [(Var_("r"), U64)], return_type: [U64], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [], code: [(BlockLabel_("0"), [LdNamedConst(ConstantName("ALREADY_EXISTS")), MoveLoc(Var_("r")), Call(ModuleName("Self"), FunctionName("canonical"), []), Ret])] } }), (FunctionName("canonical"), Function_ { visibility: Public, is_entry: false, signature: FunctionSignature { formals: [(Var_("category"), U64), (Var_("reason"), U64)], return_type: [U64], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [], code: [(BlockLabel_("0"), [MoveLoc(Var_("category")), LdU8(16), Shl, MoveLoc(Var_("reason")), Add, Ret])] } }), (FunctionName("internal"), Function_ { visibility: Public, is_entry: false, signature: FunctionSignature { formals: [(Var_("r"), U64)], return_type: [U64], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [], code: [(BlockLabel_("0"), [LdNamedConst(ConstantName("INTERNAL")), MoveLoc(Var_("r")), Call(ModuleName("Self"), FunctionName("canonical"), []), Ret])] } }), (FunctionName("invalid_argument"), Function_ { visibility: Public, is_entry: false, signature: FunctionSignature { formals: [(Var_("r"), U64)], return_type: [U64], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [], code: [(BlockLabel_("0"), [LdNamedConst(ConstantName("INVALID_ARGUMENT")), MoveLoc(Var_("r")), Call(ModuleName("Self"), FunctionName("canonical"), []), Ret])] } }), (FunctionName("invalid_state"), Function_ { visibility: Public, is_entry: false, signature: FunctionSignature { formals: [(Var_("r"), U64)], return_type: [U64], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [], code: [(BlockLabel_("0"), [LdNamedConst(ConstantName("INVALID_STATE")), MoveLoc(Var_("r")), Call(ModuleName("Self"), FunctionName("canonical"), []), Ret])] } }), (FunctionName("not_found"), Function_ { visibility: Public, is_entry: false, signature: FunctionSignature { formals: [(Var_("r"), U64)], return_type: [U64], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [], code: [(BlockLabel_("0"), [LdNamedConst(ConstantName("NOT_FOUND")), MoveLoc(Var_("r")), Call(ModuleName("Self"), FunctionName("canonical"), []), Ret])] } }), (FunctionName("not_implemented"), Function_ { visibility: Public, is_entry: false, signature: FunctionSignature { formals: [(Var_("r"), U64)], return_type: [U64], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [], code: [(BlockLabel_("0"), [LdNamedConst(ConstantName("NOT_IMPLEMENTED")), MoveLoc(Var_("r")), Call(ModuleName("Self"), FunctionName("canonical"), []), Ret])] } }), (FunctionName("out_of_range"), Function_ { visibility: Public, is_entry: false, signature: FunctionSignature { formals: [(Var_("r"), U64)], return_type: [U64], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [], code: [(BlockLabel_("0"), [LdNamedConst(ConstantName("OUT_OF_RANGE")), MoveLoc(Var_("r")), Call(ModuleName("Self"), FunctionName("canonical"), []), Ret])] } }), (FunctionName("permission_denied"), Function_ { visibility: Public, is_entry: false, signature: FunctionSignature { formals: [(Var_("r"), U64)], return_type: [U64], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [], code: [(BlockLabel_("0"), [LdNamedConst(ConstantName("PERMISSION_DENIED")), MoveLoc(Var_("r")), Call(ModuleName("Self"), FunctionName("canonical"), []), Ret])] } }), (FunctionName("resource_exhausted"), Function_ { visibility: Public, is_entry: false, signature: FunctionSignature { formals: [(Var_("r"), U64)], return_type: [U64], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [], code: [(BlockLabel_("0"), [LdNamedConst(ConstantName("RESOURCE_EXHAUSTED")), MoveLoc(Var_("r")), Call(ModuleName("Self"), FunctionName("canonical"), []), Ret])] } }), (FunctionName("unauthenticated"), Function_ { visibility: Public, is_entry: false, signature: FunctionSignature { formals: [(Var_("r"), U64)], return_type: [U64], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [], code: [(BlockLabel_("0"), [LdNamedConst(ConstantName("UNAUTHENTICATED")), MoveLoc(Var_("r")), Call(ModuleName("Self"), FunctionName("canonical"), []), Ret])] } }), (FunctionName("unavailable"), Function_ { visibility: Public, is_entry: false, signature: FunctionSignature { formals: [(Var_("r"), U64)], return_type: [U64], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [], code: [(BlockLabel_("0"), [LdNamedConst(ConstantName("UNAVAILABLE")), MoveLoc(Var_("r")), Call(ModuleName("Self"), FunctionName("canonical"), []), Ret])] } }), (FunctionName("unit_test_poison"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [], code: [(BlockLabel_("0"), [LdU64(0), Call(ModuleName("1::unit_test"), FunctionName("create_signers_for_testing"), []), Pop, Ret])] } })], synthetics: [] }
IS this part executed?3 in module in translate.rs []
IS this part executed?1 in module in translate.rs
IS this part executed?2 in module in translate.rs
IS this part executed?1 in compile_module function in compiler.rs
yj ModuleDefinition { loc: Loc { file_hash: "f0bf5829b848417fdea0d522db8dfa7f53534839763d2b9cb43b6cb4211ecc08", start: 113, end: 126 }, identifier: ModuleIdent { name: ModuleName("fixed_point32"), address: 00000000000000000000000000000001 }, friends: [], imports: [ImportDefinition { ident: ModuleIdent { name: ModuleName("unit_test"), address: 00000000000000000000000000000001 }, alias: ModuleName("1::unit_test") }], explicit_dependency_declarations: [ModuleDependency { name: ModuleName("1::unit_test"), structs: [], functions: [FunctionDependency { name: FunctionName("create_signers_for_testing"), signature: FunctionSignature { formals: [(Var_("num_signers"), U64)], return_type: [Vector(Signer)], type_formals: [] } }] }], structs: [StructDefinition_ { abilities: {Copy, Drop, Store}, name: StructName("FixedPoint32"), type_formals: [], fields: Move { fields: [(Field_("value"), U64)] }, invariants: [] }], constants: [Constant { name: ConstantName("EDENOMINATOR"), signature: U64, value: U64(65537) }, Constant { name: ConstantName("EDIVISION"), signature: U64, value: U64(131074) }, Constant { name: ConstantName("EDIVISION_BY_ZERO"), signature: U64, value: U64(65540) }, Constant { name: ConstantName("EMULTIPLICATION"), signature: U64, value: U64(131075) }, Constant { name: ConstantName("ERATIO_OUT_OF_RANGE"), signature: U64, value: U64(131077) }, Constant { name: ConstantName("MAX_U64"), signature: U128, value: U128(18446744073709551615) }], functions: [(FunctionName("ceil"), Function_ { visibility: Public, is_entry: false, signature: FunctionSignature { formals: [(Var_("num"), Struct(QualifiedStructIdent { module: ModuleName("Self"), name: StructName("FixedPoint32") }, []))], return_type: [U64], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [(Var_("floored_num"), U64)], code: [(BlockLabel_("0"), [CopyLoc(Var_("num")), Call(ModuleName("Self"), FunctionName("floor"), []), LdU8(32), Shl, StLoc(Var_("floored_num")), ImmBorrowLoc(Var_("num")), ImmBorrowField(StructName("FixedPoint32"), [], Field_("value")), ReadRef, CopyLoc(Var_("floored_num")), Eq, BrFalse(BlockLabel_("3"))]), (BlockLabel_("1"), [MoveLoc(Var_("floored_num")), LdU8(32), Shr, Ret]), (BlockLabel_("3"), [MoveLoc(Var_("floored_num")), CastU128, LdU128(4294967296), Add, LdU8(32), Shr, CastU64, Ret])] } }), (FunctionName("create_from_rational"), Function_ { visibility: Public, is_entry: false, signature: FunctionSignature { formals: [(Var_("numerator"), U64), (Var_("denominator"), U64)], return_type: [Struct(QualifiedStructIdent { module: ModuleName("Self"), name: StructName("FixedPoint32") }, [])], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [(Var_("%#1"), Bool), (Var_("quotient"), U128), (Var_("scaled_denominator"), U128), (Var_("scaled_numerator"), U128)], code: [(BlockLabel_("0"), [CopyLoc(Var_("numerator")), CastU128, LdU8(64), Shl, StLoc(Var_("scaled_numerator")), MoveLoc(Var_("denominator")), CastU128, LdU8(32), Shl, StLoc(Var_("scaled_denominator")), CopyLoc(Var_("scaled_denominator")), LdU128(0), Neq, BrFalse(BlockLabel_("2")), Branch(BlockLabel_("3"))]), (BlockLabel_("2"), [LdNamedConst(ConstantName("EDENOMINATOR")), Abort]), (BlockLabel_("3"), [MoveLoc(Var_("scaled_numerator")), MoveLoc(Var_("scaled_denominator")), Div, StLoc(Var_("quotient")), CopyLoc(Var_("quotient")), LdU128(0), Neq, BrFalse(BlockLabel_("5"))]), (BlockLabel_("4"), [LdTrue, StLoc(Var_("%#1")), Branch(BlockLabel_("6"))]), (BlockLabel_("5"), [MoveLoc(Var_("numerator")), LdU64(0), Eq, StLoc(Var_("%#1"))]), (BlockLabel_("6"), [MoveLoc(Var_("%#1")), BrFalse(BlockLabel_("8")), Branch(BlockLabel_("9"))]), (BlockLabel_("8"), [LdNamedConst(ConstantName("ERATIO_OUT_OF_RANGE")), Abort]), (BlockLabel_("9"), [CopyLoc(Var_("quotient")), LdNamedConst(ConstantName("MAX_U64")), Le, BrFalse(BlockLabel_("11")), Branch(BlockLabel_("12"))]), (BlockLabel_("11"), [LdNamedConst(ConstantName("ERATIO_OUT_OF_RANGE")), Abort]), (BlockLabel_("12"), [MoveLoc(Var_("quotient")), CastU64, Pack(StructName("FixedPoint32"), []), Ret])] } }), (FunctionName("create_from_raw_value"), Function_ { visibility: Public, is_entry: false, signature: FunctionSignature { formals: [(Var_("value"), U64)], return_type: [Struct(QualifiedStructIdent { module: ModuleName("Self"), name: StructName("FixedPoint32") }, [])], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [], code: [(BlockLabel_("0"), [MoveLoc(Var_("value")), Pack(StructName("FixedPoint32"), []), Ret])] } }), (FunctionName("create_from_u64"), Function_ { visibility: Public, is_entry: false, signature: FunctionSignature { formals: [(Var_("val"), U64)], return_type: [Struct(QualifiedStructIdent { module: ModuleName("Self"), name: StructName("FixedPoint32") }, [])], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [(Var_("value"), U128)], code: [(BlockLabel_("0"), [MoveLoc(Var_("val")), CastU128, LdU8(32), Shl, StLoc(Var_("value")), CopyLoc(Var_("value")), LdNamedConst(ConstantName("MAX_U64")), Le, BrFalse(BlockLabel_("2")), Branch(BlockLabel_("3"))]), (BlockLabel_("2"), [LdNamedConst(ConstantName("ERATIO_OUT_OF_RANGE")), Abort]), (BlockLabel_("3"), [MoveLoc(Var_("value")), CastU64, Pack(StructName("FixedPoint32"), []), Ret])] } }), (FunctionName("divide_u64"), Function_ { visibility: Public, is_entry: false, signature: FunctionSignature { formals: [(Var_("val"), U64), (Var_("divisor"), Struct(QualifiedStructIdent { module: ModuleName("Self"), name: StructName("FixedPoint32") }, []))], return_type: [U64], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [(Var_("quotient"), U128)], code: [(BlockLabel_("0"), [ImmBorrowLoc(Var_("divisor")), ImmBorrowField(StructName("FixedPoint32"), [], Field_("value")), ReadRef, LdU64(0), Neq, BrFalse(BlockLabel_("2")), Branch(BlockLabel_("3"))]), (BlockLabel_("2"), [LdNamedConst(ConstantName("EDIVISION_BY_ZERO")), Abort]), (BlockLabel_("3"), [MoveLoc(Var_("val")), CastU128, LdU8(32), Shl, ImmBorrowLoc(Var_("divisor")), ImmBorrowField(StructName("FixedPoint32"), [], Field_("value")), ReadRef, CastU128, Div, StLoc(Var_("quotient")), CopyLoc(Var_("quotient")), LdNamedConst(ConstantName("MAX_U64")), Le, BrFalse(BlockLabel_("5")), Branch(BlockLabel_("6"))]), (BlockLabel_("5"), [LdNamedConst(ConstantName("EDIVISION")), Abort]), (BlockLabel_("6"), [MoveLoc(Var_("quotient")), CastU64, Ret])] } }), (FunctionName("floor"), Function_ { visibility: Public, is_entry: false, signature: FunctionSignature { formals: [(Var_("num"), Struct(QualifiedStructIdent { module: ModuleName("Self"), name: StructName("FixedPoint32") }, []))], return_type: [U64], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [], code: [(BlockLabel_("0"), [ImmBorrowLoc(Var_("num")), ImmBorrowField(StructName("FixedPoint32"), [], Field_("value")), ReadRef, LdU8(32), Shr, Ret])] } }), (FunctionName("get_raw_value"), Function_ { visibility: Public, is_entry: false, signature: FunctionSignature { formals: [(Var_("num"), Struct(QualifiedStructIdent { module: ModuleName("Self"), name: StructName("FixedPoint32") }, []))], return_type: [U64], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [], code: [(BlockLabel_("0"), [ImmBorrowLoc(Var_("num")), ImmBorrowField(StructName("FixedPoint32"), [], Field_("value")), ReadRef, Ret])] } }), (FunctionName("is_zero"), Function_ { visibility: Public, is_entry: false, signature: FunctionSignature { formals: [(Var_("num"), Struct(QualifiedStructIdent { module: ModuleName("Self"), name: StructName("FixedPoint32") }, []))], return_type: [Bool], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [], code: [(BlockLabel_("0"), [ImmBorrowLoc(Var_("num")), ImmBorrowField(StructName("FixedPoint32"), [], Field_("value")), ReadRef, LdU64(0), Eq, Ret])] } }), (FunctionName("max"), Function_ { visibility: Public, is_entry: false, signature: FunctionSignature { formals: [(Var_("num1"), Struct(QualifiedStructIdent { module: ModuleName("Self"), name: StructName("FixedPoint32") }, [])), (Var_("num2"), Struct(QualifiedStructIdent { module: ModuleName("Self"), name: StructName("FixedPoint32") }, []))], return_type: [Struct(QualifiedStructIdent { module: ModuleName("Self"), name: StructName("FixedPoint32") }, [])], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [(Var_("%#1"), Struct(QualifiedStructIdent { module: ModuleName("Self"), name: StructName("FixedPoint32") }, []))], code: [(BlockLabel_("0"), [ImmBorrowLoc(Var_("num1")), ImmBorrowField(StructName("FixedPoint32"), [], Field_("value")), ReadRef, ImmBorrowLoc(Var_("num2")), ImmBorrowField(StructName("FixedPoint32"), [], Field_("value")), ReadRef, Gt, BrFalse(BlockLabel_("2"))]), (BlockLabel_("1"), [MoveLoc(Var_("num1")), StLoc(Var_("%#1")), Branch(BlockLabel_("3"))]), (BlockLabel_("2"), [MoveLoc(Var_("num2")), StLoc(Var_("%#1"))]), (BlockLabel_("3"), [MoveLoc(Var_("%#1")), Ret])] } }), (FunctionName("min"), Function_ { visibility: Public, is_entry: false, signature: FunctionSignature { formals: [(Var_("num1"), Struct(QualifiedStructIdent { module: ModuleName("Self"), name: StructName("FixedPoint32") }, [])), (Var_("num2"), Struct(QualifiedStructIdent { module: ModuleName("Self"), name: StructName("FixedPoint32") }, []))], return_type: [Struct(QualifiedStructIdent { module: ModuleName("Self"), name: StructName("FixedPoint32") }, [])], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [(Var_("%#1"), Struct(QualifiedStructIdent { module: ModuleName("Self"), name: StructName("FixedPoint32") }, []))], code: [(BlockLabel_("0"), [ImmBorrowLoc(Var_("num1")), ImmBorrowField(StructName("FixedPoint32"), [], Field_("value")), ReadRef, ImmBorrowLoc(Var_("num2")), ImmBorrowField(StructName("FixedPoint32"), [], Field_("value")), ReadRef, Lt, BrFalse(BlockLabel_("2"))]), (BlockLabel_("1"), [MoveLoc(Var_("num1")), StLoc(Var_("%#1")), Branch(BlockLabel_("3"))]), (BlockLabel_("2"), [MoveLoc(Var_("num2")), StLoc(Var_("%#1"))]), (BlockLabel_("3"), [MoveLoc(Var_("%#1")), Ret])] } }), (FunctionName("multiply_u64"), Function_ { visibility: Public, is_entry: false, signature: FunctionSignature { formals: [(Var_("val"), U64), (Var_("multiplier"), Struct(QualifiedStructIdent { module: ModuleName("Self"), name: StructName("FixedPoint32") }, []))], return_type: [U64], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [(Var_("product"), U128)], code: [(BlockLabel_("0"), [MoveLoc(Var_("val")), CastU128, ImmBorrowLoc(Var_("multiplier")), ImmBorrowField(StructName("FixedPoint32"), [], Field_("value")), ReadRef, CastU128, Mul, LdU8(32), Shr, StLoc(Var_("product")), CopyLoc(Var_("product")), LdNamedConst(ConstantName("MAX_U64")), Le, BrFalse(BlockLabel_("2")), Branch(BlockLabel_("3"))]), (BlockLabel_("2"), [LdNamedConst(ConstantName("EMULTIPLICATION")), Abort]), (BlockLabel_("3"), [MoveLoc(Var_("product")), CastU64, Ret])] } }), (FunctionName("round"), Function_ { visibility: Public, is_entry: false, signature: FunctionSignature { formals: [(Var_("num"), Struct(QualifiedStructIdent { module: ModuleName("Self"), name: StructName("FixedPoint32") }, []))], return_type: [U64], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [(Var_("%#1"), U64), (Var_("boundary"), U64), (Var_("floored_num"), U64)], code: [(BlockLabel_("0"), [CopyLoc(Var_("num")), Call(ModuleName("Self"), FunctionName("floor"), []), LdU8(32), Shl, StLoc(Var_("floored_num")), CopyLoc(Var_("floored_num")), LdU64(2147483648), Add, StLoc(Var_("boundary")), ImmBorrowLoc(Var_("num")), ImmBorrowField(StructName("FixedPoint32"), [], Field_("value")), ReadRef, MoveLoc(Var_("boundary")), Lt, BrFalse(BlockLabel_("2"))]), (BlockLabel_("1"), [MoveLoc(Var_("floored_num")), LdU8(32), Shr, StLoc(Var_("%#1")), Branch(BlockLabel_("3"))]), (BlockLabel_("2"), [MoveLoc(Var_("num")), Call(ModuleName("Self"), FunctionName("ceil"), []), StLoc(Var_("%#1"))]), (BlockLabel_("3"), [MoveLoc(Var_("%#1")), Ret])] } }), (FunctionName("unit_test_poison"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [], code: [(BlockLabel_("0"), [LdU64(0), Call(ModuleName("1::unit_test"), FunctionName("create_signers_for_testing"), []), Pop, Ret])] } })], synthetics: [] }
IS this part executed?3 in module in translate.rs []
IS this part executed?1 in module in translate.rs
IS this part executed?2 in module in translate.rs
IS this part executed?1 in compile_module function in compiler.rs
yj ModuleDefinition { loc: Loc { file_hash: "787b73c9a92db45b692c24a207ebef89beaaaa06c0d6c2ec2b6a3dde99bb55b7", start: 25, end: 44 }, identifier: ModuleIdent { name: ModuleName("fixed_point32_tests"), address: 00000000000000000000000000000001 }, friends: [], imports: [ImportDefinition { ident: ModuleIdent { name: ModuleName("fixed_point32"), address: 00000000000000000000000000000001 }, alias: ModuleName("1::fixed_point32") }, ImportDefinition { ident: ModuleIdent { name: ModuleName("unit_test"), address: 00000000000000000000000000000001 }, alias: ModuleName("1::unit_test") }], explicit_dependency_declarations: [ModuleDependency { name: ModuleName("1::unit_test"), structs: [], functions: [FunctionDependency { name: FunctionName("create_signers_for_testing"), signature: FunctionSignature { formals: [(Var_("num_signers"), U64)], return_type: [Vector(Signer)], type_formals: [] } }] }, ModuleDependency { name: ModuleName("1::fixed_point32"), structs: [StructDependency { abilities: {Copy, Drop, Store}, name: StructName("FixedPoint32"), type_formals: [] }], functions: [FunctionDependency { name: FunctionName("ceil"), signature: FunctionSignature { formals: [(Var_("num"), Struct(QualifiedStructIdent { module: ModuleName("1::fixed_point32"), name: StructName("FixedPoint32") }, []))], return_type: [U64], type_formals: [] } }, FunctionDependency { name: FunctionName("create_from_rational"), signature: FunctionSignature { formals: [(Var_("numerator"), U64), (Var_("denominator"), U64)], return_type: [Struct(QualifiedStructIdent { module: ModuleName("1::fixed_point32"), name: StructName("FixedPoint32") }, [])], type_formals: [] } }, FunctionDependency { name: FunctionName("create_from_raw_value"), signature: FunctionSignature { formals: [(Var_("value"), U64)], return_type: [Struct(QualifiedStructIdent { module: ModuleName("1::fixed_point32"), name: StructName("FixedPoint32") }, [])], type_formals: [] } }, FunctionDependency { name: FunctionName("create_from_u64"), signature: FunctionSignature { formals: [(Var_("val"), U64)], return_type: [Struct(QualifiedStructIdent { module: ModuleName("1::fixed_point32"), name: StructName("FixedPoint32") }, [])], type_formals: [] } }, FunctionDependency { name: FunctionName("divide_u64"), signature: FunctionSignature { formals: [(Var_("val"), U64), (Var_("divisor"), Struct(QualifiedStructIdent { module: ModuleName("1::fixed_point32"), name: StructName("FixedPoint32") }, []))], return_type: [U64], type_formals: [] } }, FunctionDependency { name: FunctionName("floor"), signature: FunctionSignature { formals: [(Var_("num"), Struct(QualifiedStructIdent { module: ModuleName("1::fixed_point32"), name: StructName("FixedPoint32") }, []))], return_type: [U64], type_formals: [] } }, FunctionDependency { name: FunctionName("get_raw_value"), signature: FunctionSignature { formals: [(Var_("num"), Struct(QualifiedStructIdent { module: ModuleName("1::fixed_point32"), name: StructName("FixedPoint32") }, []))], return_type: [U64], type_formals: [] } }, FunctionDependency { name: FunctionName("is_zero"), signature: FunctionSignature { formals: [(Var_("num"), Struct(QualifiedStructIdent { module: ModuleName("1::fixed_point32"), name: StructName("FixedPoint32") }, []))], return_type: [Bool], type_formals: [] } }, FunctionDependency { name: FunctionName("max"), signature: FunctionSignature { formals: [(Var_("num1"), Struct(QualifiedStructIdent { module: ModuleName("1::fixed_point32"), name: StructName("FixedPoint32") }, [])), (Var_("num2"), Struct(QualifiedStructIdent { module: ModuleName("1::fixed_point32"), name: StructName("FixedPoint32") }, []))], return_type: [Struct(QualifiedStructIdent { module: ModuleName("1::fixed_point32"), name: StructName("FixedPoint32") }, [])], type_formals: [] } }, FunctionDependency { name: FunctionName("min"), signature: FunctionSignature { formals: [(Var_("num1"), Struct(QualifiedStructIdent { module: ModuleName("1::fixed_point32"), name: StructName("FixedPoint32") }, [])), (Var_("num2"), Struct(QualifiedStructIdent { module: ModuleName("1::fixed_point32"), name: StructName("FixedPoint32") }, []))], return_type: [Struct(QualifiedStructIdent { module: ModuleName("1::fixed_point32"), name: StructName("FixedPoint32") }, [])], type_formals: [] } }, FunctionDependency { name: FunctionName("multiply_u64"), signature: FunctionSignature { formals: [(Var_("val"), U64), (Var_("multiplier"), Struct(QualifiedStructIdent { module: ModuleName("1::fixed_point32"), name: StructName("FixedPoint32") }, []))], return_type: [U64], type_formals: [] } }, FunctionDependency { name: FunctionName("round"), signature: FunctionSignature { formals: [(Var_("num"), Struct(QualifiedStructIdent { module: ModuleName("1::fixed_point32"), name: StructName("FixedPoint32") }, []))], return_type: [U64], type_formals: [] } }] }], structs: [], constants: [], functions: [(FunctionName("ceil_can_round_up_correctly"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [], code: [(BlockLabel_("0"), [LdU64(1), LdU64(2), Call(ModuleName("1::fixed_point32"), FunctionName("create_from_rational"), []), Call(ModuleName("1::fixed_point32"), FunctionName("ceil"), []), LdU64(1), Eq, BrFalse(BlockLabel_("2")), Branch(BlockLabel_("3"))]), (BlockLabel_("2"), [LdU64(0), Abort]), (BlockLabel_("3"), [Ret])] } }), (FunctionName("ceil_will_not_change_if_number_already_integer"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [], code: [(BlockLabel_("0"), [LdU64(1), LdU64(1), Call(ModuleName("1::fixed_point32"), FunctionName("create_from_rational"), []), Call(ModuleName("1::fixed_point32"), FunctionName("ceil"), []), LdU64(1), Eq, BrFalse(BlockLabel_("2")), Branch(BlockLabel_("3"))]), (BlockLabel_("2"), [LdU64(0), Abort]), (BlockLabel_("3"), [Ret])] } }), (FunctionName("create_div_zero"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [], code: [(BlockLabel_("0"), [LdU64(2), LdU64(0), Call(ModuleName("1::fixed_point32"), FunctionName("create_from_rational"), []), Pop, Ret])] } }), (FunctionName("create_from_rational_max_numerator_denominator"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [], code: [(BlockLabel_("0"), [LdU64(18446744073709551615), LdU64(18446744073709551615), Call(ModuleName("1::fixed_point32"), FunctionName("create_from_rational"), []), Call(ModuleName("1::fixed_point32"), FunctionName("get_raw_value"), []), LdU64(4294967296), Eq, BrFalse(BlockLabel_("2")), Branch(BlockLabel_("3"))]), (BlockLabel_("2"), [LdU64(0), Abort]), (BlockLabel_("3"), [Ret])] } }), (FunctionName("create_from_u64_create_correct_fixed_point_number"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [], code: [(BlockLabel_("0"), [LdU64(1), Call(ModuleName("1::fixed_point32"), FunctionName("create_from_u64"), []), Call(ModuleName("1::fixed_point32"), FunctionName("get_raw_value"), []), LdU64(4294967296), Eq, BrFalse(BlockLabel_("2")), Branch(BlockLabel_("3"))]), (BlockLabel_("2"), [LdU64(0), Abort]), (BlockLabel_("3"), [Ret])] } }), (FunctionName("create_from_u64_throw_error_when_number_too_large"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [], code: [(BlockLabel_("0"), [LdU64(4294967296), Call(ModuleName("1::fixed_point32"), FunctionName("create_from_u64"), []), Pop, Ret])] } }), (FunctionName("create_overflow"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [], code: [(BlockLabel_("0"), [LdU64(4294967296), LdU64(1), Call(ModuleName("1::fixed_point32"), FunctionName("create_from_rational"), []), Pop, Ret])] } }), (FunctionName("create_underflow"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [], code: [(BlockLabel_("0"), [LdU64(1), LdU64(8589934592), Call(ModuleName("1::fixed_point32"), FunctionName("create_from_rational"), []), Pop, Ret])] } }), (FunctionName("create_zero"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [], code: [(BlockLabel_("0"), [LdU64(0), LdU64(1), Call(ModuleName("1::fixed_point32"), FunctionName("create_from_rational"), []), Call(ModuleName("1::fixed_point32"), FunctionName("is_zero"), []), BrFalse(BlockLabel_("2")), Branch(BlockLabel_("3"))]), (BlockLabel_("2"), [LdU64(0), Abort]), (BlockLabel_("3"), [Ret])] } }), (FunctionName("divide_by_zero"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [(Var_("f"), Struct(QualifiedStructIdent { module: ModuleName("1::fixed_point32"), name: StructName("FixedPoint32") }, []))], code: [(BlockLabel_("0"), [LdU64(0), Call(ModuleName("1::fixed_point32"), FunctionName("create_from_raw_value"), []), StLoc(Var_("f")), LdU64(1), MoveLoc(Var_("f")), Call(ModuleName("1::fixed_point32"), FunctionName("divide_u64"), []), Pop, Ret])] } }), (FunctionName("divide_overflow_large_numerator"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [(Var_("f"), Struct(QualifiedStructIdent { module: ModuleName("1::fixed_point32"), name: StructName("FixedPoint32") }, []))], code: [(BlockLabel_("0"), [LdU64(1), LdU64(2), Call(ModuleName("1::fixed_point32"), FunctionName("create_from_rational"), []), StLoc(Var_("f")), LdU64(18446744073709551615), MoveLoc(Var_("f")), Call(ModuleName("1::fixed_point32"), FunctionName("divide_u64"), []), Pop, Ret])] } }), (FunctionName("divide_overflow_small_divisore"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [(Var_("f"), Struct(QualifiedStructIdent { module: ModuleName("1::fixed_point32"), name: StructName("FixedPoint32") }, []))], code: [(BlockLabel_("0"), [LdU64(1), Call(ModuleName("1::fixed_point32"), FunctionName("create_from_raw_value"), []), StLoc(Var_("f")), LdU64(4294967296), MoveLoc(Var_("f")), Call(ModuleName("1::fixed_point32"), FunctionName("divide_u64"), []), Pop, Ret])] } }), (FunctionName("exact_divide"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [(Var_("f"), Struct(QualifiedStructIdent { module: ModuleName("1::fixed_point32"), name: StructName("FixedPoint32") }, []))], code: [(BlockLabel_("0"), [LdU64(3), LdU64(4), Call(ModuleName("1::fixed_point32"), FunctionName("create_from_rational"), []), StLoc(Var_("f")), LdU64(9), MoveLoc(Var_("f")), Call(ModuleName("1::fixed_point32"), FunctionName("divide_u64"), []), LdU64(12), Eq, BrFalse(BlockLabel_("2")), Branch(BlockLabel_("3"))]), (BlockLabel_("2"), [LdU64(0), Abort]), (BlockLabel_("3"), [Ret])] } }), (FunctionName("exact_multiply"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [(Var_("f"), Struct(QualifiedStructIdent { module: ModuleName("1::fixed_point32"), name: StructName("FixedPoint32") }, []))], code: [(BlockLabel_("0"), [LdU64(3), LdU64(4), Call(ModuleName("1::fixed_point32"), FunctionName("create_from_rational"), []), StLoc(Var_("f")), LdU64(12), MoveLoc(Var_("f")), Call(ModuleName("1::fixed_point32"), FunctionName("multiply_u64"), []), LdU64(9), Eq, BrFalse(BlockLabel_("2")), Branch(BlockLabel_("3"))]), (BlockLabel_("2"), [LdU64(0), Abort]), (BlockLabel_("3"), [Ret])] } }), (FunctionName("floor_can_return_the_correct_number_one"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [], code: [(BlockLabel_("0"), [LdU64(7), LdU64(2), Call(ModuleName("1::fixed_point32"), FunctionName("create_from_rational"), []), Call(ModuleName("1::fixed_point32"), FunctionName("floor"), []), LdU64(3), Eq, BrFalse(BlockLabel_("2")), Branch(BlockLabel_("3"))]), (BlockLabel_("2"), [LdU64(0), Abort]), (BlockLabel_("3"), [Ret])] } }), (FunctionName("floor_can_return_the_correct_number_zero"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [], code: [(BlockLabel_("0"), [LdU64(1), LdU64(2), Call(ModuleName("1::fixed_point32"), FunctionName("create_from_rational"), []), Call(ModuleName("1::fixed_point32"), FunctionName("floor"), []), LdU64(0), Eq, BrFalse(BlockLabel_("2")), Branch(BlockLabel_("3"))]), (BlockLabel_("2"), [LdU64(0), Abort]), (BlockLabel_("3"), [Ret])] } }), (FunctionName("max_can_return_larger_fixed_point_number"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [(Var_("larger_number1"), Struct(QualifiedStructIdent { module: ModuleName("1::fixed_point32"), name: StructName("FixedPoint32") }, [])), (Var_("larger_number2"), Struct(QualifiedStructIdent { module: ModuleName("1::fixed_point32"), name: StructName("FixedPoint32") }, [])), (Var_("one"), Struct(QualifiedStructIdent { module: ModuleName("1::fixed_point32"), name: StructName("FixedPoint32") }, [])), (Var_("two"), Struct(QualifiedStructIdent { module: ModuleName("1::fixed_point32"), name: StructName("FixedPoint32") }, []))], code: [(BlockLabel_("0"), [LdU64(1), LdU64(1), Call(ModuleName("1::fixed_point32"), FunctionName("create_from_rational"), []), StLoc(Var_("one")), LdU64(2), LdU64(1), Call(ModuleName("1::fixed_point32"), FunctionName("create_from_rational"), []), StLoc(Var_("two")), CopyLoc(Var_("one")), CopyLoc(Var_("two")), Call(ModuleName("1::fixed_point32"), FunctionName("max"), []), StLoc(Var_("larger_number1")), MoveLoc(Var_("two")), MoveLoc(Var_("one")), Call(ModuleName("1::fixed_point32"), FunctionName("max"), []), StLoc(Var_("larger_number2")), MoveLoc(Var_("larger_number1")), Call(ModuleName("1::fixed_point32"), FunctionName("get_raw_value"), []), LdU64(8589934592), Eq, BrFalse(BlockLabel_("2")), Branch(BlockLabel_("3"))]), (BlockLabel_("2"), [LdU64(0), Abort]), (BlockLabel_("3"), [MoveLoc(Var_("larger_number2")), Call(ModuleName("1::fixed_point32"), FunctionName("get_raw_value"), []), LdU64(8589934592), Eq, BrFalse(BlockLabel_("5")), Branch(BlockLabel_("6"))]), (BlockLabel_("5"), [LdU64(0), Abort]), (BlockLabel_("6"), [Ret])] } }), (FunctionName("min_can_return_smaller_fixed_point_number"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [(Var_("one"), Struct(QualifiedStructIdent { module: ModuleName("1::fixed_point32"), name: StructName("FixedPoint32") }, [])), (Var_("two"), Struct(QualifiedStructIdent { module: ModuleName("1::fixed_point32"), name: StructName("FixedPoint32") }, []))], code: [(BlockLabel_("0"), [LdU64(1), LdU64(1), Call(ModuleName("1::fixed_point32"), FunctionName("create_from_rational"), []), StLoc(Var_("one")), LdU64(2), LdU64(1), Call(ModuleName("1::fixed_point32"), FunctionName("create_from_rational"), []), StLoc(Var_("two")), CopyLoc(Var_("one")), CopyLoc(Var_("two")), Call(ModuleName("1::fixed_point32"), FunctionName("min"), []), Call(ModuleName("1::fixed_point32"), FunctionName("get_raw_value"), []), LdU64(4294967296), Eq, BrFalse(BlockLabel_("2")), Branch(BlockLabel_("3"))]), (BlockLabel_("2"), [LdU64(0), Abort]), (BlockLabel_("3"), [MoveLoc(Var_("two")), MoveLoc(Var_("one")), Call(ModuleName("1::fixed_point32"), FunctionName("min"), []), Call(ModuleName("1::fixed_point32"), FunctionName("get_raw_value"), []), LdU64(4294967296), Eq, BrFalse(BlockLabel_("5")), Branch(BlockLabel_("6"))]), (BlockLabel_("5"), [LdU64(0), Abort]), (BlockLabel_("6"), [Ret])] } }), (FunctionName("multiply_overflow_large_multiplier"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [(Var_("f"), Struct(QualifiedStructIdent { module: ModuleName("1::fixed_point32"), name: StructName("FixedPoint32") }, []))], code: [(BlockLabel_("0"), [LdU64(18446744073709551615), Call(ModuleName("1::fixed_point32"), FunctionName("create_from_raw_value"), []), StLoc(Var_("f")), LdU64(8589934592), MoveLoc(Var_("f")), Call(ModuleName("1::fixed_point32"), FunctionName("multiply_u64"), []), Pop, Ret])] } }), (FunctionName("multiply_overflow_small_multiplier"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [(Var_("f"), Struct(QualifiedStructIdent { module: ModuleName("1::fixed_point32"), name: StructName("FixedPoint32") }, []))], code: [(BlockLabel_("0"), [LdU64(3), LdU64(2), Call(ModuleName("1::fixed_point32"), FunctionName("create_from_rational"), []), StLoc(Var_("f")), LdU64(18446744073709551615), MoveLoc(Var_("f")), Call(ModuleName("1::fixed_point32"), FunctionName("multiply_u64"), []), Pop, Ret])] } }), (FunctionName("multiply_truncates"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [(Var_("f"), Struct(QualifiedStructIdent { module: ModuleName("1::fixed_point32"), name: StructName("FixedPoint32") }, [])), (Var_("f#1"), Struct(QualifiedStructIdent { module: ModuleName("1::fixed_point32"), name: StructName("FixedPoint32") }, []))], code: [(BlockLabel_("0"), [LdU64(1), LdU64(3), Call(ModuleName("1::fixed_point32"), FunctionName("create_from_rational"), []), StLoc(Var_("f")), LdU64(9), CopyLoc(Var_("f")), Call(ModuleName("1::fixed_point32"), FunctionName("multiply_u64"), []), LdU64(2), Eq, BrFalse(BlockLabel_("2")), Branch(BlockLabel_("3"))]), (BlockLabel_("2"), [LdU64(0), Abort]), (BlockLabel_("3"), [MoveLoc(Var_("f")), Call(ModuleName("1::fixed_point32"), FunctionName("get_raw_value"), []), LdU64(1), Add, Call(ModuleName("1::fixed_point32"), FunctionName("create_from_raw_value"), []), StLoc(Var_("f#1")), LdU64(9), MoveLoc(Var_("f#1")), Call(ModuleName("1::fixed_point32"), FunctionName("multiply_u64"), []), LdU64(3), Eq, BrFalse(BlockLabel_("5")), Branch(BlockLabel_("6"))]), (BlockLabel_("5"), [LdU64(1), Abort]), (BlockLabel_("6"), [Ret])] } }), (FunctionName("round_can_round_down_correctly"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [], code: [(BlockLabel_("0"), [LdU64(499), LdU64(1000), Call(ModuleName("1::fixed_point32"), FunctionName("create_from_rational"), []), Call(ModuleName("1::fixed_point32"), FunctionName("round"), []), LdU64(0), Eq, BrFalse(BlockLabel_("2")), Branch(BlockLabel_("3"))]), (BlockLabel_("2"), [LdU64(0), Abort]), (BlockLabel_("3"), [Ret])] } }), (FunctionName("round_can_round_up_correctly"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [], code: [(BlockLabel_("0"), [LdU64(1), LdU64(2), Call(ModuleName("1::fixed_point32"), FunctionName("create_from_rational"), []), Call(ModuleName("1::fixed_point32"), FunctionName("round"), []), LdU64(1), Eq, BrFalse(BlockLabel_("2")), Branch(BlockLabel_("3"))]), (BlockLabel_("2"), [LdU64(0), Abort]), (BlockLabel_("3"), [Ret])] } }), (FunctionName("unit_test_poison"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [], code: [(BlockLabel_("0"), [LdU64(0), Call(ModuleName("1::unit_test"), FunctionName("create_signers_for_testing"), []), Pop, Ret])] } })], synthetics: [] }
IS this part executed?3 in module in translate.rs []
IS this part executed?1 in module in translate.rs
IS this part executed?2 in module in translate.rs
IS this part executed?1 in compile_module function in compiler.rs
yj ModuleDefinition { loc: Loc { file_hash: "c2a03491eec1bcd457c8ccf2253c2c2fcead565df3e31a3759e108996857af9b", start: 187, end: 191 }, identifier: ModuleIdent { name: ModuleName("hash"), address: 00000000000000000000000000000001 }, friends: [], imports: [ImportDefinition { ident: ModuleIdent { name: ModuleName("unit_test"), address: 00000000000000000000000000000001 }, alias: ModuleName("1::unit_test") }], explicit_dependency_declarations: [ModuleDependency { name: ModuleName("1::unit_test"), structs: [], functions: [FunctionDependency { name: FunctionName("create_signers_for_testing"), signature: FunctionSignature { formals: [(Var_("num_signers"), U64)], return_type: [Vector(Signer)], type_formals: [] } }] }], structs: [], constants: [], functions: [(FunctionName("sha2_256"), Function_ { visibility: Public, is_entry: false, signature: FunctionSignature { formals: [(Var_("data"), Vector(U8))], return_type: [Vector(U8)], type_formals: [] }, acquires: [], specifications: [], body: Native }), (FunctionName("sha3_256"), Function_ { visibility: Public, is_entry: false, signature: FunctionSignature { formals: [(Var_("data"), Vector(U8))], return_type: [Vector(U8)], type_formals: [] }, acquires: [], specifications: [], body: Native }), (FunctionName("unit_test_poison"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [], code: [(BlockLabel_("0"), [LdU64(0), Call(ModuleName("1::unit_test"), FunctionName("create_signers_for_testing"), []), Pop, Ret])] } })], synthetics: [] }
IS this part executed?3 in module in translate.rs []
IS this part executed?1 in module in translate.rs
IS this part executed?2 in module in translate.rs
IS this part executed?1 in compile_module function in compiler.rs
yj ModuleDefinition { loc: Loc { file_hash: "be76823f936ea17b2789e2c71abd2f096298c7f11b5bf0b2bdb8d4502025983b", start: 25, end: 35 }, identifier: ModuleIdent { name: ModuleName("hash_tests"), address: 00000000000000000000000000000001 }, friends: [], imports: [ImportDefinition { ident: ModuleIdent { name: ModuleName("hash"), address: 00000000000000000000000000000001 }, alias: ModuleName("1::hash") }, ImportDefinition { ident: ModuleIdent { name: ModuleName("unit_test"), address: 00000000000000000000000000000001 }, alias: ModuleName("1::unit_test") }], explicit_dependency_declarations: [ModuleDependency { name: ModuleName("1::unit_test"), structs: [], functions: [FunctionDependency { name: FunctionName("create_signers_for_testing"), signature: FunctionSignature { formals: [(Var_("num_signers"), U64)], return_type: [Vector(Signer)], type_formals: [] } }] }, ModuleDependency { name: ModuleName("1::hash"), structs: [], functions: [FunctionDependency { name: FunctionName("sha2_256"), signature: FunctionSignature { formals: [(Var_("data"), Vector(U8))], return_type: [Vector(U8)], type_formals: [] } }, FunctionDependency { name: FunctionName("sha3_256"), signature: FunctionSignature { formals: [(Var_("data"), Vector(U8))], return_type: [Vector(U8)], type_formals: [] } }] }], structs: [], constants: [], functions: [(FunctionName("sha2_256_expected_hash"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [], code: [(BlockLabel_("0"), [LdConst(Vector(U8), Vector([U8(97), U8(98), U8(99)])), Call(ModuleName("1::hash"), FunctionName("sha2_256"), []), LdConst(Vector(U8), Vector([U8(186), U8(120), U8(22), U8(191), U8(143), U8(1), U8(207), U8(234), U8(65), U8(65), U8(64), U8(222), U8(93), U8(174), U8(34), U8(35), U8(176), U8(3), U8(97), U8(163), U8(150), U8(23), U8(122), U8(156), U8(180), U8(16), U8(255), U8(97), U8(242), U8(0), U8(21), U8(173)])), Eq, BrFalse(BlockLabel_("2")), Branch(BlockLabel_("3"))]), (BlockLabel_("2"), [LdU64(0), Abort]), (BlockLabel_("3"), [Ret])] } }), (FunctionName("sha3_256_expected_hash"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [], code: [(BlockLabel_("0"), [LdConst(Vector(U8), Vector([U8(97), U8(98), U8(99)])), Call(ModuleName("1::hash"), FunctionName("sha3_256"), []), LdConst(Vector(U8), Vector([U8(58), U8(152), U8(93), U8(167), U8(79), U8(226), U8(37), U8(178), U8(4), U8(92), U8(23), U8(45), U8(107), U8(211), U8(144), U8(189), U8(133), U8(95), U8(8), U8(110), U8(62), U8(157), U8(82), U8(91), U8(70), U8(191), U8(226), U8(69), U8(17), U8(67), U8(21), U8(50)])), Eq, BrFalse(BlockLabel_("2")), Branch(BlockLabel_("3"))]), (BlockLabel_("2"), [LdU64(0), Abort]), (BlockLabel_("3"), [Ret])] } }), (FunctionName("unit_test_poison"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [], code: [(BlockLabel_("0"), [LdU64(0), Call(ModuleName("1::unit_test"), FunctionName("create_signers_for_testing"), []), Pop, Ret])] } })], synthetics: [] }
IS this part executed?3 in module in translate.rs []
IS this part executed?1 in module in translate.rs
IS this part executed?2 in module in translate.rs
IS this part executed?1 in compile_module function in compiler.rs
yj ModuleDefinition { loc: Loc { file_hash: "de82fde0430baabb38ed3618466cfa61e112096335ee44855978afe3b86e3ecd", start: 25, end: 37 }, identifier: ModuleIdent { name: ModuleName("option_tests"), address: 00000000000000000000000000000001 }, friends: [], imports: [ImportDefinition { ident: ModuleIdent { name: ModuleName("option"), address: 00000000000000000000000000000001 }, alias: ModuleName("1::option") }, ImportDefinition { ident: ModuleIdent { name: ModuleName("unit_test"), address: 00000000000000000000000000000001 }, alias: ModuleName("1::unit_test") }, ImportDefinition { ident: ModuleIdent { name: ModuleName("vector"), address: 00000000000000000000000000000001 }, alias: ModuleName("1::vector") }], explicit_dependency_declarations: [ModuleDependency { name: ModuleName("1::unit_test"), structs: [], functions: [FunctionDependency { name: FunctionName("create_signers_for_testing"), signature: FunctionSignature { formals: [(Var_("num_signers"), U64)], return_type: [Vector(Signer)], type_formals: [] } }] }, ModuleDependency { name: ModuleName("1::vector"), structs: [], functions: [FunctionDependency { name: FunctionName("is_empty"), signature: FunctionSignature { formals: [(Var_("v"), Reference(false, Vector(TypeParameter(TypeVar_("Element")))))], return_type: [Bool], type_formals: [(TypeVar_("Element"), {})] } }] }, ModuleDependency { name: ModuleName("1::option"), structs: [StructDependency { abilities: {Copy, Drop, Store}, name: StructName("Option"), type_formals: [(false, TypeVar_("Element"), {})] }], functions: [FunctionDependency { name: FunctionName("borrow"), signature: FunctionSignature { formals: [(Var_("t"), Reference(false, Struct(QualifiedStructIdent { module: ModuleName("1::option"), name: StructName("Option") }, [TypeParameter(TypeVar_("Element"))])))], return_type: [Reference(false, TypeParameter(TypeVar_("Element")))], type_formals: [(TypeVar_("Element"), {})] } }, FunctionDependency { name: FunctionName("borrow_mut"), signature: FunctionSignature { formals: [(Var_("t"), Reference(true, Struct(QualifiedStructIdent { module: ModuleName("1::option"), name: StructName("Option") }, [TypeParameter(TypeVar_("Element"))])))], return_type: [Reference(true, TypeParameter(TypeVar_("Element")))], type_formals: [(TypeVar_("Element"), {})] } }, FunctionDependency { name: FunctionName("borrow_with_default"), signature: FunctionSignature { formals: [(Var_("t"), Reference(false, Struct(QualifiedStructIdent { module: ModuleName("1::option"), name: StructName("Option") }, [TypeParameter(TypeVar_("Element"))]))), (Var_("default_ref"), Reference(false, TypeParameter(TypeVar_("Element"))))], return_type: [Reference(false, TypeParameter(TypeVar_("Element")))], type_formals: [(TypeVar_("Element"), {})] } }, FunctionDependency { name: FunctionName("contains"), signature: FunctionSignature { formals: [(Var_("t"), Reference(false, Struct(QualifiedStructIdent { module: ModuleName("1::option"), name: StructName("Option") }, [TypeParameter(TypeVar_("Element"))]))), (Var_("e_ref"), Reference(false, TypeParameter(TypeVar_("Element"))))], return_type: [Bool], type_formals: [(TypeVar_("Element"), {})] } }, FunctionDependency { name: FunctionName("destroy_none"), signature: FunctionSignature { formals: [(Var_("t"), Struct(QualifiedStructIdent { module: ModuleName("1::option"), name: StructName("Option") }, [TypeParameter(TypeVar_("Element"))]))], return_type: [], type_formals: [(TypeVar_("Element"), {})] } }, FunctionDependency { name: FunctionName("destroy_some"), signature: FunctionSignature { formals: [(Var_("t"), Struct(QualifiedStructIdent { module: ModuleName("1::option"), name: StructName("Option") }, [TypeParameter(TypeVar_("Element"))]))], return_type: [TypeParameter(TypeVar_("Element"))], type_formals: [(TypeVar_("Element"), {})] } }, FunctionDependency { name: FunctionName("destroy_with_default"), signature: FunctionSignature { formals: [(Var_("t"), Struct(QualifiedStructIdent { module: ModuleName("1::option"), name: StructName("Option") }, [TypeParameter(TypeVar_("Element"))])), (Var_("default"), TypeParameter(TypeVar_("Element")))], return_type: [TypeParameter(TypeVar_("Element"))], type_formals: [(TypeVar_("Element"), {Drop})] } }, FunctionDependency { name: FunctionName("extract"), signature: FunctionSignature { formals: [(Var_("t"), Reference(true, Struct(QualifiedStructIdent { module: ModuleName("1::option"), name: StructName("Option") }, [TypeParameter(TypeVar_("Element"))])))], return_type: [TypeParameter(TypeVar_("Element"))], type_formals: [(TypeVar_("Element"), {})] } }, FunctionDependency { name: FunctionName("fill"), signature: FunctionSignature { formals: [(Var_("t"), Reference(true, Struct(QualifiedStructIdent { module: ModuleName("1::option"), name: StructName("Option") }, [TypeParameter(TypeVar_("Element"))]))), (Var_("e"), TypeParameter(TypeVar_("Element")))], return_type: [], type_formals: [(TypeVar_("Element"), {})] } }, FunctionDependency { name: FunctionName("get_with_default"), signature: FunctionSignature { formals: [(Var_("t"), Reference(false, Struct(QualifiedStructIdent { module: ModuleName("1::option"), name: StructName("Option") }, [TypeParameter(TypeVar_("Element"))]))), (Var_("default"), TypeParameter(TypeVar_("Element")))], return_type: [TypeParameter(TypeVar_("Element"))], type_formals: [(TypeVar_("Element"), {Copy, Drop})] } }, FunctionDependency { name: FunctionName("is_none"), signature: FunctionSignature { formals: [(Var_("t"), Reference(false, Struct(QualifiedStructIdent { module: ModuleName("1::option"), name: StructName("Option") }, [TypeParameter(TypeVar_("Element"))])))], return_type: [Bool], type_formals: [(TypeVar_("Element"), {})] } }, FunctionDependency { name: FunctionName("is_some"), signature: FunctionSignature { formals: [(Var_("t"), Reference(false, Struct(QualifiedStructIdent { module: ModuleName("1::option"), name: StructName("Option") }, [TypeParameter(TypeVar_("Element"))])))], return_type: [Bool], type_formals: [(TypeVar_("Element"), {})] } }, FunctionDependency { name: FunctionName("none"), signature: FunctionSignature { formals: [], return_type: [Struct(QualifiedStructIdent { module: ModuleName("1::option"), name: StructName("Option") }, [TypeParameter(TypeVar_("Element"))])], type_formals: [(TypeVar_("Element"), {})] } }, FunctionDependency { name: FunctionName("some"), signature: FunctionSignature { formals: [(Var_("e"), TypeParameter(TypeVar_("Element")))], return_type: [Struct(QualifiedStructIdent { module: ModuleName("1::option"), name: StructName("Option") }, [TypeParameter(TypeVar_("Element"))])], type_formals: [(TypeVar_("Element"), {})] } }, FunctionDependency { name: FunctionName("swap"), signature: FunctionSignature { formals: [(Var_("t"), Reference(true, Struct(QualifiedStructIdent { module: ModuleName("1::option"), name: StructName("Option") }, [TypeParameter(TypeVar_("Element"))]))), (Var_("e"), TypeParameter(TypeVar_("Element")))], return_type: [TypeParameter(TypeVar_("Element"))], type_formals: [(TypeVar_("Element"), {})] } }, FunctionDependency { name: FunctionName("swap_or_fill"), signature: FunctionSignature { formals: [(Var_("t"), Reference(true, Struct(QualifiedStructIdent { module: ModuleName("1::option"), name: StructName("Option") }, [TypeParameter(TypeVar_("Element"))]))), (Var_("e"), TypeParameter(TypeVar_("Element")))], return_type: [Struct(QualifiedStructIdent { module: ModuleName("1::option"), name: StructName("Option") }, [TypeParameter(TypeVar_("Element"))])], type_formals: [(TypeVar_("Element"), {})] } }, FunctionDependency { name: FunctionName("to_vec"), signature: FunctionSignature { formals: [(Var_("t"), Struct(QualifiedStructIdent { module: ModuleName("1::option"), name: StructName("Option") }, [TypeParameter(TypeVar_("Element"))]))], return_type: [Vector(TypeParameter(TypeVar_("Element")))], type_formals: [(TypeVar_("Element"), {})] } }] }], structs: [], constants: [], functions: [(FunctionName("borrow_mut_none"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [(Var_("%#1"), Struct(QualifiedStructIdent { module: ModuleName("1::option"), name: StructName("Option") }, [U64]))], code: [(BlockLabel_("0"), [Call(ModuleName("1::option"), FunctionName("none"), [U64]), StLoc(Var_("%#1")), MutBorrowLoc(Var_("%#1")), Call(ModuleName("1::option"), FunctionName("borrow_mut"), [U64]), Pop, Ret])] } }), (FunctionName("borrow_mut_some"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [(Var_("ref"), Reference(true, U64)), (Var_("some"), Struct(QualifiedStructIdent { module: ModuleName("1::option"), name: StructName("Option") }, [U64]))], code: [(BlockLabel_("0"), [LdU64(1), Call(ModuleName("1::option"), FunctionName("some"), [U64]), StLoc(Var_("some")), MutBorrowLoc(Var_("some")), Call(ModuleName("1::option"), FunctionName("borrow_mut"), [U64]), StLoc(Var_("ref")), LdU64(10), MoveLoc(Var_("ref")), WriteRef, ImmBorrowLoc(Var_("some")), Call(ModuleName("1::option"), FunctionName("borrow"), [U64]), ReadRef, LdU64(10), Eq, BrFalse(BlockLabel_("2")), Branch(BlockLabel_("3"))]), (BlockLabel_("2"), [LdU64(0), Abort]), (BlockLabel_("3"), [Ret])] } }), (FunctionName("borrow_with_default"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [(Var_("%#1"), U64), (Var_("%#2"), Reference(false, Struct(QualifiedStructIdent { module: ModuleName("1::option"), name: StructName("Option") }, [U64]))), (Var_("%#3"), U64), (Var_("%#4"), Reference(false, Struct(QualifiedStructIdent { module: ModuleName("1::option"), name: StructName("Option") }, [U64]))), (Var_("none"), Struct(QualifiedStructIdent { module: ModuleName("1::option"), name: StructName("Option") }, [U64])), (Var_("some"), Struct(QualifiedStructIdent { module: ModuleName("1::option"), name: StructName("Option") }, [U64]))], code: [(BlockLabel_("0"), [Call(ModuleName("1::option"), FunctionName("none"), [U64]), StLoc(Var_("none")), LdU64(5), Call(ModuleName("1::option"), FunctionName("some"), [U64]), StLoc(Var_("some")), ImmBorrowLoc(Var_("some")), StLoc(Var_("%#2")), LdU64(7), StLoc(Var_("%#1")), MoveLoc(Var_("%#2")), ImmBorrowLoc(Var_("%#1")), Call(ModuleName("1::option"), FunctionName("borrow_with_default"), [U64]), ReadRef, LdU64(5), Eq, BrFalse(BlockLabel_("2")), Branch(BlockLabel_("3"))]), (BlockLabel_("2"), [LdU64(0), Abort]), (BlockLabel_("3"), [ImmBorrowLoc(Var_("none")), StLoc(Var_("%#4")), LdU64(7), StLoc(Var_("%#3")), MoveLoc(Var_("%#4")), ImmBorrowLoc(Var_("%#3")), Call(ModuleName("1::option"), FunctionName("borrow_with_default"), [U64]), ReadRef, LdU64(7), Eq, BrFalse(BlockLabel_("5")), Branch(BlockLabel_("6"))]), (BlockLabel_("5"), [LdU64(1), Abort]), (BlockLabel_("6"), [Ret])] } }), (FunctionName("destroy_none"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [], code: [(BlockLabel_("0"), [Call(ModuleName("1::option"), FunctionName("none"), [U64]), Call(ModuleName("1::option"), FunctionName("destroy_none"), [U64]), Ret])] } }), (FunctionName("destroy_none_some"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [], code: [(BlockLabel_("0"), [LdU64(0), Call(ModuleName("1::option"), FunctionName("some"), [U64]), Call(ModuleName("1::option"), FunctionName("destroy_none"), [U64]), Ret])] } }), (FunctionName("destroy_some"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [], code: [(BlockLabel_("0"), [LdU64(4), Call(ModuleName("1::option"), FunctionName("some"), [U64]), Call(ModuleName("1::option"), FunctionName("destroy_some"), [U64]), LdU64(4), Eq, BrFalse(BlockLabel_("2")), Branch(BlockLabel_("3"))]), (BlockLabel_("2"), [LdU64(0), Abort]), (BlockLabel_("3"), [Ret])] } }), (FunctionName("destroy_some_none"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [], code: [(BlockLabel_("0"), [Call(ModuleName("1::option"), FunctionName("none"), [U64]), Call(ModuleName("1::option"), FunctionName("destroy_some"), [U64]), Pop, Ret])] } }), (FunctionName("destroy_with_default"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [], code: [(BlockLabel_("0"), [Call(ModuleName("1::option"), FunctionName("none"), [U64]), LdU64(4), Call(ModuleName("1::option"), FunctionName("destroy_with_default"), [U64]), LdU64(4), Eq, BrFalse(BlockLabel_("2")), Branch(BlockLabel_("3"))]), (BlockLabel_("2"), [LdU64(0), Abort]), (BlockLabel_("3"), [LdU64(4), Call(ModuleName("1::option"), FunctionName("some"), [U64]), LdU64(5), Call(ModuleName("1::option"), FunctionName("destroy_with_default"), [U64]), LdU64(4), Eq, BrFalse(BlockLabel_("5")), Branch(BlockLabel_("6"))]), (BlockLabel_("5"), [LdU64(1), Abort]), (BlockLabel_("6"), [Ret])] } }), (FunctionName("extract_none"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [(Var_("%#1"), Struct(QualifiedStructIdent { module: ModuleName("1::option"), name: StructName("Option") }, [U64]))], code: [(BlockLabel_("0"), [Call(ModuleName("1::option"), FunctionName("none"), [U64]), StLoc(Var_("%#1")), MutBorrowLoc(Var_("%#1")), Call(ModuleName("1::option"), FunctionName("extract"), [U64]), Pop, Ret])] } }), (FunctionName("extract_some"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [(Var_("opt"), Struct(QualifiedStructIdent { module: ModuleName("1::option"), name: StructName("Option") }, [U64]))], code: [(BlockLabel_("0"), [LdU64(1), Call(ModuleName("1::option"), FunctionName("some"), [U64]), StLoc(Var_("opt")), MutBorrowLoc(Var_("opt")), Call(ModuleName("1::option"), FunctionName("extract"), [U64]), LdU64(1), Eq, BrFalse(BlockLabel_("2")), Branch(BlockLabel_("3"))]), (BlockLabel_("2"), [LdU64(0), Abort]), (BlockLabel_("3"), [ImmBorrowLoc(Var_("opt")), Call(ModuleName("1::option"), FunctionName("is_none"), [U64]), BrFalse(BlockLabel_("5")), Branch(BlockLabel_("6"))]), (BlockLabel_("5"), [LdU64(1), Abort]), (BlockLabel_("6"), [Ret])] } }), (FunctionName("fill_none"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [(Var_("none"), Struct(QualifiedStructIdent { module: ModuleName("1::option"), name: StructName("Option") }, [U64]))], code: [(BlockLabel_("0"), [Call(ModuleName("1::option"), FunctionName("none"), [U64]), StLoc(Var_("none")), MutBorrowLoc(Var_("none")), LdU64(3), Call(ModuleName("1::option"), FunctionName("fill"), [U64]), ImmBorrowLoc(Var_("none")), Call(ModuleName("1::option"), FunctionName("is_some"), [U64]), BrFalse(BlockLabel_("2")), Branch(BlockLabel_("3"))]), (BlockLabel_("2"), [LdU64(0), Abort]), (BlockLabel_("3"), [ImmBorrowLoc(Var_("none")), Call(ModuleName("1::option"), FunctionName("borrow"), [U64]), ReadRef, LdU64(3), Eq, BrFalse(BlockLabel_("5")), Branch(BlockLabel_("6"))]), (BlockLabel_("5"), [LdU64(1), Abort]), (BlockLabel_("6"), [Ret])] } }), (FunctionName("fill_some"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [(Var_("%#1"), Struct(QualifiedStructIdent { module: ModuleName("1::option"), name: StructName("Option") }, [U64]))], code: [(BlockLabel_("0"), [LdU64(3), Call(ModuleName("1::option"), FunctionName("some"), [U64]), StLoc(Var_("%#1")), MutBorrowLoc(Var_("%#1")), LdU64(0), Call(ModuleName("1::option"), FunctionName("fill"), [U64]), Ret])] } }), (FunctionName("get_with_default"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [(Var_("none"), Struct(QualifiedStructIdent { module: ModuleName("1::option"), name: StructName("Option") }, [U64])), (Var_("some"), Struct(QualifiedStructIdent { module: ModuleName("1::option"), name: StructName("Option") }, [U64]))], code: [(BlockLabel_("0"), [Call(ModuleName("1::option"), FunctionName("none"), [U64]), StLoc(Var_("none")), LdU64(5), Call(ModuleName("1::option"), FunctionName("some"), [U64]), StLoc(Var_("some")), ImmBorrowLoc(Var_("some")), LdU64(7), Call(ModuleName("1::option"), FunctionName("get_with_default"), [U64]), LdU64(5), Eq, BrFalse(BlockLabel_("2")), Branch(BlockLabel_("3"))]), (BlockLabel_("2"), [LdU64(0), Abort]), (BlockLabel_("3"), [ImmBorrowLoc(Var_("none")), LdU64(7), Call(ModuleName("1::option"), FunctionName("get_with_default"), [U64]), LdU64(7), Eq, BrFalse(BlockLabel_("5")), Branch(BlockLabel_("6"))]), (BlockLabel_("5"), [LdU64(1), Abort]), (BlockLabel_("6"), [Ret])] } }), (FunctionName("into_vec_none"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [(Var_("v"), Vector(U64))], code: [(BlockLabel_("0"), [Call(ModuleName("1::option"), FunctionName("none"), [U64]), Call(ModuleName("1::option"), FunctionName("to_vec"), [U64]), StLoc(Var_("v")), ImmBorrowLoc(Var_("v")), Call(ModuleName("1::vector"), FunctionName("is_empty"), [U64]), BrFalse(BlockLabel_("2")), Branch(BlockLabel_("3"))]), (BlockLabel_("2"), [LdU64(0), Abort]), (BlockLabel_("3"), [Ret])] } }), (FunctionName("into_vec_some"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [(Var_("v"), Vector(U64))], code: [(BlockLabel_("0"), [LdU64(0), Call(ModuleName("1::option"), FunctionName("some"), [U64]), Call(ModuleName("1::option"), FunctionName("to_vec"), [U64]), StLoc(Var_("v")), ImmBorrowLoc(Var_("v")), VecLen(U64), LdU64(1), Eq, BrFalse(BlockLabel_("2")), Branch(BlockLabel_("3"))]), (BlockLabel_("2"), [LdU64(0), Abort]), (BlockLabel_("3"), [MutBorrowLoc(Var_("v")), VecPopBack(U64), LdU64(0), Eq, BrFalse(BlockLabel_("5")), Branch(BlockLabel_("6"))]), (BlockLabel_("5"), [LdU64(1), Abort]), (BlockLabel_("6"), [Ret])] } }), (FunctionName("option_borrow_none"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [(Var_("%#1"), Struct(QualifiedStructIdent { module: ModuleName("1::option"), name: StructName("Option") }, [U64]))], code: [(BlockLabel_("0"), [Call(ModuleName("1::option"), FunctionName("none"), [U64]), StLoc(Var_("%#1")), ImmBorrowLoc(Var_("%#1")), Call(ModuleName("1::option"), FunctionName("borrow"), [U64]), Pop, Ret])] } }), (FunctionName("option_borrow_some"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [(Var_("some"), Struct(QualifiedStructIdent { module: ModuleName("1::option"), name: StructName("Option") }, [U64])), (Var_("some_other"), Struct(QualifiedStructIdent { module: ModuleName("1::option"), name: StructName("Option") }, [U64]))], code: [(BlockLabel_("0"), [LdU64(5), Call(ModuleName("1::option"), FunctionName("some"), [U64]), StLoc(Var_("some")), LdU64(6), Call(ModuleName("1::option"), FunctionName("some"), [U64]), StLoc(Var_("some_other")), ImmBorrowLoc(Var_("some")), Call(ModuleName("1::option"), FunctionName("borrow"), [U64]), ReadRef, LdU64(5), Eq, BrFalse(BlockLabel_("2")), Branch(BlockLabel_("3"))]), (BlockLabel_("2"), [LdU64(3), Abort]), (BlockLabel_("3"), [ImmBorrowLoc(Var_("some_other")), Call(ModuleName("1::option"), FunctionName("borrow"), [U64]), ReadRef, LdU64(6), Eq, BrFalse(BlockLabel_("5")), Branch(BlockLabel_("6"))]), (BlockLabel_("5"), [LdU64(4), Abort]), (BlockLabel_("6"), [Ret])] } }), (FunctionName("option_contains"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [(Var_("%#1"), U64), (Var_("%#2"), Reference(false, Struct(QualifiedStructIdent { module: ModuleName("1::option"), name: StructName("Option") }, [U64]))), (Var_("%#3"), U64), (Var_("%#4"), Reference(false, Struct(QualifiedStructIdent { module: ModuleName("1::option"), name: StructName("Option") }, [U64]))), (Var_("%#5"), U64), (Var_("%#6"), Reference(false, Struct(QualifiedStructIdent { module: ModuleName("1::option"), name: StructName("Option") }, [U64]))), (Var_("%#7"), U64), (Var_("%#8"), Reference(false, Struct(QualifiedStructIdent { module: ModuleName("1::option"), name: StructName("Option") }, [U64]))), (Var_("none"), Struct(QualifiedStructIdent { module: ModuleName("1::option"), name: StructName("Option") }, [U64])), (Var_("some"), Struct(QualifiedStructIdent { module: ModuleName("1::option"), name: StructName("Option") }, [U64])), (Var_("some_other"), Struct(QualifiedStructIdent { module: ModuleName("1::option"), name: StructName("Option") }, [U64]))], code: [(BlockLabel_("0"), [Call(ModuleName("1::option"), FunctionName("none"), [U64]), StLoc(Var_("none")), LdU64(5), Call(ModuleName("1::option"), FunctionName("some"), [U64]), StLoc(Var_("some")), LdU64(6), Call(ModuleName("1::option"), FunctionName("some"), [U64]), StLoc(Var_("some_other")), ImmBorrowLoc(Var_("some")), StLoc(Var_("%#2")), LdU64(5), StLoc(Var_("%#1")), MoveLoc(Var_("%#2")), ImmBorrowLoc(Var_("%#1")), Call(ModuleName("1::option"), FunctionName("contains"), [U64]), BrFalse(BlockLabel_("2")), Branch(BlockLabel_("3"))]), (BlockLabel_("2"), [LdU64(0), Abort]), (BlockLabel_("3"), [ImmBorrowLoc(Var_("some_other")), StLoc(Var_("%#4")), LdU64(6), StLoc(Var_("%#3")), MoveLoc(Var_("%#4")), ImmBorrowLoc(Var_("%#3")), Call(ModuleName("1::option"), FunctionName("contains"), [U64]), BrFalse(BlockLabel_("5")), Branch(BlockLabel_("6"))]), (BlockLabel_("5"), [LdU64(1), Abort]), (BlockLabel_("6"), [ImmBorrowLoc(Var_("none")), StLoc(Var_("%#6")), LdU64(5), StLoc(Var_("%#5")), MoveLoc(Var_("%#6")), ImmBorrowLoc(Var_("%#5")), Call(ModuleName("1::option"), FunctionName("contains"), [U64]), Not, BrFalse(BlockLabel_("8")), Branch(BlockLabel_("9"))]), (BlockLabel_("8"), [LdU64(2), Abort]), (BlockLabel_("9"), [ImmBorrowLoc(Var_("some_other")), StLoc(Var_("%#8")), LdU64(5), StLoc(Var_("%#7")), MoveLoc(Var_("%#8")), ImmBorrowLoc(Var_("%#7")), Call(ModuleName("1::option"), FunctionName("contains"), [U64]), Not, BrFalse(BlockLabel_("11")), Branch(BlockLabel_("12"))]), (BlockLabel_("11"), [LdU64(3), Abort]), (BlockLabel_("12"), [Ret])] } }), (FunctionName("option_none_is_none"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [(Var_("none"), Struct(QualifiedStructIdent { module: ModuleName("1::option"), name: StructName("Option") }, [U64]))], code: [(BlockLabel_("0"), [Call(ModuleName("1::option"), FunctionName("none"), [U64]), StLoc(Var_("none")), ImmBorrowLoc(Var_("none")), Call(ModuleName("1::option"), FunctionName("is_none"), [U64]), BrFalse(BlockLabel_("2")), Branch(BlockLabel_("3"))]), (BlockLabel_("2"), [LdU64(0), Abort]), (BlockLabel_("3"), [ImmBorrowLoc(Var_("none")), Call(ModuleName("1::option"), FunctionName("is_some"), [U64]), Not, BrFalse(BlockLabel_("5")), Branch(BlockLabel_("6"))]), (BlockLabel_("5"), [LdU64(1), Abort]), (BlockLabel_("6"), [Ret])] } }), (FunctionName("option_some_is_some"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [(Var_("some"), Struct(QualifiedStructIdent { module: ModuleName("1::option"), name: StructName("Option") }, [U64]))], code: [(BlockLabel_("0"), [LdU64(5), Call(ModuleName("1::option"), FunctionName("some"), [U64]), StLoc(Var_("some")), ImmBorrowLoc(Var_("some")), Call(ModuleName("1::option"), FunctionName("is_none"), [U64]), Not, BrFalse(BlockLabel_("2")), Branch(BlockLabel_("3"))]), (BlockLabel_("2"), [LdU64(0), Abort]), (BlockLabel_("3"), [ImmBorrowLoc(Var_("some")), Call(ModuleName("1::option"), FunctionName("is_some"), [U64]), BrFalse(BlockLabel_("5")), Branch(BlockLabel_("6"))]), (BlockLabel_("5"), [LdU64(1), Abort]), (BlockLabel_("6"), [Ret])] } }), (FunctionName("swap_none"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [(Var_("%#1"), Struct(QualifiedStructIdent { module: ModuleName("1::option"), name: StructName("Option") }, [U64]))], code: [(BlockLabel_("0"), [Call(ModuleName("1::option"), FunctionName("none"), [U64]), StLoc(Var_("%#1")), MutBorrowLoc(Var_("%#1")), LdU64(1), Call(ModuleName("1::option"), FunctionName("swap"), [U64]), Pop, Ret])] } }), (FunctionName("swap_or_fill_none"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [(Var_("none"), Struct(QualifiedStructIdent { module: ModuleName("1::option"), name: StructName("Option") }, [U64]))], code: [(BlockLabel_("0"), [Call(ModuleName("1::option"), FunctionName("none"), [U64]), StLoc(Var_("none")), MutBorrowLoc(Var_("none")), LdU64(1), Call(ModuleName("1::option"), FunctionName("swap_or_fill"), [U64]), Call(ModuleName("1::option"), FunctionName("none"), [U64]), Eq, BrFalse(BlockLabel_("2")), Branch(BlockLabel_("3"))]), (BlockLabel_("2"), [LdU64(0), Abort]), (BlockLabel_("3"), [ImmBorrowLoc(Var_("none")), Call(ModuleName("1::option"), FunctionName("borrow"), [U64]), ReadRef, LdU64(1), Eq, BrFalse(BlockLabel_("5")), Branch(BlockLabel_("6"))]), (BlockLabel_("5"), [LdU64(1), Abort]), (BlockLabel_("6"), [Ret])] } }), (FunctionName("swap_or_fill_some"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [(Var_("some"), Struct(QualifiedStructIdent { module: ModuleName("1::option"), name: StructName("Option") }, [U64]))], code: [(BlockLabel_("0"), [LdU64(5), Call(ModuleName("1::option"), FunctionName("some"), [U64]), StLoc(Var_("some")), MutBorrowLoc(Var_("some")), LdU64(1), Call(ModuleName("1::option"), FunctionName("swap_or_fill"), [U64]), LdU64(5), Call(ModuleName("1::option"), FunctionName("some"), [U64]), Eq, BrFalse(BlockLabel_("2")), Branch(BlockLabel_("3"))]), (BlockLabel_("2"), [LdU64(0), Abort]), (BlockLabel_("3"), [ImmBorrowLoc(Var_("some")), Call(ModuleName("1::option"), FunctionName("borrow"), [U64]), ReadRef, LdU64(1), Eq, BrFalse(BlockLabel_("5")), Branch(BlockLabel_("6"))]), (BlockLabel_("5"), [LdU64(1), Abort]), (BlockLabel_("6"), [Ret])] } }), (FunctionName("swap_some"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [(Var_("some"), Struct(QualifiedStructIdent { module: ModuleName("1::option"), name: StructName("Option") }, [U64]))], code: [(BlockLabel_("0"), [LdU64(5), Call(ModuleName("1::option"), FunctionName("some"), [U64]), StLoc(Var_("some")), MutBorrowLoc(Var_("some")), LdU64(1), Call(ModuleName("1::option"), FunctionName("swap"), [U64]), LdU64(5), Eq, BrFalse(BlockLabel_("2")), Branch(BlockLabel_("3"))]), (BlockLabel_("2"), [LdU64(0), Abort]), (BlockLabel_("3"), [ImmBorrowLoc(Var_("some")), Call(ModuleName("1::option"), FunctionName("borrow"), [U64]), ReadRef, LdU64(1), Eq, BrFalse(BlockLabel_("5")), Branch(BlockLabel_("6"))]), (BlockLabel_("5"), [LdU64(1), Abort]), (BlockLabel_("6"), [Ret])] } }), (FunctionName("unit_test_poison"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [], code: [(BlockLabel_("0"), [LdU64(0), Call(ModuleName("1::unit_test"), FunctionName("create_signers_for_testing"), []), Pop, Ret])] } })], synthetics: [] }
IS this part executed?3 in module in translate.rs []
IS this part executed?1 in module in translate.rs
IS this part executed?2 in module in translate.rs
IS this part executed?1 in compile_module function in compiler.rs
yj ModuleDefinition { loc: Loc { file_hash: "22ab920b3cd176ed32745aef9e1c270f63c3b72506bb92f133cbbcdce37c63ce", start: 12, end: 18 }, identifier: ModuleIdent { name: ModuleName("signer"), address: 00000000000000000000000000000001 }, friends: [], imports: [ImportDefinition { ident: ModuleIdent { name: ModuleName("unit_test"), address: 00000000000000000000000000000001 }, alias: ModuleName("1::unit_test") }], explicit_dependency_declarations: [ModuleDependency { name: ModuleName("1::unit_test"), structs: [], functions: [FunctionDependency { name: FunctionName("create_signers_for_testing"), signature: FunctionSignature { formals: [(Var_("num_signers"), U64)], return_type: [Vector(Signer)], type_formals: [] } }] }], structs: [], constants: [], functions: [(FunctionName("address_of"), Function_ { visibility: Public, is_entry: false, signature: FunctionSignature { formals: [(Var_("s"), Reference(false, Signer))], return_type: [Address], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [], code: [(BlockLabel_("0"), [MoveLoc(Var_("s")), Call(ModuleName("Self"), FunctionName("borrow_address"), []), ReadRef, Ret])] } }), (FunctionName("borrow_address"), Function_ { visibility: Public, is_entry: false, signature: FunctionSignature { formals: [(Var_("s"), Reference(false, Signer))], return_type: [Reference(false, Address)], type_formals: [] }, acquires: [], specifications: [], body: Native }), (FunctionName("unit_test_poison"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [], code: [(BlockLabel_("0"), [LdU64(0), Call(ModuleName("1::unit_test"), FunctionName("create_signers_for_testing"), []), Pop, Ret])] } })], synthetics: [] }
IS this part executed?3 in module in translate.rs []
IS this part executed?1 in module in translate.rs
IS this part executed?2 in module in translate.rs
IS this part executed?1 in compile_module function in compiler.rs
yj ModuleDefinition { loc: Loc { file_hash: "7d0e981c0a3e36f09f9aa390ab37c1402589940ea3bed9a2998622a7b8112117", start: 101, end: 107 }, identifier: ModuleIdent { name: ModuleName("string"), address: 00000000000000000000000000000001 }, friends: [], imports: [ImportDefinition { ident: ModuleIdent { name: ModuleName("option"), address: 00000000000000000000000000000001 }, alias: ModuleName("1::option") }, ImportDefinition { ident: ModuleIdent { name: ModuleName("unit_test"), address: 00000000000000000000000000000001 }, alias: ModuleName("1::unit_test") }, ImportDefinition { ident: ModuleIdent { name: ModuleName("vector"), address: 00000000000000000000000000000001 }, alias: ModuleName("1::vector") }], explicit_dependency_declarations: [ModuleDependency { name: ModuleName("1::unit_test"), structs: [], functions: [FunctionDependency { name: FunctionName("create_signers_for_testing"), signature: FunctionSignature { formals: [(Var_("num_signers"), U64)], return_type: [Vector(Signer)], type_formals: [] } }] }, ModuleDependency { name: ModuleName("1::vector"), structs: [], functions: [FunctionDependency { name: FunctionName("append"), signature: FunctionSignature { formals: [(Var_("lhs"), Reference(true, Vector(TypeParameter(TypeVar_("Element"))))), (Var_("other"), Vector(TypeParameter(TypeVar_("Element"))))], return_type: [], type_formals: [(TypeVar_("Element"), {})] } }, FunctionDependency { name: FunctionName("is_empty"), signature: FunctionSignature { formals: [(Var_("v"), Reference(false, Vector(TypeParameter(TypeVar_("Element")))))], return_type: [Bool], type_formals: [(TypeVar_("Element"), {})] } }] }, ModuleDependency { name: ModuleName("1::option"), structs: [StructDependency { abilities: {Copy, Drop, Store}, name: StructName("Option"), type_formals: [(false, TypeVar_("Element"), {})] }], functions: [FunctionDependency { name: FunctionName("none"), signature: FunctionSignature { formals: [], return_type: [Struct(QualifiedStructIdent { module: ModuleName("1::option"), name: StructName("Option") }, [TypeParameter(TypeVar_("Element"))])], type_formals: [(TypeVar_("Element"), {})] } }, FunctionDependency { name: FunctionName("some"), signature: FunctionSignature { formals: [(Var_("e"), TypeParameter(TypeVar_("Element")))], return_type: [Struct(QualifiedStructIdent { module: ModuleName("1::option"), name: StructName("Option") }, [TypeParameter(TypeVar_("Element"))])], type_formals: [(TypeVar_("Element"), {})] } }] }], structs: [StructDefinition_ { abilities: {Copy, Drop, Store}, name: StructName("String"), type_formals: [], fields: Move { fields: [(Field_("bytes"), Vector(U8))] }, invariants: [] }], constants: [Constant { name: ConstantName("EINVALID_INDEX"), signature: U64, value: U64(2) }, Constant { name: ConstantName("EINVALID_UTF8"), signature: U64, value: U64(1) }], functions: [(FunctionName("append"), Function_ { visibility: Public, is_entry: false, signature: FunctionSignature { formals: [(Var_("s"), Reference(true, Struct(QualifiedStructIdent { module: ModuleName("Self"), name: StructName("String") }, []))), (Var_("r"), Struct(QualifiedStructIdent { module: ModuleName("Self"), name: StructName("String") }, []))], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [], code: [(BlockLabel_("0"), [MoveLoc(Var_("s")), MutBorrowField(StructName("String"), [], Field_("bytes")), ImmBorrowLoc(Var_("r")), ImmBorrowField(StructName("String"), [], Field_("bytes")), ReadRef, Call(ModuleName("1::vector"), FunctionName("append"), [U8]), Ret])] } }), (FunctionName("append_utf8"), Function_ { visibility: Public, is_entry: false, signature: FunctionSignature { formals: [(Var_("s"), Reference(true, Struct(QualifiedStructIdent { module: ModuleName("Self"), name: StructName("String") }, []))), (Var_("bytes"), Vector(U8))], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [], code: [(BlockLabel_("0"), [MoveLoc(Var_("s")), MoveLoc(Var_("bytes")), Call(ModuleName("Self"), FunctionName("utf8"), []), Call(ModuleName("Self"), FunctionName("append"), []), Ret])] } }), (FunctionName("bytes"), Function_ { visibility: Public, is_entry: false, signature: FunctionSignature { formals: [(Var_("s"), Reference(false, Struct(QualifiedStructIdent { module: ModuleName("Self"), name: StructName("String") }, [])))], return_type: [Reference(false, Vector(U8))], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [], code: [(BlockLabel_("0"), [MoveLoc(Var_("s")), ImmBorrowField(StructName("String"), [], Field_("bytes")), Ret])] } }), (FunctionName("index_of"), Function_ { visibility: Public, is_entry: false, signature: FunctionSignature { formals: [(Var_("s"), Reference(false, Struct(QualifiedStructIdent { module: ModuleName("Self"), name: StructName("String") }, []))), (Var_("r"), Reference(false, Struct(QualifiedStructIdent { module: ModuleName("Self"), name: StructName("String") }, [])))], return_type: [U64], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [], code: [(BlockLabel_("0"), [MoveLoc(Var_("s")), ImmBorrowField(StructName("String"), [], Field_("bytes")), MoveLoc(Var_("r")), ImmBorrowField(StructName("String"), [], Field_("bytes")), Call(ModuleName("Self"), FunctionName("internal_index_of"), []), Ret])] } }), (FunctionName("insert"), Function_ { visibility: Public, is_entry: false, signature: FunctionSignature { formals: [(Var_("s"), Reference(true, Struct(QualifiedStructIdent { module: ModuleName("Self"), name: StructName("String") }, []))), (Var_("at"), U64), (Var_("o"), Struct(QualifiedStructIdent { module: ModuleName("Self"), name: StructName("String") }, []))], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [(Var_("%#1"), Bool), (Var_("%#4"), U64), (Var_("%#6"), U64), (Var_("%#7"), U64), (Var_("bytes"), Reference(false, Vector(U8))), (Var_("end"), Struct(QualifiedStructIdent { module: ModuleName("Self"), name: StructName("String") }, [])), (Var_("front"), Struct(QualifiedStructIdent { module: ModuleName("Self"), name: StructName("String") }, [])), (Var_("l"), U64)], code: [(BlockLabel_("0"), [CopyLoc(Var_("s")), ImmBorrowField(StructName("String"), [], Field_("bytes")), StLoc(Var_("bytes")), CopyLoc(Var_("at")), CopyLoc(Var_("bytes")), VecLen(U8), Le, BrFalse(BlockLabel_("2"))]), (BlockLabel_("1"), [MoveLoc(Var_("bytes")), CopyLoc(Var_("at")), Call(ModuleName("Self"), FunctionName("internal_is_char_boundary"), []), StLoc(Var_("%#1")), Branch(BlockLabel_("3"))]), (BlockLabel_("2"), [MoveLoc(Var_("bytes")), Pop, LdFalse, StLoc(Var_("%#1"))]), (BlockLabel_("3"), [MoveLoc(Var_("%#1")), BrFalse(BlockLabel_("5")), Branch(BlockLabel_("6"))]), (BlockLabel_("5"), [MoveLoc(Var_("s")), Pop, LdNamedConst(ConstantName("EINVALID_INDEX")), Abort]), (BlockLabel_("6"), [CopyLoc(Var_("s")), FreezeRef, Call(ModuleName("Self"), FunctionName("length"), []), StLoc(Var_("l")), CopyLoc(Var_("s")), CopyLoc(Var_("at")), StLoc(Var_("%#4")), FreezeRef, LdU64(0), MoveLoc(Var_("%#4")), Call(ModuleName("Self"), FunctionName("sub_string"), []), StLoc(Var_("front")), CopyLoc(Var_("s")), MoveLoc(Var_("at")), MoveLoc(Var_("l")), StLoc(Var_("%#7")), StLoc(Var_("%#6")), FreezeRef, MoveLoc(Var_("%#6")), MoveLoc(Var_("%#7")), Call(ModuleName("Self"), FunctionName("sub_string"), []), StLoc(Var_("end")), MutBorrowLoc(Var_("front")), MoveLoc(Var_("o")), Call(ModuleName("Self"), FunctionName("append"), []), MutBorrowLoc(Var_("front")), MoveLoc(Var_("end")), Call(ModuleName("Self"), FunctionName("append"), []), MoveLoc(Var_("front")), MoveLoc(Var_("s")), WriteRef, Ret])] } }), (FunctionName("internal_check_utf8"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [(Var_("v"), Reference(false, Vector(U8)))], return_type: [Bool], type_formals: [] }, acquires: [], specifications: [], body: Native }), (FunctionName("internal_index_of"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [(Var_("v"), Reference(false, Vector(U8))), (Var_("r"), Reference(false, Vector(U8)))], return_type: [U64], type_formals: [] }, acquires: [], specifications: [], body: Native }), (FunctionName("internal_is_char_boundary"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [(Var_("v"), Reference(false, Vector(U8))), (Var_("i"), U64)], return_type: [Bool], type_formals: [] }, acquires: [], specifications: [], body: Native }), (FunctionName("internal_sub_string"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [(Var_("v"), Reference(false, Vector(U8))), (Var_("i"), U64), (Var_("j"), U64)], return_type: [Vector(U8)], type_formals: [] }, acquires: [], specifications: [], body: Native }), (FunctionName("is_empty"), Function_ { visibility: Public, is_entry: false, signature: FunctionSignature { formals: [(Var_("s"), Reference(false, Struct(QualifiedStructIdent { module: ModuleName("Self"), name: StructName("String") }, [])))], return_type: [Bool], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [], code: [(BlockLabel_("0"), [MoveLoc(Var_("s")), ImmBorrowField(StructName("String"), [], Field_("bytes")), Call(ModuleName("1::vector"), FunctionName("is_empty"), [U8]), Ret])] } }), (FunctionName("length"), Function_ { visibility: Public, is_entry: false, signature: FunctionSignature { formals: [(Var_("s"), Reference(false, Struct(QualifiedStructIdent { module: ModuleName("Self"), name: StructName("String") }, [])))], return_type: [U64], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [], code: [(BlockLabel_("0"), [MoveLoc(Var_("s")), ImmBorrowField(StructName("String"), [], Field_("bytes")), VecLen(U8), Ret])] } }), (FunctionName("sub_string"), Function_ { visibility: Public, is_entry: false, signature: FunctionSignature { formals: [(Var_("s"), Reference(false, Struct(QualifiedStructIdent { module: ModuleName("Self"), name: StructName("String") }, []))), (Var_("i"), U64), (Var_("j"), U64)], return_type: [Struct(QualifiedStructIdent { module: ModuleName("Self"), name: StructName("String") }, [])], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [(Var_("%#1"), Bool), (Var_("%#2"), Bool), (Var_("%#3"), Bool), (Var_("bytes"), Reference(false, Vector(U8))), (Var_("l"), U64)], code: [(BlockLabel_("0"), [MoveLoc(Var_("s")), ImmBorrowField(StructName("String"), [], Field_("bytes")), StLoc(Var_("bytes")), CopyLoc(Var_("bytes")), VecLen(U8), StLoc(Var_("l")), CopyLoc(Var_("j")), MoveLoc(Var_("l")), Le, BrFalse(BlockLabel_("2"))]), (BlockLabel_("1"), [CopyLoc(Var_("i")), CopyLoc(Var_("j")), Le, StLoc(Var_("%#1")), Branch(BlockLabel_("3"))]), (BlockLabel_("2"), [LdFalse, StLoc(Var_("%#1"))]), (BlockLabel_("3"), [MoveLoc(Var_("%#1")), BrFalse(BlockLabel_("5"))]), (BlockLabel_("4"), [CopyLoc(Var_("bytes")), CopyLoc(Var_("i")), Call(ModuleName("Self"), FunctionName("internal_is_char_boundary"), []), StLoc(Var_("%#2")), Branch(BlockLabel_("6"))]), (BlockLabel_("5"), [LdFalse, StLoc(Var_("%#2"))]), (BlockLabel_("6"), [MoveLoc(Var_("%#2")), BrFalse(BlockLabel_("8"))]), (BlockLabel_("7"), [CopyLoc(Var_("bytes")), CopyLoc(Var_("j")), Call(ModuleName("Self"), FunctionName("internal_is_char_boundary"), []), StLoc(Var_("%#3")), Branch(BlockLabel_("9"))]), (BlockLabel_("8"), [LdFalse, StLoc(Var_("%#3"))]), (BlockLabel_("9"), [MoveLoc(Var_("%#3")), BrFalse(BlockLabel_("11")), Branch(BlockLabel_("12"))]), (BlockLabel_("11"), [MoveLoc(Var_("bytes")), Pop, LdNamedConst(ConstantName("EINVALID_INDEX")), Abort]), (BlockLabel_("12"), [MoveLoc(Var_("bytes")), MoveLoc(Var_("i")), MoveLoc(Var_("j")), Call(ModuleName("Self"), FunctionName("internal_sub_string"), []), Pack(StructName("String"), []), Ret])] } }), (FunctionName("try_utf8"), Function_ { visibility: Public, is_entry: false, signature: FunctionSignature { formals: [(Var_("bytes"), Vector(U8))], return_type: [Struct(QualifiedStructIdent { module: ModuleName("1::option"), name: StructName("Option") }, [Struct(QualifiedStructIdent { module: ModuleName("Self"), name: StructName("String") }, [])])], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [(Var_("%#1"), Struct(QualifiedStructIdent { module: ModuleName("1::option"), name: StructName("Option") }, [Struct(QualifiedStructIdent { module: ModuleName("Self"), name: StructName("String") }, [])]))], code: [(BlockLabel_("0"), [ImmBorrowLoc(Var_("bytes")), Call(ModuleName("Self"), FunctionName("internal_check_utf8"), []), BrFalse(BlockLabel_("2"))]), (BlockLabel_("1"), [MoveLoc(Var_("bytes")), Pack(StructName("String"), []), Call(ModuleName("1::option"), FunctionName("some"), [Struct(QualifiedStructIdent { module: ModuleName("Self"), name: StructName("String") }, [])]), StLoc(Var_("%#1")), Branch(BlockLabel_("3"))]), (BlockLabel_("2"), [Call(ModuleName("1::option"), FunctionName("none"), [Struct(QualifiedStructIdent { module: ModuleName("Self"), name: StructName("String") }, [])]), StLoc(Var_("%#1"))]), (BlockLabel_("3"), [MoveLoc(Var_("%#1")), Ret])] } }), (FunctionName("unit_test_poison"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [], code: [(BlockLabel_("0"), [LdU64(0), Call(ModuleName("1::unit_test"), FunctionName("create_signers_for_testing"), []), Pop, Ret])] } }), (FunctionName("utf8"), Function_ { visibility: Public, is_entry: false, signature: FunctionSignature { formals: [(Var_("bytes"), Vector(U8))], return_type: [Struct(QualifiedStructIdent { module: ModuleName("Self"), name: StructName("String") }, [])], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [], code: [(BlockLabel_("0"), [ImmBorrowLoc(Var_("bytes")), Call(ModuleName("Self"), FunctionName("internal_check_utf8"), []), BrFalse(BlockLabel_("2")), Branch(BlockLabel_("3"))]), (BlockLabel_("2"), [LdNamedConst(ConstantName("EINVALID_UTF8")), Abort]), (BlockLabel_("3"), [MoveLoc(Var_("bytes")), Pack(StructName("String"), []), Ret])] } })], synthetics: [] }
IS this part executed?3 in module in translate.rs []
IS this part executed?1 in module in translate.rs
IS this part executed?2 in module in translate.rs
IS this part executed?1 in compile_module function in compiler.rs
yj ModuleDefinition { loc: Loc { file_hash: "60514f5831f14245e692cd8d54f74231b96465a3668dc9213d3f4e0a853d2d16", start: 25, end: 37 }, identifier: ModuleIdent { name: ModuleName("string_tests"), address: 00000000000000000000000000000001 }, friends: [], imports: [ImportDefinition { ident: ModuleIdent { name: ModuleName("string"), address: 00000000000000000000000000000001 }, alias: ModuleName("1::string") }, ImportDefinition { ident: ModuleIdent { name: ModuleName("unit_test"), address: 00000000000000000000000000000001 }, alias: ModuleName("1::unit_test") }], explicit_dependency_declarations: [ModuleDependency { name: ModuleName("1::unit_test"), structs: [], functions: [FunctionDependency { name: FunctionName("create_signers_for_testing"), signature: FunctionSignature { formals: [(Var_("num_signers"), U64)], return_type: [Vector(Signer)], type_formals: [] } }] }, ModuleDependency { name: ModuleName("1::string"), structs: [StructDependency { abilities: {Copy, Drop, Store}, name: StructName("String"), type_formals: [] }], functions: [FunctionDependency { name: FunctionName("append"), signature: FunctionSignature { formals: [(Var_("s"), Reference(true, Struct(QualifiedStructIdent { module: ModuleName("1::string"), name: StructName("String") }, []))), (Var_("r"), Struct(QualifiedStructIdent { module: ModuleName("1::string"), name: StructName("String") }, []))], return_type: [], type_formals: [] } }, FunctionDependency { name: FunctionName("index_of"), signature: FunctionSignature { formals: [(Var_("s"), Reference(false, Struct(QualifiedStructIdent { module: ModuleName("1::string"), name: StructName("String") }, []))), (Var_("r"), Reference(false, Struct(QualifiedStructIdent { module: ModuleName("1::string"), name: StructName("String") }, [])))], return_type: [U64], type_formals: [] } }, FunctionDependency { name: FunctionName("insert"), signature: FunctionSignature { formals: [(Var_("s"), Reference(true, Struct(QualifiedStructIdent { module: ModuleName("1::string"), name: StructName("String") }, []))), (Var_("at"), U64), (Var_("o"), Struct(QualifiedStructIdent { module: ModuleName("1::string"), name: StructName("String") }, []))], return_type: [], type_formals: [] } }, FunctionDependency { name: FunctionName("is_empty"), signature: FunctionSignature { formals: [(Var_("s"), Reference(false, Struct(QualifiedStructIdent { module: ModuleName("1::string"), name: StructName("String") }, [])))], return_type: [Bool], type_formals: [] } }, FunctionDependency { name: FunctionName("length"), signature: FunctionSignature { formals: [(Var_("s"), Reference(false, Struct(QualifiedStructIdent { module: ModuleName("1::string"), name: StructName("String") }, [])))], return_type: [U64], type_formals: [] } }, FunctionDependency { name: FunctionName("sub_string"), signature: FunctionSignature { formals: [(Var_("s"), Reference(false, Struct(QualifiedStructIdent { module: ModuleName("1::string"), name: StructName("String") }, []))), (Var_("i"), U64), (Var_("j"), U64)], return_type: [Struct(QualifiedStructIdent { module: ModuleName("1::string"), name: StructName("String") }, [])], type_formals: [] } }, FunctionDependency { name: FunctionName("utf8"), signature: FunctionSignature { formals: [(Var_("bytes"), Vector(U8))], return_type: [Struct(QualifiedStructIdent { module: ModuleName("1::string"), name: StructName("String") }, [])], type_formals: [] } }] }], structs: [], constants: [], functions: [(FunctionName("test_append"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [(Var_("s"), Struct(QualifiedStructIdent { module: ModuleName("1::string"), name: StructName("String") }, []))], code: [(BlockLabel_("0"), [LdConst(Vector(U8), Vector([U8(97), U8(98), U8(99), U8(100)])), Call(ModuleName("1::string"), FunctionName("utf8"), []), StLoc(Var_("s")), MutBorrowLoc(Var_("s")), LdConst(Vector(U8), Vector([U8(101), U8(102)])), Call(ModuleName("1::string"), FunctionName("utf8"), []), Call(ModuleName("1::string"), FunctionName("append"), []), MoveLoc(Var_("s")), LdConst(Vector(U8), Vector([U8(97), U8(98), U8(99), U8(100), U8(101), U8(102)])), Call(ModuleName("1::string"), FunctionName("utf8"), []), Eq, BrFalse(BlockLabel_("2")), Branch(BlockLabel_("3"))]), (BlockLabel_("2"), [LdU64(22), Abort]), (BlockLabel_("3"), [Ret])] } }), (FunctionName("test_index_of"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [(Var_("r"), Struct(QualifiedStructIdent { module: ModuleName("1::string"), name: StructName("String") }, [])), (Var_("s"), Struct(QualifiedStructIdent { module: ModuleName("1::string"), name: StructName("String") }, []))], code: [(BlockLabel_("0"), [LdConst(Vector(U8), Vector([U8(97), U8(98), U8(99), U8(100)])), Call(ModuleName("1::string"), FunctionName("utf8"), []), StLoc(Var_("s")), LdConst(Vector(U8), Vector([U8(98), U8(99)])), Call(ModuleName("1::string"), FunctionName("utf8"), []), StLoc(Var_("r")), ImmBorrowLoc(Var_("s")), ImmBorrowLoc(Var_("r")), Call(ModuleName("1::string"), FunctionName("index_of"), []), LdU64(1), Eq, BrFalse(BlockLabel_("2")), Branch(BlockLabel_("3"))]), (BlockLabel_("2"), [LdU64(22), Abort]), (BlockLabel_("3"), [Ret])] } }), (FunctionName("test_index_of_fail"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [(Var_("r"), Struct(QualifiedStructIdent { module: ModuleName("1::string"), name: StructName("String") }, [])), (Var_("s"), Struct(QualifiedStructIdent { module: ModuleName("1::string"), name: StructName("String") }, []))], code: [(BlockLabel_("0"), [LdConst(Vector(U8), Vector([U8(97), U8(98), U8(99), U8(100)])), Call(ModuleName("1::string"), FunctionName("utf8"), []), StLoc(Var_("s")), LdConst(Vector(U8), Vector([U8(98), U8(99), U8(101)])), Call(ModuleName("1::string"), FunctionName("utf8"), []), StLoc(Var_("r")), ImmBorrowLoc(Var_("s")), ImmBorrowLoc(Var_("r")), Call(ModuleName("1::string"), FunctionName("index_of"), []), LdU64(4), Eq, BrFalse(BlockLabel_("2")), Branch(BlockLabel_("3"))]), (BlockLabel_("2"), [LdU64(22), Abort]), (BlockLabel_("3"), [Ret])] } }), (FunctionName("test_insert"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [(Var_("s"), Struct(QualifiedStructIdent { module: ModuleName("1::string"), name: StructName("String") }, []))], code: [(BlockLabel_("0"), [LdConst(Vector(U8), Vector([U8(97), U8(98), U8(99), U8(100)])), Call(ModuleName("1::string"), FunctionName("utf8"), []), StLoc(Var_("s")), MutBorrowLoc(Var_("s")), LdU64(1), LdConst(Vector(U8), Vector([U8(120), U8(121)])), Call(ModuleName("1::string"), FunctionName("utf8"), []), Call(ModuleName("1::string"), FunctionName("insert"), []), MoveLoc(Var_("s")), LdConst(Vector(U8), Vector([U8(97), U8(120), U8(121), U8(98), U8(99), U8(100)])), Call(ModuleName("1::string"), FunctionName("utf8"), []), Eq, BrFalse(BlockLabel_("2")), Branch(BlockLabel_("3"))]), (BlockLabel_("2"), [LdU64(22), Abort]), (BlockLabel_("3"), [Ret])] } }), (FunctionName("test_invalid_utf8"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [(Var_("s"), Struct(QualifiedStructIdent { module: ModuleName("1::string"), name: StructName("String") }, []))], code: [(BlockLabel_("0"), [LdConst(Vector(U8), Vector([U8(0), U8(159), U8(146), U8(150)])), Call(ModuleName("1::string"), FunctionName("utf8"), []), StLoc(Var_("s")), ImmBorrowLoc(Var_("s")), Call(ModuleName("1::string"), FunctionName("length"), []), LdU64(1), Eq, BrFalse(BlockLabel_("2")), Branch(BlockLabel_("3"))]), (BlockLabel_("2"), [LdU64(22), Abort]), (BlockLabel_("3"), [Ret])] } }), (FunctionName("test_sub_string"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [(Var_("s"), Struct(QualifiedStructIdent { module: ModuleName("1::string"), name: StructName("String") }, []))], code: [(BlockLabel_("0"), [LdConst(Vector(U8), Vector([U8(97), U8(98), U8(99), U8(100)])), Call(ModuleName("1::string"), FunctionName("utf8"), []), StLoc(Var_("s")), ImmBorrowLoc(Var_("s")), LdU64(2), LdU64(4), Call(ModuleName("1::string"), FunctionName("sub_string"), []), LdConst(Vector(U8), Vector([U8(99), U8(100)])), Call(ModuleName("1::string"), FunctionName("utf8"), []), Eq, BrFalse(BlockLabel_("2")), Branch(BlockLabel_("3"))]), (BlockLabel_("2"), [LdU64(22), Abort]), (BlockLabel_("3"), [Ret])] } }), (FunctionName("test_sub_string_empty"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [(Var_("s"), Struct(QualifiedStructIdent { module: ModuleName("1::string"), name: StructName("String") }, [])), (Var_("sub"), Struct(QualifiedStructIdent { module: ModuleName("1::string"), name: StructName("String") }, []))], code: [(BlockLabel_("0"), [LdConst(Vector(U8), Vector([U8(97), U8(98), U8(99), U8(100)])), Call(ModuleName("1::string"), FunctionName("utf8"), []), StLoc(Var_("s")), ImmBorrowLoc(Var_("s")), LdU64(4), LdU64(4), Call(ModuleName("1::string"), FunctionName("sub_string"), []), StLoc(Var_("sub")), ImmBorrowLoc(Var_("sub")), Call(ModuleName("1::string"), FunctionName("is_empty"), []), BrFalse(BlockLabel_("2")), Branch(BlockLabel_("3"))]), (BlockLabel_("2"), [LdU64(22), Abort]), (BlockLabel_("3"), [Ret])] } }), (FunctionName("test_sub_string_invalid_boundary"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [(Var_("s"), Struct(QualifiedStructIdent { module: ModuleName("1::string"), name: StructName("String") }, []))], code: [(BlockLabel_("0"), [LdConst(Vector(U8), Vector([U8(240), U8(159), U8(146), U8(150)])), Call(ModuleName("1::string"), FunctionName("utf8"), []), StLoc(Var_("s")), ImmBorrowLoc(Var_("s")), LdU64(1), LdU64(4), Call(ModuleName("1::string"), FunctionName("sub_string"), []), Pop, Ret])] } }), (FunctionName("test_sub_string_invalid_index"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [(Var_("s"), Struct(QualifiedStructIdent { module: ModuleName("1::string"), name: StructName("String") }, []))], code: [(BlockLabel_("0"), [LdConst(Vector(U8), Vector([U8(97), U8(98), U8(99), U8(100)])), Call(ModuleName("1::string"), FunctionName("utf8"), []), StLoc(Var_("s")), ImmBorrowLoc(Var_("s")), LdU64(4), LdU64(5), Call(ModuleName("1::string"), FunctionName("sub_string"), []), Pop, Ret])] } }), (FunctionName("test_valid_utf8"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [(Var_("s"), Struct(QualifiedStructIdent { module: ModuleName("1::string"), name: StructName("String") }, []))], code: [(BlockLabel_("0"), [LdConst(Vector(U8), Vector([U8(240), U8(159), U8(146), U8(150)])), Call(ModuleName("1::string"), FunctionName("utf8"), []), StLoc(Var_("s")), ImmBorrowLoc(Var_("s")), Call(ModuleName("1::string"), FunctionName("length"), []), LdU64(4), Eq, BrFalse(BlockLabel_("2")), Branch(BlockLabel_("3"))]), (BlockLabel_("2"), [LdU64(22), Abort]), (BlockLabel_("3"), [Ret])] } }), (FunctionName("unit_test_poison"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [], code: [(BlockLabel_("0"), [LdU64(0), Call(ModuleName("1::unit_test"), FunctionName("create_signers_for_testing"), []), Pop, Ret])] } })], synthetics: [] }
IS this part executed?3 in module in translate.rs []
IS this part executed?1 in module in translate.rs
IS this part executed?2 in module in translate.rs
IS this part executed?1 in compile_module function in compiler.rs
yj ModuleDefinition { loc: Loc { file_hash: "3b70d2a3093dfa9565d0d2584a577593b5bb1784b25f3d48e7cae30cbc8c6b43", start: 84, end: 93 }, identifier: ModuleIdent { name: ModuleName("type_name"), address: 00000000000000000000000000000001 }, friends: [], imports: [ImportDefinition { ident: ModuleIdent { name: ModuleName("ascii"), address: 00000000000000000000000000000001 }, alias: ModuleName("1::ascii") }, ImportDefinition { ident: ModuleIdent { name: ModuleName("unit_test"), address: 00000000000000000000000000000001 }, alias: ModuleName("1::unit_test") }], explicit_dependency_declarations: [ModuleDependency { name: ModuleName("1::unit_test"), structs: [], functions: [FunctionDependency { name: FunctionName("create_signers_for_testing"), signature: FunctionSignature { formals: [(Var_("num_signers"), U64)], return_type: [Vector(Signer)], type_formals: [] } }] }, ModuleDependency { name: ModuleName("1::ascii"), structs: [StructDependency { abilities: {Copy, Drop, Store}, name: StructName("String"), type_formals: [] }], functions: [] }], structs: [StructDefinition_ { abilities: {Copy, Drop, Store}, name: StructName("TypeName"), type_formals: [], fields: Move { fields: [(Field_("name"), Struct(QualifiedStructIdent { module: ModuleName("1::ascii"), name: StructName("String") }, []))] }, invariants: [] }], constants: [], functions: [(FunctionName("borrow_string"), Function_ { visibility: Public, is_entry: false, signature: FunctionSignature { formals: [(Var_("self"), Reference(false, Struct(QualifiedStructIdent { module: ModuleName("Self"), name: StructName("TypeName") }, [])))], return_type: [Reference(false, Struct(QualifiedStructIdent { module: ModuleName("1::ascii"), name: StructName("String") }, []))], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [], code: [(BlockLabel_("0"), [MoveLoc(Var_("self")), ImmBorrowField(StructName("TypeName"), [], Field_("name")), Ret])] } }), (FunctionName("get"), Function_ { visibility: Public, is_entry: false, signature: FunctionSignature { formals: [], return_type: [Struct(QualifiedStructIdent { module: ModuleName("Self"), name: StructName("TypeName") }, [])], type_formals: [(TypeVar_("T"), {})] }, acquires: [], specifications: [], body: Native }), (FunctionName("into_string"), Function_ { visibility: Public, is_entry: false, signature: FunctionSignature { formals: [(Var_("self"), Struct(QualifiedStructIdent { module: ModuleName("Self"), name: StructName("TypeName") }, []))], return_type: [Struct(QualifiedStructIdent { module: ModuleName("1::ascii"), name: StructName("String") }, [])], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [], code: [(BlockLabel_("0"), [ImmBorrowLoc(Var_("self")), ImmBorrowField(StructName("TypeName"), [], Field_("name")), ReadRef, Ret])] } }), (FunctionName("unit_test_poison"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [], code: [(BlockLabel_("0"), [LdU64(0), Call(ModuleName("1::unit_test"), FunctionName("create_signers_for_testing"), []), Pop, Ret])] } })], synthetics: [] }
IS this part executed?3 in module in translate.rs []
IS this part executed?1 in module in translate.rs
IS this part executed?2 in module in translate.rs
IS this part executed?1 in compile_module function in compiler.rs
yj ModuleDefinition { loc: Loc { file_hash: "d57d7123741ff47d29ff3841044517bf2847da451e14bfc07067ef15669b9c0a", start: 25, end: 37 }, identifier: ModuleIdent { name: ModuleName("vector_tests"), address: 00000000000000000000000000000001 }, friends: [], imports: [ImportDefinition { ident: ModuleIdent { name: ModuleName("unit_test"), address: 00000000000000000000000000000001 }, alias: ModuleName("1::unit_test") }, ImportDefinition { ident: ModuleIdent { name: ModuleName("vector"), address: 00000000000000000000000000000001 }, alias: ModuleName("1::vector") }], explicit_dependency_declarations: [ModuleDependency { name: ModuleName("1::unit_test"), structs: [], functions: [FunctionDependency { name: FunctionName("create_signers_for_testing"), signature: FunctionSignature { formals: [(Var_("num_signers"), U64)], return_type: [Vector(Signer)], type_formals: [] } }] }, ModuleDependency { name: ModuleName("1::vector"), structs: [], functions: [FunctionDependency { name: FunctionName("append"), signature: FunctionSignature { formals: [(Var_("lhs"), Reference(true, Vector(TypeParameter(TypeVar_("Element"))))), (Var_("other"), Vector(TypeParameter(TypeVar_("Element"))))], return_type: [], type_formals: [(TypeVar_("Element"), {})] } }, FunctionDependency { name: FunctionName("contains"), signature: FunctionSignature { formals: [(Var_("v"), Reference(false, Vector(TypeParameter(TypeVar_("Element"))))), (Var_("e"), Reference(false, TypeParameter(TypeVar_("Element"))))], return_type: [Bool], type_formals: [(TypeVar_("Element"), {})] } }, FunctionDependency { name: FunctionName("index_of"), signature: FunctionSignature { formals: [(Var_("v"), Reference(false, Vector(TypeParameter(TypeVar_("Element"))))), (Var_("e"), Reference(false, TypeParameter(TypeVar_("Element"))))], return_type: [Bool, U64], type_formals: [(TypeVar_("Element"), {})] } }, FunctionDependency { name: FunctionName("insert"), signature: FunctionSignature { formals: [(Var_("v"), Reference(true, Vector(TypeParameter(TypeVar_("Element"))))), (Var_("e"), TypeParameter(TypeVar_("Element"))), (Var_("i"), U64)], return_type: [], type_formals: [(TypeVar_("Element"), {})] } }, FunctionDependency { name: FunctionName("is_empty"), signature: FunctionSignature { formals: [(Var_("v"), Reference(false, Vector(TypeParameter(TypeVar_("Element")))))], return_type: [Bool], type_formals: [(TypeVar_("Element"), {})] } }, FunctionDependency { name: FunctionName("remove"), signature: FunctionSignature { formals: [(Var_("v"), Reference(true, Vector(TypeParameter(TypeVar_("Element"))))), (Var_("i"), U64)], return_type: [TypeParameter(TypeVar_("Element"))], type_formals: [(TypeVar_("Element"), {})] } }, FunctionDependency { name: FunctionName("reverse"), signature: FunctionSignature { formals: [(Var_("v"), Reference(true, Vector(TypeParameter(TypeVar_("Element")))))], return_type: [], type_formals: [(TypeVar_("Element"), {})] } }, FunctionDependency { name: FunctionName("singleton"), signature: FunctionSignature { formals: [(Var_("e"), TypeParameter(TypeVar_("Element")))], return_type: [Vector(TypeParameter(TypeVar_("Element")))], type_formals: [(TypeVar_("Element"), {})] } }, FunctionDependency { name: FunctionName("swap_remove"), signature: FunctionSignature { formals: [(Var_("v"), Reference(true, Vector(TypeParameter(TypeVar_("Element"))))), (Var_("i"), U64)], return_type: [TypeParameter(TypeVar_("Element"))], type_formals: [(TypeVar_("Element"), {})] } }] }], structs: [StructDefinition_ { abilities: {Drop}, name: StructName("Droppable"), type_formals: [], fields: Move { fields: [(Field_("dummy_field"), Bool)] }, invariants: [] }, StructDefinition_ { abilities: {}, name: StructName("NotDroppable"), type_formals: [], fields: Move { fields: [(Field_("dummy_field"), Bool)] }, invariants: [] }, StructDefinition_ { abilities: {Store}, name: StructName("R"), type_formals: [], fields: Move { fields: [(Field_("dummy_field"), Bool)] }, invariants: [] }], constants: [], functions: [(FunctionName("append_empties_is_empty"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [(Var_("v1"), Vector(U64)), (Var_("v2"), Vector(U64))], code: [(BlockLabel_("0"), [VecPack(U64, 0), StLoc(Var_("v1")), VecPack(U64, 0), StLoc(Var_("v2")), MutBorrowLoc(Var_("v1")), MoveLoc(Var_("v2")), Call(ModuleName("1::vector"), FunctionName("append"), [U64]), ImmBorrowLoc(Var_("v1")), Call(ModuleName("1::vector"), FunctionName("is_empty"), [U64]), BrFalse(BlockLabel_("2")), Branch(BlockLabel_("3"))]), (BlockLabel_("2"), [LdU64(0), Abort]), (BlockLabel_("3"), [Ret])] } }), (FunctionName("append_respects_order_empty_lhs"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [(Var_("v1"), Vector(U64)), (Var_("v2"), Vector(U64))], code: [(BlockLabel_("0"), [VecPack(U64, 0), StLoc(Var_("v1")), VecPack(U64, 0), StLoc(Var_("v2")), MutBorrowLoc(Var_("v2")), LdU64(0), VecPushBack(U64), MutBorrowLoc(Var_("v2")), LdU64(1), VecPushBack(U64), MutBorrowLoc(Var_("v2")), LdU64(2), VecPushBack(U64), MutBorrowLoc(Var_("v2")), LdU64(3), VecPushBack(U64), MutBorrowLoc(Var_("v1")), MoveLoc(Var_("v2")), Call(ModuleName("1::vector"), FunctionName("append"), [U64]), ImmBorrowLoc(Var_("v1")), Call(ModuleName("1::vector"), FunctionName("is_empty"), [U64]), Not, BrFalse(BlockLabel_("2")), Branch(BlockLabel_("3"))]), (BlockLabel_("2"), [LdU64(0), Abort]), (BlockLabel_("3"), [ImmBorrowLoc(Var_("v1")), VecLen(U64), LdU64(4), Eq, BrFalse(BlockLabel_("5")), Branch(BlockLabel_("6"))]), (BlockLabel_("5"), [LdU64(1), Abort]), (BlockLabel_("6"), [ImmBorrowLoc(Var_("v1")), LdU64(0), VecImmBorrow(U64), ReadRef, LdU64(0), Eq, BrFalse(BlockLabel_("8")), Branch(BlockLabel_("9"))]), (BlockLabel_("8"), [LdU64(2), Abort]), (BlockLabel_("9"), [ImmBorrowLoc(Var_("v1")), LdU64(1), VecImmBorrow(U64), ReadRef, LdU64(1), Eq, BrFalse(BlockLabel_("11")), Branch(BlockLabel_("12"))]), (BlockLabel_("11"), [LdU64(3), Abort]), (BlockLabel_("12"), [ImmBorrowLoc(Var_("v1")), LdU64(2), VecImmBorrow(U64), ReadRef, LdU64(2), Eq, BrFalse(BlockLabel_("14")), Branch(BlockLabel_("15"))]), (BlockLabel_("14"), [LdU64(4), Abort]), (BlockLabel_("15"), [ImmBorrowLoc(Var_("v1")), LdU64(3), VecImmBorrow(U64), ReadRef, LdU64(3), Eq, BrFalse(BlockLabel_("17")), Branch(BlockLabel_("18"))]), (BlockLabel_("17"), [LdU64(5), Abort]), (BlockLabel_("18"), [Ret])] } }), (FunctionName("append_respects_order_empty_rhs"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [(Var_("v1"), Vector(U64)), (Var_("v2"), Vector(U64))], code: [(BlockLabel_("0"), [VecPack(U64, 0), StLoc(Var_("v1")), VecPack(U64, 0), StLoc(Var_("v2")), MutBorrowLoc(Var_("v1")), LdU64(0), VecPushBack(U64), MutBorrowLoc(Var_("v1")), LdU64(1), VecPushBack(U64), MutBorrowLoc(Var_("v1")), LdU64(2), VecPushBack(U64), MutBorrowLoc(Var_("v1")), LdU64(3), VecPushBack(U64), MutBorrowLoc(Var_("v1")), MoveLoc(Var_("v2")), Call(ModuleName("1::vector"), FunctionName("append"), [U64]), ImmBorrowLoc(Var_("v1")), Call(ModuleName("1::vector"), FunctionName("is_empty"), [U64]), Not, BrFalse(BlockLabel_("2")), Branch(BlockLabel_("3"))]), (BlockLabel_("2"), [LdU64(0), Abort]), (BlockLabel_("3"), [ImmBorrowLoc(Var_("v1")), VecLen(U64), LdU64(4), Eq, BrFalse(BlockLabel_("5")), Branch(BlockLabel_("6"))]), (BlockLabel_("5"), [LdU64(1), Abort]), (BlockLabel_("6"), [ImmBorrowLoc(Var_("v1")), LdU64(0), VecImmBorrow(U64), ReadRef, LdU64(0), Eq, BrFalse(BlockLabel_("8")), Branch(BlockLabel_("9"))]), (BlockLabel_("8"), [LdU64(2), Abort]), (BlockLabel_("9"), [ImmBorrowLoc(Var_("v1")), LdU64(1), VecImmBorrow(U64), ReadRef, LdU64(1), Eq, BrFalse(BlockLabel_("11")), Branch(BlockLabel_("12"))]), (BlockLabel_("11"), [LdU64(3), Abort]), (BlockLabel_("12"), [ImmBorrowLoc(Var_("v1")), LdU64(2), VecImmBorrow(U64), ReadRef, LdU64(2), Eq, BrFalse(BlockLabel_("14")), Branch(BlockLabel_("15"))]), (BlockLabel_("14"), [LdU64(4), Abort]), (BlockLabel_("15"), [ImmBorrowLoc(Var_("v1")), LdU64(3), VecImmBorrow(U64), ReadRef, LdU64(3), Eq, BrFalse(BlockLabel_("17")), Branch(BlockLabel_("18"))]), (BlockLabel_("17"), [LdU64(5), Abort]), (BlockLabel_("18"), [Ret])] } }), (FunctionName("append_respects_order_nonempty_rhs_lhs"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [(Var_("i"), U64), (Var_("v1"), Vector(U64)), (Var_("v2"), Vector(U64))], code: [(BlockLabel_("0"), [VecPack(U64, 0), StLoc(Var_("v1")), VecPack(U64, 0), StLoc(Var_("v2")), MutBorrowLoc(Var_("v1")), LdU64(0), VecPushBack(U64), MutBorrowLoc(Var_("v1")), LdU64(1), VecPushBack(U64), MutBorrowLoc(Var_("v1")), LdU64(2), VecPushBack(U64), MutBorrowLoc(Var_("v1")), LdU64(3), VecPushBack(U64), MutBorrowLoc(Var_("v2")), LdU64(4), VecPushBack(U64), MutBorrowLoc(Var_("v2")), LdU64(5), VecPushBack(U64), MutBorrowLoc(Var_("v2")), LdU64(6), VecPushBack(U64), MutBorrowLoc(Var_("v2")), LdU64(7), VecPushBack(U64), MutBorrowLoc(Var_("v1")), MoveLoc(Var_("v2")), Call(ModuleName("1::vector"), FunctionName("append"), [U64]), ImmBorrowLoc(Var_("v1")), Call(ModuleName("1::vector"), FunctionName("is_empty"), [U64]), Not, BrFalse(BlockLabel_("2")), Branch(BlockLabel_("3"))]), (BlockLabel_("2"), [LdU64(0), Abort]), (BlockLabel_("3"), [ImmBorrowLoc(Var_("v1")), VecLen(U64), LdU64(8), Eq, BrFalse(BlockLabel_("5")), Branch(BlockLabel_("6"))]), (BlockLabel_("5"), [LdU64(1), Abort]), (BlockLabel_("6"), [LdU64(0), StLoc(Var_("i"))]), (BlockLabel_("7"), [CopyLoc(Var_("i")), LdU64(8), Lt, BrFalse(BlockLabel_("12")), Branch(BlockLabel_("8"))]), (BlockLabel_("8"), [ImmBorrowLoc(Var_("v1")), CopyLoc(Var_("i")), VecImmBorrow(U64), ReadRef, CopyLoc(Var_("i")), Eq, BrFalse(BlockLabel_("10")), Branch(BlockLabel_("11"))]), (BlockLabel_("10"), [MoveLoc(Var_("i")), Abort]), (BlockLabel_("11"), [MoveLoc(Var_("i")), LdU64(1), Add, StLoc(Var_("i")), Branch(BlockLabel_("7"))]), (BlockLabel_("12"), [Ret])] } }), (FunctionName("borrow_out_of_range"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [(Var_("v"), Vector(U64))], code: [(BlockLabel_("0"), [VecPack(U64, 0), StLoc(Var_("v")), MutBorrowLoc(Var_("v")), LdU64(7), VecPushBack(U64), ImmBorrowLoc(Var_("v")), LdU64(1), VecImmBorrow(U64), Pop, Ret])] } }), (FunctionName("destroy_empty"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [], code: [(BlockLabel_("0"), [VecPack(U64, 0), VecUnpack(U64, 0), VecPack(Struct(QualifiedStructIdent { module: ModuleName("Self"), name: StructName("R") }, []), 0), VecUnpack(Struct(QualifiedStructIdent { module: ModuleName("Self"), name: StructName("R") }, []), 0), Ret])] } }), (FunctionName("destroy_empty_with_pops"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [(Var_("v"), Vector(U64))], code: [(BlockLabel_("0"), [VecPack(U64, 0), StLoc(Var_("v")), MutBorrowLoc(Var_("v")), LdU64(42), VecPushBack(U64), MutBorrowLoc(Var_("v")), VecPopBack(U64), Pop, MoveLoc(Var_("v")), VecUnpack(U64, 0), Ret])] } }), (FunctionName("destroy_non_empty"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [(Var_("v"), Vector(U64))], code: [(BlockLabel_("0"), [VecPack(U64, 0), StLoc(Var_("v")), MutBorrowLoc(Var_("v")), LdU64(42), VecPushBack(U64), MoveLoc(Var_("v")), VecUnpack(U64, 0), Ret])] } }), (FunctionName("get_set_work"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [(Var_("vec"), Vector(U64))], code: [(BlockLabel_("0"), [VecPack(U64, 0), StLoc(Var_("vec")), MutBorrowLoc(Var_("vec")), LdU64(0), VecPushBack(U64), MutBorrowLoc(Var_("vec")), LdU64(1), VecPushBack(U64), ImmBorrowLoc(Var_("vec")), LdU64(1), VecImmBorrow(U64), ReadRef, LdU64(1), Eq, BrFalse(BlockLabel_("2")), Branch(BlockLabel_("3"))]), (BlockLabel_("2"), [LdU64(0), Abort]), (BlockLabel_("3"), [ImmBorrowLoc(Var_("vec")), LdU64(0), VecImmBorrow(U64), ReadRef, LdU64(0), Eq, BrFalse(BlockLabel_("5")), Branch(BlockLabel_("6"))]), (BlockLabel_("5"), [LdU64(1), Abort]), (BlockLabel_("6"), [LdU64(17), MutBorrowLoc(Var_("vec")), LdU64(0), VecMutBorrow(U64), WriteRef, ImmBorrowLoc(Var_("vec")), LdU64(1), VecImmBorrow(U64), ReadRef, LdU64(1), Eq, BrFalse(BlockLabel_("8")), Branch(BlockLabel_("9"))]), (BlockLabel_("8"), [LdU64(0), Abort]), (BlockLabel_("9"), [ImmBorrowLoc(Var_("vec")), LdU64(0), VecImmBorrow(U64), ReadRef, LdU64(17), Eq, BrFalse(BlockLabel_("11")), Branch(BlockLabel_("12"))]), (BlockLabel_("11"), [LdU64(0), Abort]), (BlockLabel_("12"), [Ret])] } }), (FunctionName("index_of_empty_not_has"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [(Var_("%#1"), Bool), (Var_("%#2"), Reference(false, Vector(Bool))), (Var_("index"), U64), (Var_("v"), Vector(Bool))], code: [(BlockLabel_("0"), [VecPack(Bool, 0), StLoc(Var_("v")), ImmBorrowLoc(Var_("v")), StLoc(Var_("%#2")), LdTrue, StLoc(Var_("%#1")), MoveLoc(Var_("%#2")), ImmBorrowLoc(Var_("%#1")), Call(ModuleName("1::vector"), FunctionName("index_of"), [Bool]), StLoc(Var_("index")), Not, BrFalse(BlockLabel_("2")), Branch(BlockLabel_("3"))]), (BlockLabel_("2"), [LdU64(0), Abort]), (BlockLabel_("3"), [MoveLoc(Var_("index")), LdU64(0), Eq, BrFalse(BlockLabel_("5")), Branch(BlockLabel_("6"))]), (BlockLabel_("5"), [LdU64(1), Abort]), (BlockLabel_("6"), [Ret])] } }), (FunctionName("index_of_nonempty_has"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [(Var_("%#1"), Bool), (Var_("%#2"), Reference(false, Vector(Bool))), (Var_("index"), U64), (Var_("v"), Vector(Bool))], code: [(BlockLabel_("0"), [VecPack(Bool, 0), StLoc(Var_("v")), MutBorrowLoc(Var_("v")), LdFalse, VecPushBack(Bool), MutBorrowLoc(Var_("v")), LdTrue, VecPushBack(Bool), ImmBorrowLoc(Var_("v")), StLoc(Var_("%#2")), LdTrue, StLoc(Var_("%#1")), MoveLoc(Var_("%#2")), ImmBorrowLoc(Var_("%#1")), Call(ModuleName("1::vector"), FunctionName("index_of"), [Bool]), StLoc(Var_("index")), BrFalse(BlockLabel_("2")), Branch(BlockLabel_("3"))]), (BlockLabel_("2"), [LdU64(0), Abort]), (BlockLabel_("3"), [MoveLoc(Var_("index")), LdU64(1), Eq, BrFalse(BlockLabel_("5")), Branch(BlockLabel_("6"))]), (BlockLabel_("5"), [LdU64(1), Abort]), (BlockLabel_("6"), [Ret])] } }), (FunctionName("index_of_nonempty_has_multiple_occurences"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [(Var_("%#1"), Bool), (Var_("%#2"), Reference(false, Vector(Bool))), (Var_("index"), U64), (Var_("v"), Vector(Bool))], code: [(BlockLabel_("0"), [VecPack(Bool, 0), StLoc(Var_("v")), MutBorrowLoc(Var_("v")), LdFalse, VecPushBack(Bool), MutBorrowLoc(Var_("v")), LdTrue, VecPushBack(Bool), MutBorrowLoc(Var_("v")), LdTrue, VecPushBack(Bool), ImmBorrowLoc(Var_("v")), StLoc(Var_("%#2")), LdTrue, StLoc(Var_("%#1")), MoveLoc(Var_("%#2")), ImmBorrowLoc(Var_("%#1")), Call(ModuleName("1::vector"), FunctionName("index_of"), [Bool]), StLoc(Var_("index")), BrFalse(BlockLabel_("2")), Branch(BlockLabel_("3"))]), (BlockLabel_("2"), [LdU64(0), Abort]), (BlockLabel_("3"), [MoveLoc(Var_("index")), LdU64(1), Eq, BrFalse(BlockLabel_("5")), Branch(BlockLabel_("6"))]), (BlockLabel_("5"), [LdU64(1), Abort]), (BlockLabel_("6"), [Ret])] } }), (FunctionName("index_of_nonempty_not_has"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [(Var_("%#1"), Bool), (Var_("%#2"), Reference(false, Vector(Bool))), (Var_("index"), U64), (Var_("v"), Vector(Bool))], code: [(BlockLabel_("0"), [VecPack(Bool, 0), StLoc(Var_("v")), MutBorrowLoc(Var_("v")), LdFalse, VecPushBack(Bool), ImmBorrowLoc(Var_("v")), StLoc(Var_("%#2")), LdTrue, StLoc(Var_("%#1")), MoveLoc(Var_("%#2")), ImmBorrowLoc(Var_("%#1")), Call(ModuleName("1::vector"), FunctionName("index_of"), [Bool]), StLoc(Var_("index")), Not, BrFalse(BlockLabel_("2")), Branch(BlockLabel_("3"))]), (BlockLabel_("2"), [LdU64(0), Abort]), (BlockLabel_("3"), [MoveLoc(Var_("index")), LdU64(0), Eq, BrFalse(BlockLabel_("5")), Branch(BlockLabel_("6"))]), (BlockLabel_("5"), [LdU64(1), Abort]), (BlockLabel_("6"), [Ret])] } }), (FunctionName("insert_at_end"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [(Var_("v"), Vector(U64))], code: [(BlockLabel_("0"), [LdConst(Vector(U64), Vector([])), StLoc(Var_("v")), MutBorrowLoc(Var_("v")), LdU64(6), LdU64(0), Call(ModuleName("1::vector"), FunctionName("insert"), [U64]), CopyLoc(Var_("v")), LdConst(Vector(U64), Vector([U64(6)])), Eq, BrFalse(BlockLabel_("2")), Branch(BlockLabel_("3"))]), (BlockLabel_("2"), [LdU64(0), Abort]), (BlockLabel_("3"), [MutBorrowLoc(Var_("v")), LdU64(7), LdU64(1), Call(ModuleName("1::vector"), FunctionName("insert"), [U64]), MoveLoc(Var_("v")), LdConst(Vector(U64), Vector([U64(6), U64(7)])), Eq, BrFalse(BlockLabel_("5")), Branch(BlockLabel_("6"))]), (BlockLabel_("5"), [LdU64(0), Abort]), (BlockLabel_("6"), [Ret])] } }), (FunctionName("insert_out_of_range"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [(Var_("v"), Vector(U64))], code: [(BlockLabel_("0"), [LdConst(Vector(U64), Vector([U64(7)])), StLoc(Var_("v")), MutBorrowLoc(Var_("v")), LdU64(6), LdU64(2), Call(ModuleName("1::vector"), FunctionName("insert"), [U64]), Ret])] } }), (FunctionName("length"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [(Var_("empty"), Vector(U64)), (Var_("i"), U64)], code: [(BlockLabel_("0"), [VecPack(U64, 0), StLoc(Var_("empty")), ImmBorrowLoc(Var_("empty")), VecLen(U64), LdU64(0), Eq, BrFalse(BlockLabel_("2")), Branch(BlockLabel_("3"))]), (BlockLabel_("2"), [LdU64(0), Abort]), (BlockLabel_("3"), [LdU64(0), StLoc(Var_("i"))]), (BlockLabel_("4"), [CopyLoc(Var_("i")), LdU64(42), Lt, BrFalse(BlockLabel_("9")), Branch(BlockLabel_("5"))]), (BlockLabel_("5"), [MutBorrowLoc(Var_("empty")), CopyLoc(Var_("i")), VecPushBack(U64), ImmBorrowLoc(Var_("empty")), VecLen(U64), CopyLoc(Var_("i")), LdU64(1), Add, Eq, BrFalse(BlockLabel_("7")), Branch(BlockLabel_("8"))]), (BlockLabel_("7"), [MoveLoc(Var_("i")), Abort]), (BlockLabel_("8"), [MoveLoc(Var_("i")), LdU64(1), Add, StLoc(Var_("i")), Branch(BlockLabel_("4"))]), (BlockLabel_("9"), [Ret])] } }), (FunctionName("pop_out_of_range"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [(Var_("v"), Vector(U64))], code: [(BlockLabel_("0"), [VecPack(U64, 0), StLoc(Var_("v")), MutBorrowLoc(Var_("v")), VecPopBack(U64), Pop, Ret])] } }), (FunctionName("pop_push_back"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [(Var_("i"), U64), (Var_("v"), Vector(U64))], code: [(BlockLabel_("0"), [VecPack(U64, 0), StLoc(Var_("v")), LdU64(0), StLoc(Var_("i"))]), (BlockLabel_("1"), [CopyLoc(Var_("i")), LdU64(42), Lt, BrFalse(BlockLabel_("4")), Branch(BlockLabel_("2"))]), (BlockLabel_("2"), [MutBorrowLoc(Var_("v")), CopyLoc(Var_("i")), VecPushBack(U64), MoveLoc(Var_("i")), LdU64(1), Add, StLoc(Var_("i")), Branch(BlockLabel_("1"))]), (BlockLabel_("4"), [CopyLoc(Var_("i")), LdU64(0), Gt, BrFalse(BlockLabel_("9")), Branch(BlockLabel_("5"))]), (BlockLabel_("5"), [MutBorrowLoc(Var_("v")), VecPopBack(U64), CopyLoc(Var_("i")), LdU64(1), Sub, Eq, BrFalse(BlockLabel_("7")), Branch(BlockLabel_("8"))]), (BlockLabel_("7"), [MoveLoc(Var_("i")), Abort]), (BlockLabel_("8"), [MoveLoc(Var_("i")), LdU64(1), Sub, StLoc(Var_("i")), Branch(BlockLabel_("4"))]), (BlockLabel_("9"), [Ret])] } }), (FunctionName("push_back_and_borrow"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [(Var_("v"), Vector(U64))], code: [(BlockLabel_("0"), [VecPack(U64, 0), StLoc(Var_("v")), MutBorrowLoc(Var_("v")), LdU64(7), VecPushBack(U64), ImmBorrowLoc(Var_("v")), Call(ModuleName("1::vector"), FunctionName("is_empty"), [U64]), Not, BrFalse(BlockLabel_("2")), Branch(BlockLabel_("3"))]), (BlockLabel_("2"), [LdU64(0), Abort]), (BlockLabel_("3"), [ImmBorrowLoc(Var_("v")), VecLen(U64), LdU64(1), Eq, BrFalse(BlockLabel_("5")), Branch(BlockLabel_("6"))]), (BlockLabel_("5"), [LdU64(1), Abort]), (BlockLabel_("6"), [ImmBorrowLoc(Var_("v")), LdU64(0), VecImmBorrow(U64), ReadRef, LdU64(7), Eq, BrFalse(BlockLabel_("8")), Branch(BlockLabel_("9"))]), (BlockLabel_("8"), [LdU64(2), Abort]), (BlockLabel_("9"), [MutBorrowLoc(Var_("v")), LdU64(8), VecPushBack(U64), ImmBorrowLoc(Var_("v")), VecLen(U64), LdU64(2), Eq, BrFalse(BlockLabel_("11")), Branch(BlockLabel_("12"))]), (BlockLabel_("11"), [LdU64(3), Abort]), (BlockLabel_("12"), [ImmBorrowLoc(Var_("v")), LdU64(0), VecImmBorrow(U64), ReadRef, LdU64(7), Eq, BrFalse(BlockLabel_("14")), Branch(BlockLabel_("15"))]), (BlockLabel_("14"), [LdU64(4), Abort]), (BlockLabel_("15"), [ImmBorrowLoc(Var_("v")), LdU64(1), VecImmBorrow(U64), ReadRef, LdU64(8), Eq, BrFalse(BlockLabel_("17")), Branch(BlockLabel_("18"))]), (BlockLabel_("17"), [LdU64(5), Abort]), (BlockLabel_("18"), [Ret])] } }), (FunctionName("remove_empty_vector"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [(Var_("v"), Vector(U64))], code: [(BlockLabel_("0"), [VecPack(U64, 0), StLoc(Var_("v")), MutBorrowLoc(Var_("v")), LdU64(0), Call(ModuleName("1::vector"), FunctionName("remove"), [U64]), Pop, Ret])] } }), (FunctionName("remove_nonsingleton_vector"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [(Var_("v"), Vector(U64))], code: [(BlockLabel_("0"), [VecPack(U64, 0), StLoc(Var_("v")), MutBorrowLoc(Var_("v")), LdU64(0), VecPushBack(U64), MutBorrowLoc(Var_("v")), LdU64(1), VecPushBack(U64), MutBorrowLoc(Var_("v")), LdU64(2), VecPushBack(U64), MutBorrowLoc(Var_("v")), LdU64(3), VecPushBack(U64), MutBorrowLoc(Var_("v")), LdU64(1), Call(ModuleName("1::vector"), FunctionName("remove"), [U64]), LdU64(1), Eq, BrFalse(BlockLabel_("2")), Branch(BlockLabel_("3"))]), (BlockLabel_("2"), [LdU64(0), Abort]), (BlockLabel_("3"), [ImmBorrowLoc(Var_("v")), VecLen(U64), LdU64(3), Eq, BrFalse(BlockLabel_("5")), Branch(BlockLabel_("6"))]), (BlockLabel_("5"), [LdU64(0), Abort]), (BlockLabel_("6"), [ImmBorrowLoc(Var_("v")), LdU64(0), VecImmBorrow(U64), ReadRef, LdU64(0), Eq, BrFalse(BlockLabel_("8")), Branch(BlockLabel_("9"))]), (BlockLabel_("8"), [LdU64(0), Abort]), (BlockLabel_("9"), [ImmBorrowLoc(Var_("v")), LdU64(1), VecImmBorrow(U64), ReadRef, LdU64(2), Eq, BrFalse(BlockLabel_("11")), Branch(BlockLabel_("12"))]), (BlockLabel_("11"), [LdU64(0), Abort]), (BlockLabel_("12"), [ImmBorrowLoc(Var_("v")), LdU64(2), VecImmBorrow(U64), ReadRef, LdU64(3), Eq, BrFalse(BlockLabel_("14")), Branch(BlockLabel_("15"))]), (BlockLabel_("14"), [LdU64(0), Abort]), (BlockLabel_("15"), [Ret])] } }), (FunctionName("remove_nonsingleton_vector_last_elem"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [(Var_("v"), Vector(U64))], code: [(BlockLabel_("0"), [VecPack(U64, 0), StLoc(Var_("v")), MutBorrowLoc(Var_("v")), LdU64(0), VecPushBack(U64), MutBorrowLoc(Var_("v")), LdU64(1), VecPushBack(U64), MutBorrowLoc(Var_("v")), LdU64(2), VecPushBack(U64), MutBorrowLoc(Var_("v")), LdU64(3), VecPushBack(U64), MutBorrowLoc(Var_("v")), LdU64(3), Call(ModuleName("1::vector"), FunctionName("remove"), [U64]), LdU64(3), Eq, BrFalse(BlockLabel_("2")), Branch(BlockLabel_("3"))]), (BlockLabel_("2"), [LdU64(0), Abort]), (BlockLabel_("3"), [ImmBorrowLoc(Var_("v")), VecLen(U64), LdU64(3), Eq, BrFalse(BlockLabel_("5")), Branch(BlockLabel_("6"))]), (BlockLabel_("5"), [LdU64(0), Abort]), (BlockLabel_("6"), [ImmBorrowLoc(Var_("v")), LdU64(0), VecImmBorrow(U64), ReadRef, LdU64(0), Eq, BrFalse(BlockLabel_("8")), Branch(BlockLabel_("9"))]), (BlockLabel_("8"), [LdU64(0), Abort]), (BlockLabel_("9"), [ImmBorrowLoc(Var_("v")), LdU64(1), VecImmBorrow(U64), ReadRef, LdU64(1), Eq, BrFalse(BlockLabel_("11")), Branch(BlockLabel_("12"))]), (BlockLabel_("11"), [LdU64(0), Abort]), (BlockLabel_("12"), [ImmBorrowLoc(Var_("v")), LdU64(2), VecImmBorrow(U64), ReadRef, LdU64(2), Eq, BrFalse(BlockLabel_("14")), Branch(BlockLabel_("15"))]), (BlockLabel_("14"), [LdU64(0), Abort]), (BlockLabel_("15"), [Ret])] } }), (FunctionName("remove_out_of_bound_index"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [(Var_("v"), Vector(U64))], code: [(BlockLabel_("0"), [VecPack(U64, 0), StLoc(Var_("v")), MutBorrowLoc(Var_("v")), LdU64(0), VecPushBack(U64), MutBorrowLoc(Var_("v")), LdU64(1), Call(ModuleName("1::vector"), FunctionName("remove"), [U64]), Pop, Ret])] } }), (FunctionName("remove_singleton_vector"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [(Var_("v"), Vector(U64))], code: [(BlockLabel_("0"), [VecPack(U64, 0), StLoc(Var_("v")), MutBorrowLoc(Var_("v")), LdU64(0), VecPushBack(U64), MutBorrowLoc(Var_("v")), LdU64(0), Call(ModuleName("1::vector"), FunctionName("remove"), [U64]), LdU64(0), Eq, BrFalse(BlockLabel_("2")), Branch(BlockLabel_("3"))]), (BlockLabel_("2"), [LdU64(0), Abort]), (BlockLabel_("3"), [ImmBorrowLoc(Var_("v")), VecLen(U64), LdU64(0), Eq, BrFalse(BlockLabel_("5")), Branch(BlockLabel_("6"))]), (BlockLabel_("5"), [LdU64(0), Abort]), (BlockLabel_("6"), [Ret])] } }), (FunctionName("reverse_singleton_vector"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [(Var_("v"), Vector(U64))], code: [(BlockLabel_("0"), [VecPack(U64, 0), StLoc(Var_("v")), MutBorrowLoc(Var_("v")), LdU64(0), VecPushBack(U64), ImmBorrowLoc(Var_("v")), LdU64(0), VecImmBorrow(U64), ReadRef, LdU64(0), Eq, BrFalse(BlockLabel_("2")), Branch(BlockLabel_("3"))]), (BlockLabel_("2"), [LdU64(1), Abort]), (BlockLabel_("3"), [MutBorrowLoc(Var_("v")), Call(ModuleName("1::vector"), FunctionName("reverse"), [U64]), ImmBorrowLoc(Var_("v")), LdU64(0), VecImmBorrow(U64), ReadRef, LdU64(0), Eq, BrFalse(BlockLabel_("5")), Branch(BlockLabel_("6"))]), (BlockLabel_("5"), [LdU64(2), Abort]), (BlockLabel_("6"), [Ret])] } }), (FunctionName("reverse_vector_empty"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [(Var_("is_empty"), Bool), (Var_("v"), Vector(U64))], code: [(BlockLabel_("0"), [VecPack(U64, 0), StLoc(Var_("v")), ImmBorrowLoc(Var_("v")), Call(ModuleName("1::vector"), FunctionName("is_empty"), [U64]), StLoc(Var_("is_empty")), MutBorrowLoc(Var_("v")), Call(ModuleName("1::vector"), FunctionName("reverse"), [U64]), MoveLoc(Var_("is_empty")), ImmBorrowLoc(Var_("v")), Call(ModuleName("1::vector"), FunctionName("is_empty"), [U64]), Eq, BrFalse(BlockLabel_("2")), Branch(BlockLabel_("3"))]), (BlockLabel_("2"), [LdU64(0), Abort]), (BlockLabel_("3"), [Ret])] } }), (FunctionName("reverse_vector_nonempty_even_length"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [(Var_("v"), Vector(U64))], code: [(BlockLabel_("0"), [VecPack(U64, 0), StLoc(Var_("v")), MutBorrowLoc(Var_("v")), LdU64(0), VecPushBack(U64), MutBorrowLoc(Var_("v")), LdU64(1), VecPushBack(U64), MutBorrowLoc(Var_("v")), LdU64(2), VecPushBack(U64), MutBorrowLoc(Var_("v")), LdU64(3), VecPushBack(U64), ImmBorrowLoc(Var_("v")), LdU64(0), VecImmBorrow(U64), ReadRef, LdU64(0), Eq, BrFalse(BlockLabel_("2")), Branch(BlockLabel_("3"))]), (BlockLabel_("2"), [LdU64(1), Abort]), (BlockLabel_("3"), [ImmBorrowLoc(Var_("v")), LdU64(1), VecImmBorrow(U64), ReadRef, LdU64(1), Eq, BrFalse(BlockLabel_("5")), Branch(BlockLabel_("6"))]), (BlockLabel_("5"), [LdU64(2), Abort]), (BlockLabel_("6"), [ImmBorrowLoc(Var_("v")), LdU64(2), VecImmBorrow(U64), ReadRef, LdU64(2), Eq, BrFalse(BlockLabel_("8")), Branch(BlockLabel_("9"))]), (BlockLabel_("8"), [LdU64(3), Abort]), (BlockLabel_("9"), [ImmBorrowLoc(Var_("v")), LdU64(3), VecImmBorrow(U64), ReadRef, LdU64(3), Eq, BrFalse(BlockLabel_("11")), Branch(BlockLabel_("12"))]), (BlockLabel_("11"), [LdU64(4), Abort]), (BlockLabel_("12"), [MutBorrowLoc(Var_("v")), Call(ModuleName("1::vector"), FunctionName("reverse"), [U64]), ImmBorrowLoc(Var_("v")), LdU64(3), VecImmBorrow(U64), ReadRef, LdU64(0), Eq, BrFalse(BlockLabel_("14")), Branch(BlockLabel_("15"))]), (BlockLabel_("14"), [LdU64(5), Abort]), (BlockLabel_("15"), [ImmBorrowLoc(Var_("v")), LdU64(2), VecImmBorrow(U64), ReadRef, LdU64(1), Eq, BrFalse(BlockLabel_("17")), Branch(BlockLabel_("18"))]), (BlockLabel_("17"), [LdU64(6), Abort]), (BlockLabel_("18"), [ImmBorrowLoc(Var_("v")), LdU64(1), VecImmBorrow(U64), ReadRef, LdU64(2), Eq, BrFalse(BlockLabel_("20")), Branch(BlockLabel_("21"))]), (BlockLabel_("20"), [LdU64(7), Abort]), (BlockLabel_("21"), [ImmBorrowLoc(Var_("v")), LdU64(0), VecImmBorrow(U64), ReadRef, LdU64(3), Eq, BrFalse(BlockLabel_("23")), Branch(BlockLabel_("24"))]), (BlockLabel_("23"), [LdU64(8), Abort]), (BlockLabel_("24"), [Ret])] } }), (FunctionName("reverse_vector_nonempty_odd_length_non_singleton"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [(Var_("v"), Vector(U64))], code: [(BlockLabel_("0"), [VecPack(U64, 0), StLoc(Var_("v")), MutBorrowLoc(Var_("v")), LdU64(0), VecPushBack(U64), MutBorrowLoc(Var_("v")), LdU64(1), VecPushBack(U64), MutBorrowLoc(Var_("v")), LdU64(2), VecPushBack(U64), ImmBorrowLoc(Var_("v")), LdU64(0), VecImmBorrow(U64), ReadRef, LdU64(0), Eq, BrFalse(BlockLabel_("2")), Branch(BlockLabel_("3"))]), (BlockLabel_("2"), [LdU64(1), Abort]), (BlockLabel_("3"), [ImmBorrowLoc(Var_("v")), LdU64(1), VecImmBorrow(U64), ReadRef, LdU64(1), Eq, BrFalse(BlockLabel_("5")), Branch(BlockLabel_("6"))]), (BlockLabel_("5"), [LdU64(2), Abort]), (BlockLabel_("6"), [ImmBorrowLoc(Var_("v")), LdU64(2), VecImmBorrow(U64), ReadRef, LdU64(2), Eq, BrFalse(BlockLabel_("8")), Branch(BlockLabel_("9"))]), (BlockLabel_("8"), [LdU64(3), Abort]), (BlockLabel_("9"), [MutBorrowLoc(Var_("v")), Call(ModuleName("1::vector"), FunctionName("reverse"), [U64]), ImmBorrowLoc(Var_("v")), LdU64(2), VecImmBorrow(U64), ReadRef, LdU64(0), Eq, BrFalse(BlockLabel_("11")), Branch(BlockLabel_("12"))]), (BlockLabel_("11"), [LdU64(4), Abort]), (BlockLabel_("12"), [ImmBorrowLoc(Var_("v")), LdU64(1), VecImmBorrow(U64), ReadRef, LdU64(1), Eq, BrFalse(BlockLabel_("14")), Branch(BlockLabel_("15"))]), (BlockLabel_("14"), [LdU64(5), Abort]), (BlockLabel_("15"), [ImmBorrowLoc(Var_("v")), LdU64(0), VecImmBorrow(U64), ReadRef, LdU64(2), Eq, BrFalse(BlockLabel_("17")), Branch(BlockLabel_("18"))]), (BlockLabel_("17"), [LdU64(6), Abort]), (BlockLabel_("18"), [Ret])] } }), (FunctionName("swap_different_indices"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [(Var_("vec"), Vector(U64))], code: [(BlockLabel_("0"), [VecPack(U64, 0), StLoc(Var_("vec")), MutBorrowLoc(Var_("vec")), LdU64(0), VecPushBack(U64), MutBorrowLoc(Var_("vec")), LdU64(1), VecPushBack(U64), MutBorrowLoc(Var_("vec")), LdU64(2), VecPushBack(U64), MutBorrowLoc(Var_("vec")), LdU64(3), VecPushBack(U64), MutBorrowLoc(Var_("vec")), LdU64(0), LdU64(3), VecSwap(U64), MutBorrowLoc(Var_("vec")), LdU64(1), LdU64(2), VecSwap(U64), ImmBorrowLoc(Var_("vec")), LdU64(0), VecImmBorrow(U64), ReadRef, LdU64(3), Eq, BrFalse(BlockLabel_("2")), Branch(BlockLabel_("3"))]), (BlockLabel_("2"), [LdU64(0), Abort]), (BlockLabel_("3"), [ImmBorrowLoc(Var_("vec")), LdU64(1), VecImmBorrow(U64), ReadRef, LdU64(2), Eq, BrFalse(BlockLabel_("5")), Branch(BlockLabel_("6"))]), (BlockLabel_("5"), [LdU64(0), Abort]), (BlockLabel_("6"), [ImmBorrowLoc(Var_("vec")), LdU64(2), VecImmBorrow(U64), ReadRef, LdU64(1), Eq, BrFalse(BlockLabel_("8")), Branch(BlockLabel_("9"))]), (BlockLabel_("8"), [LdU64(0), Abort]), (BlockLabel_("9"), [ImmBorrowLoc(Var_("vec")), LdU64(3), VecImmBorrow(U64), ReadRef, LdU64(0), Eq, BrFalse(BlockLabel_("11")), Branch(BlockLabel_("12"))]), (BlockLabel_("11"), [LdU64(0), Abort]), (BlockLabel_("12"), [Ret])] } }), (FunctionName("swap_empty"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [(Var_("v"), Vector(U64))], code: [(BlockLabel_("0"), [VecPack(U64, 0), StLoc(Var_("v")), MutBorrowLoc(Var_("v")), LdU64(0), LdU64(0), VecSwap(U64), Ret])] } }), (FunctionName("swap_out_of_range"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [(Var_("v"), Vector(U64))], code: [(BlockLabel_("0"), [VecPack(U64, 0), StLoc(Var_("v")), MutBorrowLoc(Var_("v")), LdU64(0), VecPushBack(U64), MutBorrowLoc(Var_("v")), LdU64(1), VecPushBack(U64), MutBorrowLoc(Var_("v")), LdU64(2), VecPushBack(U64), MutBorrowLoc(Var_("v")), LdU64(3), VecPushBack(U64), MutBorrowLoc(Var_("v")), LdU64(1), LdU64(10), VecSwap(U64), Ret])] } }), (FunctionName("swap_remove_empty"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [(Var_("v"), Vector(U64))], code: [(BlockLabel_("0"), [VecPack(U64, 0), StLoc(Var_("v")), MutBorrowLoc(Var_("v")), LdU64(0), Call(ModuleName("1::vector"), FunctionName("swap_remove"), [U64]), Pop, Ret])] } }), (FunctionName("swap_remove_end_of_vector"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [(Var_("v"), Vector(U64))], code: [(BlockLabel_("0"), [VecPack(U64, 0), StLoc(Var_("v")), MutBorrowLoc(Var_("v")), LdU64(0), VecPushBack(U64), MutBorrowLoc(Var_("v")), LdU64(1), VecPushBack(U64), MutBorrowLoc(Var_("v")), LdU64(2), VecPushBack(U64), MutBorrowLoc(Var_("v")), LdU64(3), VecPushBack(U64), ImmBorrowLoc(Var_("v")), LdU64(0), VecImmBorrow(U64), ReadRef, LdU64(0), Eq, BrFalse(BlockLabel_("2")), Branch(BlockLabel_("3"))]), (BlockLabel_("2"), [LdU64(1), Abort]), (BlockLabel_("3"), [ImmBorrowLoc(Var_("v")), LdU64(1), VecImmBorrow(U64), ReadRef, LdU64(1), Eq, BrFalse(BlockLabel_("5")), Branch(BlockLabel_("6"))]), (BlockLabel_("5"), [LdU64(2), Abort]), (BlockLabel_("6"), [ImmBorrowLoc(Var_("v")), LdU64(2), VecImmBorrow(U64), ReadRef, LdU64(2), Eq, BrFalse(BlockLabel_("8")), Branch(BlockLabel_("9"))]), (BlockLabel_("8"), [LdU64(3), Abort]), (BlockLabel_("9"), [ImmBorrowLoc(Var_("v")), LdU64(3), VecImmBorrow(U64), ReadRef, LdU64(3), Eq, BrFalse(BlockLabel_("11")), Branch(BlockLabel_("12"))]), (BlockLabel_("11"), [LdU64(4), Abort]), (BlockLabel_("12"), [MutBorrowLoc(Var_("v")), LdU64(3), Call(ModuleName("1::vector"), FunctionName("swap_remove"), [U64]), LdU64(3), Eq, BrFalse(BlockLabel_("14")), Branch(BlockLabel_("15"))]), (BlockLabel_("14"), [LdU64(5), Abort]), (BlockLabel_("15"), [ImmBorrowLoc(Var_("v")), VecLen(U64), LdU64(3), Eq, BrFalse(BlockLabel_("17")), Branch(BlockLabel_("18"))]), (BlockLabel_("17"), [LdU64(6), Abort]), (BlockLabel_("18"), [ImmBorrowLoc(Var_("v")), LdU64(0), VecImmBorrow(U64), ReadRef, LdU64(0), Eq, BrFalse(BlockLabel_("20")), Branch(BlockLabel_("21"))]), (BlockLabel_("20"), [LdU64(7), Abort]), (BlockLabel_("21"), [ImmBorrowLoc(Var_("v")), LdU64(1), VecImmBorrow(U64), ReadRef, LdU64(1), Eq, BrFalse(BlockLabel_("23")), Branch(BlockLabel_("24"))]), (BlockLabel_("23"), [LdU64(8), Abort]), (BlockLabel_("24"), [ImmBorrowLoc(Var_("v")), LdU64(2), VecImmBorrow(U64), ReadRef, LdU64(2), Eq, BrFalse(BlockLabel_("26")), Branch(BlockLabel_("27"))]), (BlockLabel_("26"), [LdU64(9), Abort]), (BlockLabel_("27"), [Ret])] } }), (FunctionName("swap_remove_inside_vector"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [(Var_("v"), Vector(U64))], code: [(BlockLabel_("0"), [VecPack(U64, 0), StLoc(Var_("v")), MutBorrowLoc(Var_("v")), LdU64(0), VecPushBack(U64), MutBorrowLoc(Var_("v")), LdU64(1), VecPushBack(U64), MutBorrowLoc(Var_("v")), LdU64(2), VecPushBack(U64), MutBorrowLoc(Var_("v")), LdU64(3), VecPushBack(U64), ImmBorrowLoc(Var_("v")), LdU64(0), VecImmBorrow(U64), ReadRef, LdU64(0), Eq, BrFalse(BlockLabel_("2")), Branch(BlockLabel_("3"))]), (BlockLabel_("2"), [LdU64(1), Abort]), (BlockLabel_("3"), [ImmBorrowLoc(Var_("v")), LdU64(1), VecImmBorrow(U64), ReadRef, LdU64(1), Eq, BrFalse(BlockLabel_("5")), Branch(BlockLabel_("6"))]), (BlockLabel_("5"), [LdU64(2), Abort]), (BlockLabel_("6"), [ImmBorrowLoc(Var_("v")), LdU64(2), VecImmBorrow(U64), ReadRef, LdU64(2), Eq, BrFalse(BlockLabel_("8")), Branch(BlockLabel_("9"))]), (BlockLabel_("8"), [LdU64(3), Abort]), (BlockLabel_("9"), [ImmBorrowLoc(Var_("v")), LdU64(3), VecImmBorrow(U64), ReadRef, LdU64(3), Eq, BrFalse(BlockLabel_("11")), Branch(BlockLabel_("12"))]), (BlockLabel_("11"), [LdU64(4), Abort]), (BlockLabel_("12"), [MutBorrowLoc(Var_("v")), LdU64(1), Call(ModuleName("1::vector"), FunctionName("swap_remove"), [U64]), LdU64(1), Eq, BrFalse(BlockLabel_("14")), Branch(BlockLabel_("15"))]), (BlockLabel_("14"), [LdU64(5), Abort]), (BlockLabel_("15"), [ImmBorrowLoc(Var_("v")), VecLen(U64), LdU64(3), Eq, BrFalse(BlockLabel_("17")), Branch(BlockLabel_("18"))]), (BlockLabel_("17"), [LdU64(6), Abort]), (BlockLabel_("18"), [ImmBorrowLoc(Var_("v")), LdU64(0), VecImmBorrow(U64), ReadRef, LdU64(0), Eq, BrFalse(BlockLabel_("20")), Branch(BlockLabel_("21"))]), (BlockLabel_("20"), [LdU64(7), Abort]), (BlockLabel_("21"), [ImmBorrowLoc(Var_("v")), LdU64(1), VecImmBorrow(U64), ReadRef, LdU64(3), Eq, BrFalse(BlockLabel_("23")), Branch(BlockLabel_("24"))]), (BlockLabel_("23"), [LdU64(8), Abort]), (BlockLabel_("24"), [ImmBorrowLoc(Var_("v")), LdU64(2), VecImmBorrow(U64), ReadRef, LdU64(2), Eq, BrFalse(BlockLabel_("26")), Branch(BlockLabel_("27"))]), (BlockLabel_("26"), [LdU64(9), Abort]), (BlockLabel_("27"), [Ret])] } }), (FunctionName("swap_remove_out_of_range"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [(Var_("v"), Vector(U64))], code: [(BlockLabel_("0"), [VecPack(U64, 0), StLoc(Var_("v")), MutBorrowLoc(Var_("v")), LdU64(0), VecPushBack(U64), MutBorrowLoc(Var_("v")), LdU64(1), Call(ModuleName("1::vector"), FunctionName("swap_remove"), [U64]), Pop, Ret])] } }), (FunctionName("swap_remove_singleton"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [(Var_("v"), Vector(U64))], code: [(BlockLabel_("0"), [VecPack(U64, 0), StLoc(Var_("v")), MutBorrowLoc(Var_("v")), LdU64(0), VecPushBack(U64), MutBorrowLoc(Var_("v")), LdU64(0), Call(ModuleName("1::vector"), FunctionName("swap_remove"), [U64]), LdU64(0), Eq, BrFalse(BlockLabel_("2")), Branch(BlockLabel_("3"))]), (BlockLabel_("2"), [LdU64(0), Abort]), (BlockLabel_("3"), [ImmBorrowLoc(Var_("v")), Call(ModuleName("1::vector"), FunctionName("is_empty"), [U64]), BrFalse(BlockLabel_("5")), Branch(BlockLabel_("6"))]), (BlockLabel_("5"), [LdU64(1), Abort]), (BlockLabel_("6"), [Ret])] } }), (FunctionName("swap_same_index"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [(Var_("vec"), Vector(U64))], code: [(BlockLabel_("0"), [VecPack(U64, 0), StLoc(Var_("vec")), MutBorrowLoc(Var_("vec")), LdU64(0), VecPushBack(U64), MutBorrowLoc(Var_("vec")), LdU64(1), VecPushBack(U64), MutBorrowLoc(Var_("vec")), LdU64(2), VecPushBack(U64), MutBorrowLoc(Var_("vec")), LdU64(3), VecPushBack(U64), MutBorrowLoc(Var_("vec")), LdU64(1), LdU64(1), VecSwap(U64), ImmBorrowLoc(Var_("vec")), LdU64(0), VecImmBorrow(U64), ReadRef, LdU64(0), Eq, BrFalse(BlockLabel_("2")), Branch(BlockLabel_("3"))]), (BlockLabel_("2"), [LdU64(0), Abort]), (BlockLabel_("3"), [ImmBorrowLoc(Var_("vec")), LdU64(1), VecImmBorrow(U64), ReadRef, LdU64(1), Eq, BrFalse(BlockLabel_("5")), Branch(BlockLabel_("6"))]), (BlockLabel_("5"), [LdU64(0), Abort]), (BlockLabel_("6"), [ImmBorrowLoc(Var_("vec")), LdU64(2), VecImmBorrow(U64), ReadRef, LdU64(2), Eq, BrFalse(BlockLabel_("8")), Branch(BlockLabel_("9"))]), (BlockLabel_("8"), [LdU64(0), Abort]), (BlockLabel_("9"), [ImmBorrowLoc(Var_("vec")), LdU64(3), VecImmBorrow(U64), ReadRef, LdU64(3), Eq, BrFalse(BlockLabel_("11")), Branch(BlockLabel_("12"))]), (BlockLabel_("11"), [LdU64(0), Abort]), (BlockLabel_("12"), [Ret])] } }), (FunctionName("test_empty_is_empty"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [(Var_("%#1"), Vector(U64))], code: [(BlockLabel_("0"), [VecPack(U64, 0), StLoc(Var_("%#1")), ImmBorrowLoc(Var_("%#1")), Call(ModuleName("1::vector"), FunctionName("is_empty"), [U64]), BrFalse(BlockLabel_("2")), Branch(BlockLabel_("3"))]), (BlockLabel_("2"), [LdU64(0), Abort]), (BlockLabel_("3"), [Ret])] } }), (FunctionName("test_insert"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [(Var_("v"), Vector(U64)), (Var_("v#1"), Vector(U64)), (Var_("v#2"), Vector(U64)), (Var_("v#3"), Vector(U64))], code: [(BlockLabel_("0"), [LdConst(Vector(U64), Vector([U64(7)])), StLoc(Var_("v")), MutBorrowLoc(Var_("v")), LdU64(6), LdU64(0), Call(ModuleName("1::vector"), FunctionName("insert"), [U64]), MoveLoc(Var_("v")), LdConst(Vector(U64), Vector([U64(6), U64(7)])), Eq, BrFalse(BlockLabel_("2")), Branch(BlockLabel_("3"))]), (BlockLabel_("2"), [LdU64(0), Abort]), (BlockLabel_("3"), [LdConst(Vector(U64), Vector([U64(7), U64(9)])), StLoc(Var_("v#1")), MutBorrowLoc(Var_("v#1")), LdU64(8), LdU64(1), Call(ModuleName("1::vector"), FunctionName("insert"), [U64]), MoveLoc(Var_("v#1")), LdConst(Vector(U64), Vector([U64(7), U64(8), U64(9)])), Eq, BrFalse(BlockLabel_("5")), Branch(BlockLabel_("6"))]), (BlockLabel_("5"), [LdU64(0), Abort]), (BlockLabel_("6"), [LdConst(Vector(U64), Vector([U64(6), U64(7)])), StLoc(Var_("v#2")), MutBorrowLoc(Var_("v#2")), LdU64(5), LdU64(0), Call(ModuleName("1::vector"), FunctionName("insert"), [U64]), MoveLoc(Var_("v#2")), LdConst(Vector(U64), Vector([U64(5), U64(6), U64(7)])), Eq, BrFalse(BlockLabel_("8")), Branch(BlockLabel_("9"))]), (BlockLabel_("8"), [LdU64(0), Abort]), (BlockLabel_("9"), [LdConst(Vector(U64), Vector([U64(5), U64(6), U64(8)])), StLoc(Var_("v#3")), MutBorrowLoc(Var_("v#3")), LdU64(7), LdU64(2), Call(ModuleName("1::vector"), FunctionName("insert"), [U64]), MoveLoc(Var_("v#3")), LdConst(Vector(U64), Vector([U64(5), U64(6), U64(7), U64(8)])), Eq, BrFalse(BlockLabel_("11")), Branch(BlockLabel_("12"))]), (BlockLabel_("11"), [LdU64(0), Abort]), (BlockLabel_("12"), [Ret])] } }), (FunctionName("test_natives_with_different_instantiations"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [], code: [(BlockLabel_("0"), [LdU8(1), LdU8(2), Call(ModuleName("Self"), FunctionName("test_natives_with_type"), [U8]), Pop, Pop, LdU16(45356), LdU16(25345), Call(ModuleName("Self"), FunctionName("test_natives_with_type"), [U16]), Pop, Pop, LdU32(45356), LdU32(28768867), Call(ModuleName("Self"), FunctionName("test_natives_with_type"), [U32]), Pop, Pop, LdU64(1), LdU64(2), Call(ModuleName("Self"), FunctionName("test_natives_with_type"), [U64]), Pop, Pop, LdU128(1), LdU128(2), Call(ModuleName("Self"), FunctionName("test_natives_with_type"), [U128]), Pop, Pop, LdU256(U256(45356)), LdU256(U256(253458768867)), Call(ModuleName("Self"), FunctionName("test_natives_with_type"), [U256]), Pop, Pop, LdTrue, LdFalse, Call(ModuleName("Self"), FunctionName("test_natives_with_type"), [Bool]), Pop, Pop, LdConst(Address, Address(00000000000000000000000000000001)), LdConst(Address, Address(00000000000000000000000000000002)), Call(ModuleName("Self"), FunctionName("test_natives_with_type"), [Address]), Pop, Pop, VecPack(U8, 0), VecPack(U8, 0), Call(ModuleName("Self"), FunctionName("test_natives_with_type"), [Vector(U8)]), Pop, Pop, LdFalse, Pack(StructName("Droppable"), []), LdFalse, Pack(StructName("Droppable"), []), Call(ModuleName("Self"), FunctionName("test_natives_with_type"), [Struct(QualifiedStructIdent { module: ModuleName("Self"), name: StructName("Droppable") }, [])]), Pop, Pop, LdFalse, Pack(StructName("NotDroppable"), []), LdFalse, Pack(StructName("NotDroppable"), []), Call(ModuleName("Self"), FunctionName("test_natives_with_type"), [Struct(QualifiedStructIdent { module: ModuleName("Self"), name: StructName("NotDroppable") }, [])]), Unpack(StructName("NotDroppable"), []), Pop, Unpack(StructName("NotDroppable"), []), Pop, Ret])] } }), (FunctionName("test_natives_with_type"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [(Var_("x1"), TypeParameter(TypeVar_("T"))), (Var_("x2"), TypeParameter(TypeVar_("T")))], return_type: [TypeParameter(TypeVar_("T")), TypeParameter(TypeVar_("T"))], type_formals: [(TypeVar_("T"), {})] }, acquires: [], specifications: [], body: Bytecode { locals: [(Var_("v"), Vector(TypeParameter(TypeVar_("T"))))], code: [(BlockLabel_("0"), [VecPack(TypeParameter(TypeVar_("T")), 0), StLoc(Var_("v")), ImmBorrowLoc(Var_("v")), VecLen(TypeParameter(TypeVar_("T"))), LdU64(0), Eq, BrFalse(BlockLabel_("2")), Branch(BlockLabel_("3"))]), (BlockLabel_("2"), [LdU64(0), Abort]), (BlockLabel_("3"), [MutBorrowLoc(Var_("v")), MoveLoc(Var_("x1")), VecPushBack(TypeParameter(TypeVar_("T"))), ImmBorrowLoc(Var_("v")), VecLen(TypeParameter(TypeVar_("T"))), LdU64(1), Eq, BrFalse(BlockLabel_("5")), Branch(BlockLabel_("6"))]), (BlockLabel_("5"), [LdU64(1), Abort]), (BlockLabel_("6"), [MutBorrowLoc(Var_("v")), MoveLoc(Var_("x2")), VecPushBack(TypeParameter(TypeVar_("T"))), ImmBorrowLoc(Var_("v")), VecLen(TypeParameter(TypeVar_("T"))), LdU64(2), Eq, BrFalse(BlockLabel_("8")), Branch(BlockLabel_("9"))]), (BlockLabel_("8"), [LdU64(2), Abort]), (BlockLabel_("9"), [MutBorrowLoc(Var_("v")), LdU64(0), LdU64(1), VecSwap(TypeParameter(TypeVar_("T"))), MutBorrowLoc(Var_("v")), VecPopBack(TypeParameter(TypeVar_("T"))), StLoc(Var_("x1")), ImmBorrowLoc(Var_("v")), VecLen(TypeParameter(TypeVar_("T"))), LdU64(1), Eq, BrFalse(BlockLabel_("11")), Branch(BlockLabel_("12"))]), (BlockLabel_("11"), [LdU64(3), Abort]), (BlockLabel_("12"), [MutBorrowLoc(Var_("v")), VecPopBack(TypeParameter(TypeVar_("T"))), StLoc(Var_("x2")), ImmBorrowLoc(Var_("v")), VecLen(TypeParameter(TypeVar_("T"))), LdU64(0), Eq, BrFalse(BlockLabel_("14")), Branch(BlockLabel_("15"))]), (BlockLabel_("14"), [LdU64(4), Abort]), (BlockLabel_("15"), [MoveLoc(Var_("v")), VecUnpack(TypeParameter(TypeVar_("T")), 0), MoveLoc(Var_("x1")), MoveLoc(Var_("x2")), Ret])] } }), (FunctionName("test_singleton_contains"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [(Var_("%#1"), Vector(U64)), (Var_("%#2"), Vector(Bool)), (Var_("%#3"), Vector(Address))], code: [(BlockLabel_("0"), [LdU64(0), Call(ModuleName("1::vector"), FunctionName("singleton"), [U64]), StLoc(Var_("%#1")), ImmBorrowLoc(Var_("%#1")), LdU64(0), VecImmBorrow(U64), ReadRef, LdU64(0), Eq, BrFalse(BlockLabel_("2")), Branch(BlockLabel_("3"))]), (BlockLabel_("2"), [LdU64(0), Abort]), (BlockLabel_("3"), [LdTrue, Call(ModuleName("1::vector"), FunctionName("singleton"), [Bool]), StLoc(Var_("%#2")), ImmBorrowLoc(Var_("%#2")), LdU64(0), VecImmBorrow(Bool), ReadRef, LdTrue, Eq, BrFalse(BlockLabel_("5")), Branch(BlockLabel_("6"))]), (BlockLabel_("5"), [LdU64(0), Abort]), (BlockLabel_("6"), [LdConst(Address, Address(00000000000000000000000000000001)), Call(ModuleName("1::vector"), FunctionName("singleton"), [Address]), StLoc(Var_("%#3")), ImmBorrowLoc(Var_("%#3")), LdU64(0), VecImmBorrow(Address), ReadRef, LdConst(Address, Address(00000000000000000000000000000001)), Eq, BrFalse(BlockLabel_("8")), Branch(BlockLabel_("9"))]), (BlockLabel_("8"), [LdU64(0), Abort]), (BlockLabel_("9"), [Ret])] } }), (FunctionName("test_singleton_len"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [(Var_("%#1"), Vector(U64)), (Var_("%#2"), Vector(Bool)), (Var_("%#3"), Vector(Address))], code: [(BlockLabel_("0"), [LdU64(0), Call(ModuleName("1::vector"), FunctionName("singleton"), [U64]), StLoc(Var_("%#1")), ImmBorrowLoc(Var_("%#1")), VecLen(U64), LdU64(1), Eq, BrFalse(BlockLabel_("2")), Branch(BlockLabel_("3"))]), (BlockLabel_("2"), [LdU64(0), Abort]), (BlockLabel_("3"), [LdTrue, Call(ModuleName("1::vector"), FunctionName("singleton"), [Bool]), StLoc(Var_("%#2")), ImmBorrowLoc(Var_("%#2")), VecLen(Bool), LdU64(1), Eq, BrFalse(BlockLabel_("5")), Branch(BlockLabel_("6"))]), (BlockLabel_("5"), [LdU64(0), Abort]), (BlockLabel_("6"), [LdConst(Address, Address(00000000000000000000000000000001)), Call(ModuleName("1::vector"), FunctionName("singleton"), [Address]), StLoc(Var_("%#3")), ImmBorrowLoc(Var_("%#3")), VecLen(Address), LdU64(1), Eq, BrFalse(BlockLabel_("8")), Branch(BlockLabel_("9"))]), (BlockLabel_("8"), [LdU64(0), Abort]), (BlockLabel_("9"), [Ret])] } }), (FunctionName("unit_test_poison"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [], code: [(BlockLabel_("0"), [LdU64(0), Call(ModuleName("1::unit_test"), FunctionName("create_signers_for_testing"), []), Pop, Ret])] } }), (FunctionName("vector_contains"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [(Var_("%#1"), U64), (Var_("%#10"), Reference(false, Vector(U64))), (Var_("%#11"), U64), (Var_("%#12"), Reference(false, Vector(U64))), (Var_("%#13"), U64), (Var_("%#14"), Reference(false, Vector(U64))), (Var_("%#15"), U64), (Var_("%#16"), Reference(false, Vector(U64))), (Var_("%#17"), U64), (Var_("%#18"), Reference(false, Vector(U64))), (Var_("%#19"), U64), (Var_("%#2"), Reference(false, Vector(U64))), (Var_("%#20"), Reference(false, Vector(U64))), (Var_("%#3"), U64), (Var_("%#4"), Reference(false, Vector(U64))), (Var_("%#5"), U64), (Var_("%#6"), Reference(false, Vector(U64))), (Var_("%#7"), U64), (Var_("%#8"), Reference(false, Vector(U64))), (Var_("%#9"), U64), (Var_("vec"), Vector(U64))], code: [(BlockLabel_("0"), [VecPack(U64, 0), StLoc(Var_("vec")), ImmBorrowLoc(Var_("vec")), StLoc(Var_("%#2")), LdU64(0), StLoc(Var_("%#1")), MoveLoc(Var_("%#2")), ImmBorrowLoc(Var_("%#1")), Call(ModuleName("1::vector"), FunctionName("contains"), [U64]), Not, BrFalse(BlockLabel_("2")), Branch(BlockLabel_("3"))]), (BlockLabel_("2"), [LdU64(1), Abort]), (BlockLabel_("3"), [MutBorrowLoc(Var_("vec")), LdU64(0), VecPushBack(U64), ImmBorrowLoc(Var_("vec")), StLoc(Var_("%#4")), LdU64(0), StLoc(Var_("%#3")), MoveLoc(Var_("%#4")), ImmBorrowLoc(Var_("%#3")), Call(ModuleName("1::vector"), FunctionName("contains"), [U64]), BrFalse(BlockLabel_("5")), Branch(BlockLabel_("6"))]), (BlockLabel_("5"), [LdU64(2), Abort]), (BlockLabel_("6"), [ImmBorrowLoc(Var_("vec")), StLoc(Var_("%#6")), LdU64(1), StLoc(Var_("%#5")), MoveLoc(Var_("%#6")), ImmBorrowLoc(Var_("%#5")), Call(ModuleName("1::vector"), FunctionName("contains"), [U64]), Not, BrFalse(BlockLabel_("8")), Branch(BlockLabel_("9"))]), (BlockLabel_("8"), [LdU64(3), Abort]), (BlockLabel_("9"), [MutBorrowLoc(Var_("vec")), LdU64(1), VecPushBack(U64), ImmBorrowLoc(Var_("vec")), StLoc(Var_("%#8")), LdU64(0), StLoc(Var_("%#7")), MoveLoc(Var_("%#8")), ImmBorrowLoc(Var_("%#7")), Call(ModuleName("1::vector"), FunctionName("contains"), [U64]), BrFalse(BlockLabel_("11")), Branch(BlockLabel_("12"))]), (BlockLabel_("11"), [LdU64(4), Abort]), (BlockLabel_("12"), [ImmBorrowLoc(Var_("vec")), StLoc(Var_("%#10")), LdU64(1), StLoc(Var_("%#9")), MoveLoc(Var_("%#10")), ImmBorrowLoc(Var_("%#9")), Call(ModuleName("1::vector"), FunctionName("contains"), [U64]), BrFalse(BlockLabel_("14")), Branch(BlockLabel_("15"))]), (BlockLabel_("14"), [LdU64(5), Abort]), (BlockLabel_("15"), [ImmBorrowLoc(Var_("vec")), StLoc(Var_("%#12")), LdU64(2), StLoc(Var_("%#11")), MoveLoc(Var_("%#12")), ImmBorrowLoc(Var_("%#11")), Call(ModuleName("1::vector"), FunctionName("contains"), [U64]), Not, BrFalse(BlockLabel_("17")), Branch(BlockLabel_("18"))]), (BlockLabel_("17"), [LdU64(6), Abort]), (BlockLabel_("18"), [MutBorrowLoc(Var_("vec")), LdU64(2), VecPushBack(U64), ImmBorrowLoc(Var_("vec")), StLoc(Var_("%#14")), LdU64(0), StLoc(Var_("%#13")), MoveLoc(Var_("%#14")), ImmBorrowLoc(Var_("%#13")), Call(ModuleName("1::vector"), FunctionName("contains"), [U64]), BrFalse(BlockLabel_("20")), Branch(BlockLabel_("21"))]), (BlockLabel_("20"), [LdU64(7), Abort]), (BlockLabel_("21"), [ImmBorrowLoc(Var_("vec")), StLoc(Var_("%#16")), LdU64(1), StLoc(Var_("%#15")), MoveLoc(Var_("%#16")), ImmBorrowLoc(Var_("%#15")), Call(ModuleName("1::vector"), FunctionName("contains"), [U64]), BrFalse(BlockLabel_("23")), Branch(BlockLabel_("24"))]), (BlockLabel_("23"), [LdU64(8), Abort]), (BlockLabel_("24"), [ImmBorrowLoc(Var_("vec")), StLoc(Var_("%#18")), LdU64(2), StLoc(Var_("%#17")), MoveLoc(Var_("%#18")), ImmBorrowLoc(Var_("%#17")), Call(ModuleName("1::vector"), FunctionName("contains"), [U64]), BrFalse(BlockLabel_("26")), Branch(BlockLabel_("27"))]), (BlockLabel_("26"), [LdU64(9), Abort]), (BlockLabel_("27"), [ImmBorrowLoc(Var_("vec")), StLoc(Var_("%#20")), LdU64(3), StLoc(Var_("%#19")), MoveLoc(Var_("%#20")), ImmBorrowLoc(Var_("%#19")), Call(ModuleName("1::vector"), FunctionName("contains"), [U64]), Not, BrFalse(BlockLabel_("29")), Branch(BlockLabel_("30"))]), (BlockLabel_("29"), [LdU64(10), Abort]), (BlockLabel_("30"), [Ret])] } })], synthetics: [] }
IS this part executed?3 in module in translate.rs []
IS this part executed?1 in module in translate.rs
IS this part executed?2 in module in translate.rs
IS this part executed?1 in compile_module function in compiler.rs
yj ModuleDefinition { loc: Loc { file_hash: "4f78c5f4143c39741e4065551fc6dd863f3a62f11f6ce80357436e62665d8f45", start: 83, end: 98 }, identifier: ModuleIdent { name: ModuleName("type_name_tests"), address: 0000000000000000000000000000000a }, friends: [], imports: [ImportDefinition { ident: ModuleIdent { name: ModuleName("ascii"), address: 00000000000000000000000000000001 }, alias: ModuleName("1::ascii") }, ImportDefinition { ident: ModuleIdent { name: ModuleName("option"), address: 00000000000000000000000000000001 }, alias: ModuleName("1::option") }, ImportDefinition { ident: ModuleIdent { name: ModuleName("string"), address: 00000000000000000000000000000001 }, alias: ModuleName("1::string") }, ImportDefinition { ident: ModuleIdent { name: ModuleName("type_name"), address: 00000000000000000000000000000001 }, alias: ModuleName("1::type_name") }, ImportDefinition { ident: ModuleIdent { name: ModuleName("unit_test"), address: 00000000000000000000000000000001 }, alias: ModuleName("1::unit_test") }], explicit_dependency_declarations: [ModuleDependency { name: ModuleName("1::unit_test"), structs: [], functions: [FunctionDependency { name: FunctionName("create_signers_for_testing"), signature: FunctionSignature { formals: [(Var_("num_signers"), U64)], return_type: [Vector(Signer)], type_formals: [] } }] }, ModuleDependency { name: ModuleName("1::option"), structs: [StructDependency { abilities: {Copy, Drop, Store}, name: StructName("Option"), type_formals: [(false, TypeVar_("Element"), {})] }], functions: [] }, ModuleDependency { name: ModuleName("1::ascii"), structs: [StructDependency { abilities: {Copy, Drop, Store}, name: StructName("String"), type_formals: [] }], functions: [FunctionDependency { name: FunctionName("string"), signature: FunctionSignature { formals: [(Var_("bytes"), Vector(U8))], return_type: [Struct(QualifiedStructIdent { module: ModuleName("1::ascii"), name: StructName("String") }, [])], type_formals: [] } }] }, ModuleDependency { name: ModuleName("1::string"), structs: [StructDependency { abilities: {Copy, Drop, Store}, name: StructName("String"), type_formals: [] }], functions: [] }, ModuleDependency { name: ModuleName("1::type_name"), structs: [StructDependency { abilities: {Copy, Drop, Store}, name: StructName("TypeName"), type_formals: [] }], functions: [FunctionDependency { name: FunctionName("get"), signature: FunctionSignature { formals: [], return_type: [Struct(QualifiedStructIdent { module: ModuleName("1::type_name"), name: StructName("TypeName") }, [])], type_formals: [(TypeVar_("T"), {})] } }, FunctionDependency { name: FunctionName("into_string"), signature: FunctionSignature { formals: [(Var_("self"), Struct(QualifiedStructIdent { module: ModuleName("1::type_name"), name: StructName("TypeName") }, []))], return_type: [Struct(QualifiedStructIdent { module: ModuleName("1::ascii"), name: StructName("String") }, [])], type_formals: [] } }] }], structs: [StructDefinition_ { abilities: {}, name: StructName("TestGenerics"), type_formals: [(true, TypeVar_("T"), {})], fields: Move { fields: [(Field_("dummy_field"), Bool)] }, invariants: [] }, StructDefinition_ { abilities: {}, name: StructName("TestMultiGenerics"), type_formals: [(true, TypeVar_("T1"), {}), (true, TypeVar_("T2"), {}), (true, TypeVar_("T3"), {})], fields: Move { fields: [(Field_("dummy_field"), Bool)] }, invariants: [] }, StructDefinition_ { abilities: {}, name: StructName("TestStruct"), type_formals: [], fields: Move { fields: [(Field_("dummy_field"), Bool)] }, invariants: [] }], constants: [], functions: [(FunctionName("test_generics"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [], code: [(BlockLabel_("0"), [Call(ModuleName("1::type_name"), FunctionName("get"), [Struct(QualifiedStructIdent { module: ModuleName("Self"), name: StructName("TestGenerics") }, [Struct(QualifiedStructIdent { module: ModuleName("1::string"), name: StructName("String") }, [])])]), Call(ModuleName("1::type_name"), FunctionName("into_string"), []), LdConst(Vector(U8), Vector([U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(97), U8(58), U8(58), U8(116), U8(121), U8(112), U8(101), U8(95), U8(110), U8(97), U8(109), U8(101), U8(95), U8(116), U8(101), U8(115), U8(116), U8(115), U8(58), U8(58), U8(84), U8(101), U8(115), U8(116), U8(71), U8(101), U8(110), U8(101), U8(114), U8(105), U8(99), U8(115), U8(60), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(49), U8(58), U8(58), U8(115), U8(116), U8(114), U8(105), U8(110), U8(103), U8(58), U8(58), U8(83), U8(116), U8(114), U8(105), U8(110), U8(103), U8(62)])), Call(ModuleName("1::ascii"), FunctionName("string"), []), Eq, BrFalse(BlockLabel_("2")), Branch(BlockLabel_("3"))]), (BlockLabel_("2"), [LdU64(0), Abort]), (BlockLabel_("3"), [Call(ModuleName("1::type_name"), FunctionName("get"), [Vector(Struct(QualifiedStructIdent { module: ModuleName("Self"), name: StructName("TestGenerics") }, [U64]))]), Call(ModuleName("1::type_name"), FunctionName("into_string"), []), LdConst(Vector(U8), Vector([U8(118), U8(101), U8(99), U8(116), U8(111), U8(114), U8(60), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(97), U8(58), U8(58), U8(116), U8(121), U8(112), U8(101), U8(95), U8(110), U8(97), U8(109), U8(101), U8(95), U8(116), U8(101), U8(115), U8(116), U8(115), U8(58), U8(58), U8(84), U8(101), U8(115), U8(116), U8(71), U8(101), U8(110), U8(101), U8(114), U8(105), U8(99), U8(115), U8(60), U8(117), U8(54), U8(52), U8(62), U8(62)])), Call(ModuleName("1::ascii"), FunctionName("string"), []), Eq, BrFalse(BlockLabel_("5")), Branch(BlockLabel_("6"))]), (BlockLabel_("5"), [LdU64(0), Abort]), (BlockLabel_("6"), [Call(ModuleName("1::type_name"), FunctionName("get"), [Struct(QualifiedStructIdent { module: ModuleName("1::option"), name: StructName("Option") }, [Struct(QualifiedStructIdent { module: ModuleName("Self"), name: StructName("TestGenerics") }, [U8])])]), Call(ModuleName("1::type_name"), FunctionName("into_string"), []), LdConst(Vector(U8), Vector([U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(49), U8(58), U8(58), U8(111), U8(112), U8(116), U8(105), U8(111), U8(110), U8(58), U8(58), U8(79), U8(112), U8(116), U8(105), U8(111), U8(110), U8(60), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(97), U8(58), U8(58), U8(116), U8(121), U8(112), U8(101), U8(95), U8(110), U8(97), U8(109), U8(101), U8(95), U8(116), U8(101), U8(115), U8(116), U8(115), U8(58), U8(58), U8(84), U8(101), U8(115), U8(116), U8(71), U8(101), U8(110), U8(101), U8(114), U8(105), U8(99), U8(115), U8(60), U8(117), U8(56), U8(62), U8(62)])), Call(ModuleName("1::ascii"), FunctionName("string"), []), Eq, BrFalse(BlockLabel_("8")), Branch(BlockLabel_("9"))]), (BlockLabel_("8"), [LdU64(0), Abort]), (BlockLabel_("9"), [Ret])] } }), (FunctionName("test_ground_types"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [], code: [(BlockLabel_("0"), [Call(ModuleName("1::type_name"), FunctionName("get"), [U8]), Call(ModuleName("1::type_name"), FunctionName("into_string"), []), LdConst(Vector(U8), Vector([U8(117), U8(56)])), Call(ModuleName("1::ascii"), FunctionName("string"), []), Eq, BrFalse(BlockLabel_("2")), Branch(BlockLabel_("3"))]), (BlockLabel_("2"), [LdU64(0), Abort]), (BlockLabel_("3"), [Call(ModuleName("1::type_name"), FunctionName("get"), [U64]), Call(ModuleName("1::type_name"), FunctionName("into_string"), []), LdConst(Vector(U8), Vector([U8(117), U8(54), U8(52)])), Call(ModuleName("1::ascii"), FunctionName("string"), []), Eq, BrFalse(BlockLabel_("5")), Branch(BlockLabel_("6"))]), (BlockLabel_("5"), [LdU64(0), Abort]), (BlockLabel_("6"), [Call(ModuleName("1::type_name"), FunctionName("get"), [U128]), Call(ModuleName("1::type_name"), FunctionName("into_string"), []), LdConst(Vector(U8), Vector([U8(117), U8(49), U8(50), U8(56)])), Call(ModuleName("1::ascii"), FunctionName("string"), []), Eq, BrFalse(BlockLabel_("8")), Branch(BlockLabel_("9"))]), (BlockLabel_("8"), [LdU64(0), Abort]), (BlockLabel_("9"), [Call(ModuleName("1::type_name"), FunctionName("get"), [Address]), Call(ModuleName("1::type_name"), FunctionName("into_string"), []), LdConst(Vector(U8), Vector([U8(97), U8(100), U8(100), U8(114), U8(101), U8(115), U8(115)])), Call(ModuleName("1::ascii"), FunctionName("string"), []), Eq, BrFalse(BlockLabel_("11")), Branch(BlockLabel_("12"))]), (BlockLabel_("11"), [LdU64(0), Abort]), (BlockLabel_("12"), [Call(ModuleName("1::type_name"), FunctionName("get"), [Signer]), Call(ModuleName("1::type_name"), FunctionName("into_string"), []), LdConst(Vector(U8), Vector([U8(115), U8(105), U8(103), U8(110), U8(101), U8(114)])), Call(ModuleName("1::ascii"), FunctionName("string"), []), Eq, BrFalse(BlockLabel_("14")), Branch(BlockLabel_("15"))]), (BlockLabel_("14"), [LdU64(0), Abort]), (BlockLabel_("15"), [Call(ModuleName("1::type_name"), FunctionName("get"), [Vector(U8)]), Call(ModuleName("1::type_name"), FunctionName("into_string"), []), LdConst(Vector(U8), Vector([U8(118), U8(101), U8(99), U8(116), U8(111), U8(114), U8(60), U8(117), U8(56), U8(62)])), Call(ModuleName("1::ascii"), FunctionName("string"), []), Eq, BrFalse(BlockLabel_("17")), Branch(BlockLabel_("18"))]), (BlockLabel_("17"), [LdU64(0), Abort]), (BlockLabel_("18"), [Ret])] } }), (FunctionName("test_multi_generics"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [], code: [(BlockLabel_("0"), [Call(ModuleName("1::type_name"), FunctionName("get"), [Struct(QualifiedStructIdent { module: ModuleName("Self"), name: StructName("TestMultiGenerics") }, [Bool, U64, U128])]), Call(ModuleName("1::type_name"), FunctionName("into_string"), []), LdConst(Vector(U8), Vector([U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(97), U8(58), U8(58), U8(116), U8(121), U8(112), U8(101), U8(95), U8(110), U8(97), U8(109), U8(101), U8(95), U8(116), U8(101), U8(115), U8(116), U8(115), U8(58), U8(58), U8(84), U8(101), U8(115), U8(116), U8(77), U8(117), U8(108), U8(116), U8(105), U8(71), U8(101), U8(110), U8(101), U8(114), U8(105), U8(99), U8(115), U8(60), U8(98), U8(111), U8(111), U8(108), U8(44), U8(117), U8(54), U8(52), U8(44), U8(117), U8(49), U8(50), U8(56), U8(62)])), Call(ModuleName("1::ascii"), FunctionName("string"), []), Eq, BrFalse(BlockLabel_("2")), Branch(BlockLabel_("3"))]), (BlockLabel_("2"), [LdU64(0), Abort]), (BlockLabel_("3"), [Call(ModuleName("1::type_name"), FunctionName("get"), [Struct(QualifiedStructIdent { module: ModuleName("Self"), name: StructName("TestMultiGenerics") }, [Bool, Vector(U64), Struct(QualifiedStructIdent { module: ModuleName("Self"), name: StructName("TestGenerics") }, [U128])])]), Call(ModuleName("1::type_name"), FunctionName("into_string"), []), LdConst(Vector(U8), Vector([U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(97), U8(58), U8(58), U8(116), U8(121), U8(112), U8(101), U8(95), U8(110), U8(97), U8(109), U8(101), U8(95), U8(116), U8(101), U8(115), U8(116), U8(115), U8(58), U8(58), U8(84), U8(101), U8(115), U8(116), U8(77), U8(117), U8(108), U8(116), U8(105), U8(71), U8(101), U8(110), U8(101), U8(114), U8(105), U8(99), U8(115), U8(60), U8(98), U8(111), U8(111), U8(108), U8(44), U8(118), U8(101), U8(99), U8(116), U8(111), U8(114), U8(60), U8(117), U8(54), U8(52), U8(62), U8(44), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(97), U8(58), U8(58), U8(116), U8(121), U8(112), U8(101), U8(95), U8(110), U8(97), U8(109), U8(101), U8(95), U8(116), U8(101), U8(115), U8(116), U8(115), U8(58), U8(58), U8(84), U8(101), U8(115), U8(116), U8(71), U8(101), U8(110), U8(101), U8(114), U8(105), U8(99), U8(115), U8(60), U8(117), U8(49), U8(50), U8(56), U8(62), U8(62)])), Call(ModuleName("1::ascii"), FunctionName("string"), []), Eq, BrFalse(BlockLabel_("5")), Branch(BlockLabel_("6"))]), (BlockLabel_("5"), [LdU64(0), Abort]), (BlockLabel_("6"), [Ret])] } }), (FunctionName("test_structs"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [], code: [(BlockLabel_("0"), [Call(ModuleName("1::type_name"), FunctionName("get"), [Struct(QualifiedStructIdent { module: ModuleName("Self"), name: StructName("TestStruct") }, [])]), Call(ModuleName("1::type_name"), FunctionName("into_string"), []), LdConst(Vector(U8), Vector([U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(97), U8(58), U8(58), U8(116), U8(121), U8(112), U8(101), U8(95), U8(110), U8(97), U8(109), U8(101), U8(95), U8(116), U8(101), U8(115), U8(116), U8(115), U8(58), U8(58), U8(84), U8(101), U8(115), U8(116), U8(83), U8(116), U8(114), U8(117), U8(99), U8(116)])), Call(ModuleName("1::ascii"), FunctionName("string"), []), Eq, BrFalse(BlockLabel_("2")), Branch(BlockLabel_("3"))]), (BlockLabel_("2"), [LdU64(0), Abort]), (BlockLabel_("3"), [Call(ModuleName("1::type_name"), FunctionName("get"), [Struct(QualifiedStructIdent { module: ModuleName("1::ascii"), name: StructName("String") }, [])]), Call(ModuleName("1::type_name"), FunctionName("into_string"), []), LdConst(Vector(U8), Vector([U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(49), U8(58), U8(58), U8(97), U8(115), U8(99), U8(105), U8(105), U8(58), U8(58), U8(83), U8(116), U8(114), U8(105), U8(110), U8(103)])), Call(ModuleName("1::ascii"), FunctionName("string"), []), Eq, BrFalse(BlockLabel_("5")), Branch(BlockLabel_("6"))]), (BlockLabel_("5"), [LdU64(0), Abort]), (BlockLabel_("6"), [Call(ModuleName("1::type_name"), FunctionName("get"), [Struct(QualifiedStructIdent { module: ModuleName("1::option"), name: StructName("Option") }, [U64])]), Call(ModuleName("1::type_name"), FunctionName("into_string"), []), LdConst(Vector(U8), Vector([U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(49), U8(58), U8(58), U8(111), U8(112), U8(116), U8(105), U8(111), U8(110), U8(58), U8(58), U8(79), U8(112), U8(116), U8(105), U8(111), U8(110), U8(60), U8(117), U8(54), U8(52), U8(62)])), Call(ModuleName("1::ascii"), FunctionName("string"), []), Eq, BrFalse(BlockLabel_("8")), Branch(BlockLabel_("9"))]), (BlockLabel_("8"), [LdU64(0), Abort]), (BlockLabel_("9"), [Call(ModuleName("1::type_name"), FunctionName("get"), [Struct(QualifiedStructIdent { module: ModuleName("1::string"), name: StructName("String") }, [])]), Call(ModuleName("1::type_name"), FunctionName("into_string"), []), LdConst(Vector(U8), Vector([U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(48), U8(49), U8(58), U8(58), U8(115), U8(116), U8(114), U8(105), U8(110), U8(103), U8(58), U8(58), U8(83), U8(116), U8(114), U8(105), U8(110), U8(103)])), Call(ModuleName("1::ascii"), FunctionName("string"), []), Eq, BrFalse(BlockLabel_("11")), Branch(BlockLabel_("12"))]), (BlockLabel_("11"), [LdU64(0), Abort]), (BlockLabel_("12"), [Ret])] } }), (FunctionName("unit_test_poison"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [], code: [(BlockLabel_("0"), [LdU64(0), Call(ModuleName("1::unit_test"), FunctionName("create_signers_for_testing"), []), Pop, Ret])] } })], synthetics: [] }
IS this part executed?3 in module in translate.rs []
IS this part executed?1 in module in translate.rs
IS this part executed?2 in module in translate.rs
IS this part executed?1 in compile_module function in compiler.rs
yj ModuleDefinition { loc: Loc { file_hash: "c1c6f0706a9495891462e580597ce90614f7d7a61c91da693549746a7b6759c1", start: 15, end: 24 }, identifier: ModuleIdent { name: ModuleName("BasicCoin"), address: 0000000000000000000000000000cafe }, friends: [], imports: [ImportDefinition { ident: ModuleIdent { name: ModuleName("signer"), address: 00000000000000000000000000000001 }, alias: ModuleName("1::signer") }, ImportDefinition { ident: ModuleIdent { name: ModuleName("unit_test"), address: 00000000000000000000000000000001 }, alias: ModuleName("1::unit_test") }], explicit_dependency_declarations: [ModuleDependency { name: ModuleName("1::unit_test"), structs: [], functions: [FunctionDependency { name: FunctionName("create_signers_for_testing"), signature: FunctionSignature { formals: [(Var_("num_signers"), U64)], return_type: [Vector(Signer)], type_formals: [] } }] }, ModuleDependency { name: ModuleName("1::signer"), structs: [], functions: [FunctionDependency { name: FunctionName("address_of"), signature: FunctionSignature { formals: [(Var_("s"), Reference(false, Signer))], return_type: [Address], type_formals: [] } }] }], structs: [StructDefinition_ { abilities: {Key}, name: StructName("Coin"), type_formals: [], fields: Move { fields: [(Field_("value"), U64)] }, invariants: [] }], constants: [], functions: [(FunctionName("mint"), Function_ { visibility: Public, is_entry: false, signature: FunctionSignature { formals: [(Var_("account"), Signer), (Var_("value"), U64)], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [], code: [(BlockLabel_("0"), [ImmBorrowLoc(Var_("account")), MoveLoc(Var_("value")), Pack(StructName("Coin"), []), MoveTo(StructName("Coin"), []), Ret])] } }), (FunctionName("test_mint_10"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [(Var_("account"), Signer)], return_type: [], type_formals: [] }, acquires: [StructName("Coin")], specifications: [], body: Bytecode { locals: [(Var_("addr"), Address)], code: [(BlockLabel_("0"), [ImmBorrowLoc(Var_("account")), Call(ModuleName("1::signer"), FunctionName("address_of"), []), StLoc(Var_("addr")), MoveLoc(Var_("account")), LdU64(10), Call(ModuleName("Self"), FunctionName("mint"), []), MoveLoc(Var_("addr")), ImmBorrowGlobal(StructName("Coin"), []), ImmBorrowField(StructName("Coin"), [], Field_("value")), ReadRef, LdU64(10), Eq, BrFalse(BlockLabel_("2")), Branch(BlockLabel_("3"))]), (BlockLabel_("2"), [LdU64(0), Abort]), (BlockLabel_("3"), [Ret])] } }), (FunctionName("unit_test_poison"), Function_ { visibility: Internal, is_entry: false, signature: FunctionSignature { formals: [], return_type: [], type_formals: [] }, acquires: [], specifications: [], body: Bytecode { locals: [], code: [(BlockLabel_("0"), [LdU64(0), Call(ModuleName("1::unit_test"), FunctionName("create_signers_for_testing"), []), Pop, Ret])] } })], synthetics: [] }
IS this part executed?3 in module in translate.rs []
Running Move unit tests
[ PASS    ] 0xcafe::BasicCoin::test_mint_10
Test result: OK. Total tests: 1; passed: 1; failed: 0
